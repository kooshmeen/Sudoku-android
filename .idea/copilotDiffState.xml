<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/kooshmeen/sudoku/MainActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/kooshmeen/sudoku/MainActivity.kt" />
              <option name="originalContent" value="/**&#10; * MainActivity.kt&#10; * This file defines the main entry point for the Sudoku app.&#10; */&#10;&#10;package com.kooshmeen.sudoku&#10;&#10;import android.os.Bundle&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.compose.setContent&#10;import androidx.activity.enableEdgeToEdge&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.material3.Scaffold&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.setValue&#10;import androidx.compose.ui.Modifier&#10;import androidx.navigation.compose.NavHost&#10;import androidx.navigation.compose.composable&#10;import androidx.navigation.compose.rememberNavController&#10;import com.kooshmeen.sudoku.data.GameStateManager&#10;import com.kooshmeen.sudoku.ui.screens.AuthScreen&#10;import com.kooshmeen.sudoku.ui.screens.GameScreen&#10;import com.kooshmeen.sudoku.ui.screens.MainMenu&#10;import com.kooshmeen.sudoku.ui.screens.RecordScreen&#10;import com.kooshmeen.sudoku.ui.theme.SudokuTheme&#10;&#10;class MainActivity : ComponentActivity() {&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        enableEdgeToEdge()&#10;        setContent {&#10;            val NavController = rememberNavController()&#10;            var isDarkTheme by remember { mutableStateOf(false) }&#10;&#10;            NavHost(&#10;                navController = NavController,&#10;                startDestination = &quot;main_menu&quot;,&#10;                modifier = Modifier.fillMaxSize()&#10;            ) {&#10;                composable(&quot;main_menu&quot;) {&#10;                    SudokuTheme (darkTheme = isDarkTheme) {&#10;                        Scaffold(modifier = Modifier.fillMaxSize()) { innerPadding -&gt;&#10;                            MainMenu(&#10;                                onNavigateToGame = {&#10;                                    NavController.navigate(&quot;game_screen&quot;)&#10;                                },&#10;                                onContinueGame = {&#10;                                    NavController.navigate(&quot;game_screen&quot;)&#10;                                },&#10;                                onStartNewGame = { difficulty -&gt;&#10;                                    NavController.navigate(&quot;game_screen&quot;)&#10;                                },&#10;                                onNavigateToRecords = {&#10;                                    NavController.navigate(&quot;record_screen&quot;)&#10;                                },&#10;                                onNavigateToAuth = {&#10;                                    NavController.navigate(&quot;auth_screen&quot;)&#10;                                },&#10;                                modifier = Modifier&#10;                                    .fillMaxSize()&#10;                                    .padding(innerPadding),&#10;                                isDarkTheme = isDarkTheme,&#10;                                onThemeToggle = { isDarkTheme = it }&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;                composable(&quot;auth_screen&quot;) {&#10;                    SudokuTheme(darkTheme = isDarkTheme) {&#10;                        Scaffold(modifier = Modifier.fillMaxSize()) { innerPadding -&gt;&#10;                            AuthScreen(&#10;                                onNavigateBack = {&#10;                                    NavController.navigateUp()&#10;                                },&#10;                                onLoginSuccess = {&#10;                                    NavController.navigate(&quot;main_menu&quot;) {&#10;                                        popUpTo(&quot;main_menu&quot;) { inclusive = true }&#10;                                    }&#10;                                },&#10;                                modifier = Modifier&#10;                                    .fillMaxSize()&#10;                                    .padding(innerPadding)&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;                composable(&quot;game_screen&quot;) {&#10;                    SudokuTheme(darkTheme = isDarkTheme) {&#10;                        Scaffold(modifier = Modifier.fillMaxSize()) { innerPadding -&gt;&#10;                            GameScreen(&#10;                                onNavigateToMenu = {&#10;                                    NavController.navigateUp()&#10;                                },&#10;                                modifier = Modifier&#10;                                    .fillMaxSize()&#10;                                    .padding(innerPadding),&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;                composable(&quot;record_screen&quot;) {&#10;                    SudokuTheme(darkTheme = isDarkTheme) {&#10;                        Scaffold(modifier = Modifier.fillMaxSize()) { innerPadding -&gt;&#10;                            RecordScreen(&#10;                                modifier = Modifier&#10;                                    .fillMaxSize()&#10;                                    .padding(innerPadding),&#10;                                onNavigateBack = {&#10;                                    NavController.navigateUp()&#10;                                }&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    override fun onPause() {&#10;        super.onPause()&#10;        // Save game state when app goes to background&#10;        GameStateManager.saveCurrentGame(this)&#10;    }&#10;}" />
              <option name="updatedContent" value="/**&#10; * MainActivity.kt&#10; * This file defines the main entry point for the Sudoku app.&#10; */&#10;&#10;package com.kooshmeen.sudoku&#10;&#10;import android.os.Bundle&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.compose.setContent&#10;import androidx.activity.enableEdgeToEdge&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.material3.Scaffold&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.setValue&#10;import androidx.compose.ui.Modifier&#10;import androidx.navigation.compose.NavHost&#10;import androidx.navigation.compose.composable&#10;import androidx.navigation.compose.rememberNavController&#10;import com.kooshmeen.sudoku.data.GameStateManager&#10;import com.kooshmeen.sudoku.ui.screens.AuthScreen&#10;import com.kooshmeen.sudoku.ui.screens.GameScreen&#10;import com.kooshmeen.sudoku.ui.screens.LeaderboardScreen&#10;import com.kooshmeen.sudoku.ui.screens.MainMenu&#10;import com.kooshmeen.sudoku.ui.screens.RecordScreen&#10;import com.kooshmeen.sudoku.ui.theme.SudokuTheme&#10;&#10;class MainActivity : ComponentActivity() {&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        enableEdgeToEdge()&#10;        setContent {&#10;            val NavController = rememberNavController()&#10;            var isDarkTheme by remember { mutableStateOf(false) }&#10;&#10;            NavHost(&#10;                navController = NavController,&#10;                startDestination = &quot;main_menu&quot;,&#10;                modifier = Modifier.fillMaxSize()&#10;            ) {&#10;                composable(&quot;main_menu&quot;) {&#10;                    SudokuTheme (darkTheme = isDarkTheme) {&#10;                        Scaffold(modifier = Modifier.fillMaxSize()) { innerPadding -&gt;&#10;                            MainMenu(&#10;                                onNavigateToGame = {&#10;                                    NavController.navigate(&quot;game_screen&quot;)&#10;                                },&#10;                                onContinueGame = {&#10;                                    NavController.navigate(&quot;game_screen&quot;)&#10;                                },&#10;                                onStartNewGame = { difficulty -&gt;&#10;                                    NavController.navigate(&quot;game_screen&quot;)&#10;                                },&#10;                                onNavigateToRecords = {&#10;                                    NavController.navigate(&quot;record_screen&quot;)&#10;                                },&#10;                                onNavigateToAuth = {&#10;                                    NavController.navigate(&quot;auth_screen&quot;)&#10;                                },&#10;                                onNavigateToLeaderboard = {&#10;                                    NavController.navigate(&quot;leaderboard_screen&quot;)&#10;                                },&#10;                                modifier = Modifier&#10;                                    .fillMaxSize()&#10;                                    .padding(innerPadding),&#10;                                isDarkTheme = isDarkTheme,&#10;                                onThemeToggle = { isDarkTheme = it }&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;                composable(&quot;auth_screen&quot;) {&#10;                    SudokuTheme(darkTheme = isDarkTheme) {&#10;                        Scaffold(modifier = Modifier.fillMaxSize()) { innerPadding -&gt;&#10;                            AuthScreen(&#10;                                onNavigateBack = {&#10;                                    NavController.navigateUp()&#10;                                },&#10;                                onLoginSuccess = {&#10;                                    NavController.navigate(&quot;main_menu&quot;) {&#10;                                        popUpTo(&quot;main_menu&quot;) { inclusive = true }&#10;                                    }&#10;                                },&#10;                                modifier = Modifier&#10;                                    .fillMaxSize()&#10;                                    .padding(innerPadding)&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;                composable(&quot;game_screen&quot;) {&#10;                    SudokuTheme(darkTheme = isDarkTheme) {&#10;                        Scaffold(modifier = Modifier.fillMaxSize()) { innerPadding -&gt;&#10;                            GameScreen(&#10;                                onNavigateToMenu = {&#10;                                    NavController.navigateUp()&#10;                                },&#10;                                modifier = Modifier&#10;                                    .fillMaxSize()&#10;                                    .padding(innerPadding),&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;                composable(&quot;record_screen&quot;) {&#10;                    SudokuTheme(darkTheme = isDarkTheme) {&#10;                        Scaffold(modifier = Modifier.fillMaxSize()) { innerPadding -&gt;&#10;                            RecordScreen(&#10;                                modifier = Modifier&#10;                                    .fillMaxSize()&#10;                                    .padding(innerPadding),&#10;                                onNavigateBack = {&#10;                                    NavController.navigateUp()&#10;                                }&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;                composable(&quot;leaderboard_screen&quot;) {&#10;                    SudokuTheme(darkTheme = isDarkTheme) {&#10;                        Scaffold(modifier = Modifier.fillMaxSize()) { innerPadding -&gt;&#10;                            LeaderboardScreen(&#10;                                onNavigateBack = {&#10;                                    NavController.navigateUp()&#10;                                },&#10;                                modifier = Modifier&#10;                                    .fillMaxSize()&#10;                                    .padding(innerPadding)&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    override fun onPause() {&#10;        super.onPause()&#10;        // Save game state when app goes to background&#10;        GameStateManager.saveCurrentGame(this)&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/kooshmeen/sudoku/api/SudokuApiService.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/kooshmeen/sudoku/api/SudokuApiService.kt" />
              <option name="originalContent" value="package com.kooshmeen.sudoku.api&#10;&#10;import com.kooshmeen.sudoku.data.api.ApiResponse&#10;import com.kooshmeen.sudoku.data.api.GameSubmission&#10;import com.kooshmeen.sudoku.data.api.GroupData&#10;import com.kooshmeen.sudoku.data.api.LoginRequest&#10;import com.kooshmeen.sudoku.data.api.LoginResponse&#10;import com.kooshmeen.sudoku.data.api.RegisterRequest&#10;import retrofit2.Response&#10;import retrofit2.http.Body&#10;import retrofit2.http.GET&#10;import retrofit2.http.Header&#10;import retrofit2.http.POST&#10;import retrofit2.http.PUT&#10;import retrofit2.http.Path&#10;import retrofit2.http.Query&#10;&#10;interface SudokuApiService {&#10;    // Authentication&#10;    @POST(&quot;register&quot;)&#10;    suspend fun register(@Body request: RegisterRequest): Response&lt;ApiResponse&gt;&#10;&#10;    @POST(&quot;login&quot;)&#10;    suspend fun login(@Body request: LoginRequest): Response&lt;LoginResponse&gt;&#10;&#10;    // Profile management&#10;    @PUT(&quot;profile&quot;)&#10;    suspend fun updateProfile(&#10;        @Header(&quot;Authorization&quot;) token: String,&#10;        @Body update: Map&lt;String, String&gt;&#10;    ): Response&lt;ApiResponse&gt;&#10;&#10;    @PUT(&quot;password&quot;)&#10;    suspend fun changePassword(&#10;        @Header(&quot;Authorization&quot;) token: String,&#10;        @Body request: Map&lt;String, String&gt;&#10;    ): Response&lt;ApiResponse&gt;&#10;&#10;    // Game submission&#10;    @POST(&quot;submit-game&quot;)&#10;    suspend fun submitGame(&#10;        @Header(&quot;Authorization&quot;) token: String,&#10;        @Body gameData: GameSubmission&#10;    ): Response&lt;ApiResponse&gt;&#10;&#10;    // Statistics&#10;    @GET(&quot;stats&quot;)&#10;    suspend fun getPlayerStats(@Header(&quot;Authorization&quot;) token: String): Response&lt;Any&gt;&#10;&#10;    @GET(&quot;medals&quot;)&#10;    suspend fun getPlayerMedals(@Header(&quot;Authorization&quot;) token: String): Response&lt;Any&gt;&#10;&#10;    // Leaderboards&#10;    @GET(&quot;leaderboard/global&quot;)&#10;    suspend fun getGlobalLeaderboard(&#10;        @Query(&quot;periodType&quot;) periodType: String = &quot;all&quot;,&#10;        @Query(&quot;limit&quot;) limit: Int = 10&#10;    ): Response&lt;Any&gt;&#10;&#10;    // Groups&#10;    @POST(&quot;groups&quot;)&#10;    suspend fun createGroup(&#10;        @Header(&quot;Authorization&quot;) token: String,&#10;        @Body groupData: GroupData&#10;    ): Response&lt;ApiResponse&gt;&#10;&#10;    @GET(&quot;groups&quot;)&#10;    suspend fun getAllGroups(): Response&lt;Any&gt;&#10;&#10;    @GET(&quot;my-groups&quot;)&#10;    suspend fun getMyGroups(@Header(&quot;Authorization&quot;) token: String): Response&lt;Any&gt;&#10;&#10;    @GET(&quot;groups/{groupId}&quot;)&#10;    suspend fun getGroupDetails(@Path(&quot;groupId&quot;) groupId: Int): Response&lt;Any&gt;&#10;&#10;    @POST(&quot;groups/{groupId}/join&quot;)&#10;    suspend fun joinGroup(&#10;        @Header(&quot;Authorization&quot;) token: String,&#10;        @Path(&quot;groupId&quot;) groupId: Int,&#10;        @Body password: Map&lt;String, String&gt;&#10;    ): Response&lt;ApiResponse&gt;&#10;}" />
              <option name="updatedContent" value="package com.kooshmeen.sudoku.api&#10;&#10;import com.kooshmeen.sudoku.data.api.ApiResponse&#10;import com.kooshmeen.sudoku.data.api.GameSubmission&#10;import com.kooshmeen.sudoku.data.api.GroupData&#10;import com.kooshmeen.sudoku.data.api.LeaderboardResponse&#10;import com.kooshmeen.sudoku.data.api.LoginRequest&#10;import com.kooshmeen.sudoku.data.api.LoginResponse&#10;import com.kooshmeen.sudoku.data.api.RegisterRequest&#10;import retrofit2.Response&#10;import retrofit2.http.Body&#10;import retrofit2.http.DELETE&#10;import retrofit2.http.GET&#10;import retrofit2.http.Header&#10;import retrofit2.http.POST&#10;import retrofit2.http.PUT&#10;import retrofit2.http.Path&#10;import retrofit2.http.Query&#10;&#10;interface SudokuApiService {&#10;    // Public routes (no authentication required)&#10;    @POST(&quot;register&quot;)&#10;    suspend fun register(@Body request: RegisterRequest): Response&lt;ApiResponse&gt;&#10;&#10;    @POST(&quot;login&quot;)&#10;    suspend fun login(@Body request: LoginRequest): Response&lt;LoginResponse&gt;&#10;&#10;    @GET(&quot;groups&quot;)&#10;    suspend fun getAllGroups(): Response&lt;List&lt;GroupData&gt;&gt;&#10;&#10;    @GET(&quot;groups/search&quot;)&#10;    suspend fun searchGroups(@Query(&quot;q&quot;) query: String): Response&lt;List&lt;GroupData&gt;&gt;&#10;&#10;    @GET(&quot;leaderboard/global&quot;)&#10;    suspend fun getGlobalLeaderboard(): Response&lt;LeaderboardResponse&gt;&#10;&#10;    // Specific leaderboard routes&#10;    @GET(&quot;leaderboard/global/all-time&quot;)&#10;    suspend fun getTop100GlobalAllTime(): Response&lt;LeaderboardResponse&gt;&#10;&#10;    @GET(&quot;leaderboard/global/monthly&quot;)&#10;    suspend fun getTop100GlobalMonth(): Response&lt;LeaderboardResponse&gt;&#10;&#10;    @GET(&quot;leaderboard/global/weekly&quot;)&#10;    suspend fun getTop100GlobalWeek(): Response&lt;LeaderboardResponse&gt;&#10;&#10;    @GET(&quot;leaderboard/global/daily&quot;)&#10;    suspend fun getTop100GlobalDay(): Response&lt;LeaderboardResponse&gt;&#10;&#10;    // Protected routes (authentication required)&#10;    @PUT(&quot;profile&quot;)&#10;    suspend fun updateProfile(&#10;        @Header(&quot;Authorization&quot;) token: String,&#10;        @Body update: Map&lt;String, String&gt;&#10;    ): Response&lt;ApiResponse&gt;&#10;&#10;    @PUT(&quot;password&quot;)&#10;    suspend fun changePassword(&#10;        @Header(&quot;Authorization&quot;) token: String,&#10;        @Body request: Map&lt;String, String&gt;&#10;    ): Response&lt;ApiResponse&gt;&#10;&#10;    // Game submission&#10;    @POST(&quot;submit-game&quot;)&#10;    suspend fun submitGame(&#10;        @Header(&quot;Authorization&quot;) token: String,&#10;        @Body gameData: GameSubmission&#10;    ): Response&lt;ApiResponse&gt;&#10;&#10;    // Player statistics and medals&#10;    @GET(&quot;stats&quot;)&#10;    suspend fun getPlayerStats(&#10;        @Header(&quot;Authorization&quot;) token: String&#10;    ): Response&lt;Map&lt;String, Any&gt;&gt;&#10;&#10;    @GET(&quot;medals&quot;)&#10;    suspend fun getPlayerMedals(&#10;        @Header(&quot;Authorization&quot;) token: String&#10;    ): Response&lt;List&lt;Map&lt;String, Any&gt;&gt;&gt;&#10;&#10;    // Group management routes&#10;    @POST(&quot;groups&quot;)&#10;    suspend fun createGroup(&#10;        @Header(&quot;Authorization&quot;) token: String,&#10;        @Body groupData: GroupData&#10;    ): Response&lt;ApiResponse&gt;&#10;&#10;    @GET(&quot;my-groups&quot;)&#10;    suspend fun getMyGroups(&#10;        @Header(&quot;Authorization&quot;) token: String&#10;    ): Response&lt;List&lt;GroupData&gt;&gt;&#10;&#10;    @GET(&quot;groups/{groupId}&quot;)&#10;    suspend fun getGroupDetails(&#10;        @Header(&quot;Authorization&quot;) token: String,&#10;        @Path(&quot;groupId&quot;) groupId: Int&#10;    ): Response&lt;GroupData&gt;&#10;&#10;    @POST(&quot;groups/{groupId}/join&quot;)&#10;    suspend fun joinGroup(&#10;        @Header(&quot;Authorization&quot;) token: String,&#10;        @Path(&quot;groupId&quot;) groupId: Int,&#10;        @Body password: Map&lt;String, String&gt;? = null&#10;    ): Response&lt;ApiResponse&gt;&#10;&#10;    @DELETE(&quot;groups/{groupId}/leave&quot;)&#10;    suspend fun leaveGroup(&#10;        @Header(&quot;Authorization&quot;) token: String,&#10;        @Path(&quot;groupId&quot;) groupId: Int&#10;    ): Response&lt;ApiResponse&gt;&#10;&#10;    @DELETE(&quot;groups/{groupId}&quot;)&#10;    suspend fun deleteGroup(&#10;        @Header(&quot;Authorization&quot;) token: String,&#10;        @Path(&quot;groupId&quot;) groupId: Int&#10;    ): Response&lt;ApiResponse&gt;&#10;&#10;    // Group leaderboard&#10;    @GET(&quot;groups/{groupId}/leaderboard&quot;)&#10;    suspend fun getGroupLeaderboard(&#10;        @Header(&quot;Authorization&quot;) token: String,&#10;        @Path(&quot;groupId&quot;) groupId: Int&#10;    ): Response&lt;LeaderboardResponse&gt;&#10;&#10;    // Group member management (leaders only)&#10;    @PUT(&quot;groups/{groupId}/members/{memberId}/role&quot;)&#10;    suspend fun setMemberRole(&#10;        @Header(&quot;Authorization&quot;) token: String,&#10;        @Path(&quot;groupId&quot;) groupId: Int,&#10;        @Path(&quot;memberId&quot;) memberId: Int,&#10;        @Body roleData: Map&lt;String, String&gt;&#10;    ): Response&lt;ApiResponse&gt;&#10;&#10;    // Admin routes (for awarding medals)&#10;    @POST(&quot;players/{playerId}/medals&quot;)&#10;    suspend fun awardMedal(&#10;        @Header(&quot;Authorization&quot;) token: String,&#10;        @Path(&quot;playerId&quot;) playerId: Int,&#10;        @Body medalData: Map&lt;String, Any&gt;&#10;    ): Response&lt;ApiResponse&gt;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/kooshmeen/sudoku/data/GameAction.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/kooshmeen/sudoku/data/GameAction.kt" />
              <option name="originalContent" value="/**&#10; * Sealed class representing different actions that can be performed on the Sudoku grid&#10; * Used for implementing undo functionality&#10; */&#10;&#10;package com.kooshmeen.sudoku.data&#10;&#10;sealed class GameAction {&#10;    data class SetValue(&#10;        val row: Int,&#10;        val col: Int,&#10;        val oldValue: Int,&#10;        val newValue: Int,&#10;        val oldNotes: Set&lt;Int&gt;&#10;    ) : GameAction()&#10;&#10;    data class AddNote(&#10;        val row: Int,&#10;        val col: Int,&#10;        val note: Int&#10;    ) : GameAction()&#10;&#10;    data class RemoveNote(&#10;        val row: Int,&#10;        val col: Int,&#10;        val note: Int&#10;    ) : GameAction()&#10;&#10;    data class ClearCell(&#10;        val row: Int,&#10;        val col: Int,&#10;        val oldValue: Int,&#10;        val oldNotes: Set&lt;Int&gt;&#10;    ) : GameAction()&#10;}&#10;&#10;" />
              <option name="updatedContent" value="/**&#10; * Sealed class representing different actions that can be performed on the Sudoku grid&#10; * Used for implementing undo functionality&#10; */&#10;&#10;package com.kooshmeen.sudoku.data&#10;&#10;sealed class GameAction {&#10;    data class SetValue(&#10;        val row: Int,&#10;        val col: Int,&#10;        val oldValue: Int,&#10;        val newValue: Int,&#10;        val oldNotes: Set&lt;Int&gt;&#10;    ) : GameAction()&#10;&#10;    data class AddNote(&#10;        val row: Int,&#10;        val col: Int,&#10;        val note: Int&#10;    ) : GameAction()&#10;&#10;    data class RemoveNote(&#10;        val row: Int,&#10;        val col: Int,&#10;        val note: Int&#10;    ) : GameAction()&#10;&#10;    data class ClearCell(&#10;        val row: Int,&#10;        val col: Int,&#10;        val oldValue: Int,&#10;        val oldNotes: Set&lt;Int&gt;&#10;    ) : GameAction()&#10;&#10;    data class RemoveNotesBatch(&#10;        val cells: List&lt;Pair&lt;Int, Int&gt;&gt;,&#10;        val note: Int,&#10;        val oldNotes: List&lt;Set&lt;Int&gt;&gt;&#10;    ) : GameAction()&#10;&#10;    data class AutofillNotes(&#10;        val cells: List&lt;Pair&lt;Int, Int&gt;&gt;,&#10;        val oldNotes: List&lt;Set&lt;Int&gt;&gt;&#10;    ) : GameAction()&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/kooshmeen/sudoku/data/GameState.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/kooshmeen/sudoku/data/GameState.kt" />
              <option name="originalContent" value="/**&#10; * Game state manager for Sudoku&#10; * Handles all game logic, state management, and action history for undo functionality&#10; */&#10;&#10;package com.kooshmeen.sudoku.data&#10;&#10;import android.content.Context&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableIntStateOf&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.setValue&#10;import com.kooshmeen.sudoku.repository.SudokuRepository&#10;import com.kooshmeen.sudoku.utils.SudokuValidator&#10;import java.util.Locale&#10;import java.util.Stack&#10;&#10;class GameState {&#10;    // Game grid - 9x9 array of SudokuCell objects&#10;    var grid by mutableStateOf(Array(9) { Array(9) { SudokuCell() } })&#10;        private set&#10;&#10;    // Currently selected cell&#10;    var selectedCell by mutableStateOf&lt;Pair&lt;Int, Int&gt;?&gt;(null)&#10;        private set&#10;&#10;    // Current game mode&#10;    var gameMode by mutableStateOf(GameMode.NORMAL)&#10;        private set&#10;&#10;    // Current number of mistakes made by the player&#10;    var mistakesCount by mutableIntStateOf(0)&#10;        private set&#10;&#10;    // Selected number from input row (1-9)&#10;    var selectedNumber by mutableStateOf&lt;Int?&gt;(null)&#10;        private set&#10;&#10;    // Action history for undo functionality&#10;    private val actionHistory = Stack&lt;GameAction&gt;()&#10;&#10;    // Game timer&#10;    var elapsedTimeSeconds by mutableStateOf(0)&#10;        private set&#10;&#10;    // Game difficulty&#10;    var difficulty by mutableStateOf(&quot;Easy&quot;)&#10;        private set&#10;&#10;    // Game paused state&#10;    var isPaused by mutableStateOf(false)&#10;        private set&#10;&#10;    // Error cells&#10;    var errorCells by mutableStateOf(emptySet&lt;Pair&lt;Int, Int&gt;&gt;())&#10;        private set&#10;&#10;    // Game active state&#10;    var isGameActive by mutableStateOf(false)&#10;        private set&#10;&#10;    // Game completed state&#10;    var isGameCompleted by mutableStateOf(false)&#10;        private set&#10;&#10;    // Store the original solution grid for error checking&#10;    internal var solutionGrid: Array&lt;IntArray&gt; = Array(9) { IntArray(9) }&#10;        private set&#10;&#10;    enum class GameMode {&#10;        NORMAL,    // Place numbers&#10;        NOTES,     // Add/remove notes&#10;        ERASE      // Clear cells&#10;    }&#10;&#10;    private lateinit var repository: SudokuRepository&#10;&#10;    fun initializeRepository(context: Context) {&#10;        repository = SudokuRepository(context)&#10;    }&#10;&#10;    suspend fun submitScoreToServer(): Boolean {&#10;        return if (isGameCompleted &amp;&amp; ::repository.isInitialized &amp;&amp; repository.isLoggedIn()) {&#10;            val result = repository.submitGame(&#10;                difficulty = difficulty,&#10;                timeSeconds = elapsedTimeSeconds,&#10;                mistakes = mistakesCount&#10;            )&#10;            result.isSuccess&#10;        } else {&#10;            false&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Record game completion in local statistics&#10;     */&#10;    fun recordGameCompletion(context: Context) {&#10;        if (isGameCompleted) {&#10;            com.kooshmeen.sudoku.utils.StatisticsManager.recordCompletedGame(&#10;                context = context,&#10;                difficulty = difficulty,&#10;                score = highestPossibleScore(),&#10;                timeSeconds = elapsedTimeSeconds,&#10;                mistakes = mistakesCount&#10;            )&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Select a number from the input row&#10;     */&#10;    fun selectNumber(number: Int) {&#10;        selectedNumber = if (selectedNumber == number) null else number&#10;    }&#10;&#10;    /**&#10;     * Toggle the game mode between NORMAL and NOTES&#10;     */&#10;    fun toggleNotesMode() {&#10;        gameMode = if (gameMode == GameMode.NOTES) GameMode.NORMAL else GameMode.NOTES&#10;    }&#10;&#10;    /**&#10;     * Toggle erase mode on/off&#10;     */&#10;    fun toggleEraseMode() {&#10;        gameMode = if (gameMode == GameMode.ERASE) GameMode.NORMAL else GameMode.ERASE&#10;    }&#10;&#10;    /**&#10;     * Set erase mode&#10;     */&#10;    fun setEraseMode() {&#10;        gameMode = GameMode.ERASE&#10;    }&#10;&#10;    /**&#10;     * Returns highest possible score from current game state&#10;     * Calculated as:&#10;     * const score = Math.round((difficultyMultiplier * mistakePenalty) * (Math.max(0, (timeScore - timeSeconds) * 2) + basePoints));&#10;     * With: difficultyMultiplier = 0.33 for Easy, 0.7 for Medium, 1.5 for Hard&#10;     * timeScore = 600 for Easy, 1200 for Medium, 1800 for Hard&#10;     * mistakePenalty = max(0.4, 1 - (numberOfMistakes * 0.1)&#10;     * basePoints = 1000&#10;     */&#10;    fun highestPossibleScore(): Int {&#10;        val difficultyMultiplier = when (difficulty.lowercase(Locale.ROOT)) {&#10;            &quot;easy&quot; -&gt; 0.33&#10;            &quot;medium&quot; -&gt; 0.7&#10;            &quot;hard&quot; -&gt; 1.5&#10;            else -&gt; 0.33 // Default to Easy if unknown&#10;        }&#10;&#10;        val timeScore = when (difficulty.lowercase(Locale.ROOT)) {&#10;            &quot;easy&quot; -&gt; 600&#10;            &quot;medium&quot; -&gt; 1200&#10;            &quot;hard&quot; -&gt; 1800&#10;            else -&gt; 600 // Default to Easy if unknown&#10;        }&#10;&#10;        val mistakePenalty = maxOf(0.4, 1 - (mistakesCount * 0.1))&#10;        val basePoints = 1000&#10;&#10;        return ((difficultyMultiplier * mistakePenalty) * (maxOf(0, (timeScore - elapsedTimeSeconds) * 2) + basePoints)).toInt()&#10;    }&#10;&#10;    /**&#10;     * Input a number directly to a cell (no selection needed)&#10;     */&#10;    fun inputToCell(row: Int, col: Int) {&#10;        val number = selectedNumber ?: return&#10;&#10;        when (gameMode) {&#10;            GameMode.NORMAL -&gt; setValue(row, col, number)&#10;            GameMode.NOTES -&gt; toggleNote(row, col, number)&#10;            GameMode.ERASE -&gt; clearCell(row, col)&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Set a value in a cell&#10;     */&#10;    private fun setValue(row: Int, col: Int, value: Int) {&#10;        val currentCell = grid[row][col]&#10;        if (currentCell.isOriginal) return&#10;        val action = GameAction.SetValue(&#10;            row = row,&#10;            col = col,&#10;            oldValue = currentCell.value,&#10;            newValue = value,&#10;            oldNotes = currentCell.notes&#10;        )&#10;        actionHistory.push(action)&#10;        val newGrid = Array(9) { r -&gt; Array(9) { c -&gt; grid[r][c] } }&#10;        // Error: compare to solutionGrid&#10;        val hasError = solutionGrid[row][col] != value&#10;        newGrid[row][col] = currentCell.copy(&#10;            value = value,&#10;            notes = emptySet(),&#10;            hasError = hasError&#10;        )&#10;        // Track cells and old notes for undo&#10;        val affectedCells = mutableListOf&lt;Pair&lt;Int, Int&gt;&gt;()&#10;        val affectedOldNotes = mutableListOf&lt;Set&lt;Int&gt;&gt;()&#10;        // Remove notes of this value in row&#10;        for (c in 0..8) {&#10;            if (c != col) {&#10;                val cell = newGrid[row][c]&#10;                if (cell.notes.contains(value)) {&#10;                    affectedCells.add(Pair(row, c))&#10;                    affectedOldNotes.add(cell.notes)&#10;                    newGrid[row][c] = cell.copy(notes = cell.notes - value)&#10;                }&#10;            }&#10;        }&#10;        // Remove from column&#10;        for (r in 0..8) {&#10;            if (r != row) {&#10;                val cell = newGrid[r][col]&#10;                if (cell.notes.contains(value)) {&#10;                    affectedCells.add(Pair(r, col))&#10;                    affectedOldNotes.add(cell.notes)&#10;                    newGrid[r][col] = cell.copy(notes = cell.notes - value)&#10;                }&#10;            }&#10;        }&#10;        // Remove from box&#10;        val boxRow = (row / 3) * 3&#10;        val boxCol = (col / 3) * 3&#10;        for (r in boxRow until boxRow + 3) {&#10;            for (c in boxCol until boxCol + 3) {&#10;                if ((r != row || c != col)) {&#10;                    val cell = newGrid[r][c]&#10;                    if (cell.notes.contains(value)) {&#10;                        affectedCells.add(Pair(r, c))&#10;                        affectedOldNotes.add(cell.notes)&#10;                        newGrid[r][c] = cell.copy(notes = cell.notes - value)&#10;                    }&#10;                }&#10;            }&#10;        }&#10;        // Push batch note removal to action stack for undo&#10;        if (affectedCells.isNotEmpty()) {&#10;            actionHistory.push(GameAction.RemoveNotesBatch(affectedCells, value, affectedOldNotes))&#10;        }&#10;        if (hasError) {&#10;            errorCells = errorCells + Pair(row, col)&#10;            // Mark as mistake&#10;            mistakesCount++&#10;        } else {&#10;            errorCells = errorCells - Pair(row, col)&#10;        }&#10;        grid = newGrid&#10;        if (isGameComplete()) {&#10;            isGameCompleted = true&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Toggle a note in a cell&#10;     */&#10;    private fun toggleNote(row: Int, col: Int, note: Int) {&#10;        val currentCell = grid[row][col]&#10;&#10;        // Only allow notes in empty cells&#10;        if (currentCell.isFilled || currentCell.isOriginal) return&#10;&#10;        val newGrid = Array(9) { r -&gt; Array(9) { c -&gt; grid[r][c] } }&#10;&#10;        if (currentCell.notes.contains(note)) {&#10;            // Remove note&#10;            val action = GameAction.RemoveNote(row, col, note)&#10;            actionHistory.push(action)&#10;&#10;            newGrid[row][col] = currentCell.copy(&#10;                notes = currentCell.notes - note,&#10;            )&#10;        } else {&#10;            // Add note&#10;            val action = GameAction.AddNote(row, col, note)&#10;            actionHistory.push(action)&#10;&#10;            newGrid[row][col] = currentCell.copy(&#10;                notes = currentCell.notes + note,&#10;            )&#10;        }&#10;&#10;        grid = newGrid&#10;    }&#10;&#10;    /**&#10;     * Clear a cell (erase mode)&#10;     */&#10;    private fun clearCell(row: Int, col: Int) {&#10;        val currentCell = grid[row][col]&#10;&#10;        // Don't allow clearing original puzzle cells&#10;        if (currentCell.isOriginal) return&#10;&#10;        // Create action for undo&#10;        val action = GameAction.ClearCell(&#10;            row = row,&#10;            col = col,&#10;            oldValue = currentCell.value,&#10;            oldNotes = currentCell.notes&#10;        )&#10;        actionHistory.push(action)&#10;&#10;        // Clear the cell&#10;        val newGrid = Array(9) { r -&gt; Array(9) { c -&gt; grid[r][c] } }&#10;        newGrid[row][col] = SudokuCell() // Create a new empty cell&#10;        grid = newGrid&#10;    }&#10;&#10;    /**&#10;     * Undo the last action&#10;     */&#10;    fun undo() {&#10;        if (actionHistory.isEmpty()) return&#10;&#10;        val action = actionHistory.pop()&#10;        val newGrid = Array(9) { r -&gt; Array(9) { c -&gt; grid[r][c] } }&#10;&#10;        when (action) {&#10;            is GameAction.SetValue -&gt; {&#10;                newGrid[action.row][action.col] = grid[action.row][action.col].copy(&#10;                    value = action.oldValue,&#10;                    notes = action.oldNotes,&#10;                    hasError = false&#10;                )&#10;            }&#10;            is GameAction.AddNote -&gt; {&#10;                val currentCell = grid[action.row][action.col]&#10;                newGrid[action.row][action.col] = currentCell.copy(&#10;                    notes = currentCell.notes - action.note,&#10;                )&#10;            }&#10;            is GameAction.RemoveNote -&gt; {&#10;                val currentCell = grid[action.row][action.col]&#10;                newGrid[action.row][action.col] = currentCell.copy(&#10;                    notes = currentCell.notes + action.note,&#10;                )&#10;            }&#10;            is GameAction.ClearCell -&gt; {&#10;                newGrid[action.row][action.col] = SudokuCell(&#10;                    value = action.oldValue,&#10;                    notes = action.oldNotes,&#10;                    isOriginal = grid[action.row][action.col].isOriginal&#10;                )&#10;            }&#10;            is GameAction.RemoveNotesBatch -&gt; {&#10;                action.cells.forEachIndexed { idx, (row, col) -&gt;&#10;                    val cell = grid[row][col]&#10;                    newGrid[row][col] = cell.copy(notes = action.oldNotes[idx])&#10;                }&#10;            }&#10;        }&#10;&#10;        grid = newGrid&#10;    }&#10;&#10;    /**&#10;     * Check if there's an active game in progress&#10;     */&#10;    fun hasActiveGame(): Boolean {&#10;        return isGameActive &amp;&amp; !isGameCompleted&#10;    }&#10;&#10;    /**&#10;     * Check if the game is completed&#10;     */&#10;    fun isGameComplete(): Boolean {&#10;        // Check if all cells are filled and there are no errors&#10;        for (row in 0..8) {&#10;            for (col in 0..8) {&#10;                val cell = grid[row][col]&#10;                if (cell.isEmpty || cell.hasError) {&#10;                    return false&#10;                }&#10;            }&#10;        }&#10;        return true&#10;    }&#10;&#10;    /**&#10;     * Initialize a new game with the given difficulty&#10;     */&#10;    fun startNewGame(difficulty: String) {&#10;        this.difficulty = difficulty&#10;        this.elapsedTimeSeconds = 0&#10;        this.isPaused = false&#10;        this.selectedCell = null&#10;        this.selectedNumber = null&#10;        this.gameMode = GameMode.NORMAL&#10;        this.actionHistory.clear()&#10;        this.isGameActive = true&#10;        this.isGameCompleted = false&#10;        this.errorCells = emptySet()&#10;        this.mistakesCount = 0&#10;&#10;        // Generate a new puzzle and store the solution grid&#10;        val generator = SudokuGenerator()&#10;        val completeGrid = generator.generateCompleteGrid()&#10;        solutionGrid = completeGrid.map { it.clone() }.toTypedArray()&#10;        grid = generator.createPuzzleWithUniquenessCheck(completeGrid, difficulty)&#10;    }&#10;&#10;    /**&#10;     * Continue an existing game&#10;     */&#10;    fun continueGame() {&#10;        this.isPaused = false&#10;        this.selectedCell = null&#10;        this.selectedNumber = null&#10;        this.gameMode = GameMode.NORMAL&#10;    }&#10;&#10;    /**&#10;     * End the current game&#10;     */&#10;    fun endGame() {&#10;        this.isGameActive = false&#10;        this.isGameCompleted = isGameComplete()&#10;    }&#10;&#10;    /**&#10;     * Toggle pause state&#10;     */&#10;    fun togglePause() {&#10;        isPaused = !isPaused&#10;    }&#10;&#10;    /**&#10;     * Update timer (call this every second when game is not paused)&#10;     */&#10;    fun updateTimer() {&#10;        if (!isPaused &amp;&amp; isGameActive) {&#10;            elapsedTimeSeconds++&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Format elapsed time as MM:SS&#10;     */&#10;    fun getFormattedTime(): String {&#10;        val minutes = elapsedTimeSeconds / 60&#10;        val seconds = elapsedTimeSeconds % 60&#10;        return String.format(Locale.ROOT, &quot;%02d:%02d&quot;, minutes, seconds)&#10;    }&#10;&#10;    /**&#10;     * Load game state from saved data&#10;     */&#10;    fun loadFromSavedState(savedState: SavedGameState) {&#10;        this.difficulty = savedState.difficulty&#10;        this.elapsedTimeSeconds = savedState.elapsedTimeSeconds&#10;        this.mistakesCount = savedState.mistakesCount&#10;        this.isGameActive = true&#10;        this.isGameCompleted = false&#10;        this.isPaused = false&#10;        this.selectedCell = null&#10;        this.selectedNumber = null&#10;        this.gameMode = GameMode.NORMAL&#10;        this.actionHistory.clear()&#10;        this.errorCells = emptySet()&#10;&#10;        // Convert saved grid to SudokuCell array&#10;        this.grid = Array(9) { row -&gt;&#10;            Array(9) { col -&gt;&#10;                val saved = savedState.grid[row][col]&#10;                SudokuCell(&#10;                    value = saved.value,&#10;                    notes = saved.notes.toSet(),&#10;                    isOriginal = saved.isOriginal,&#10;                    hasError = saved.hasError&#10;                )&#10;            }&#10;        }&#10;&#10;        // Convert solution grid&#10;        this.solutionGrid = Array(9) { row -&gt;&#10;            IntArray(9) { col -&gt;&#10;                savedState.solutionGrid[row][col]&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="/**&#10; * Game state manager for Sudoku&#10; * Handles all game logic, state management, and action history for undo functionality&#10; */&#10;&#10;package com.kooshmeen.sudoku.data&#10;&#10;import android.content.Context&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableIntStateOf&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.setValue&#10;import com.kooshmeen.sudoku.repository.SudokuRepository&#10;import com.kooshmeen.sudoku.utils.SudokuValidator&#10;import java.util.Locale&#10;import java.util.Stack&#10;&#10;class GameState {&#10;    // Game grid - 9x9 array of SudokuCell objects&#10;    var grid by mutableStateOf(Array(9) { Array(9) { SudokuCell() } })&#10;        private set&#10;&#10;    // Currently selected cell&#10;    var selectedCell by mutableStateOf&lt;Pair&lt;Int, Int&gt;?&gt;(null)&#10;        private set&#10;&#10;    // Current game mode&#10;    var gameMode by mutableStateOf(GameMode.NORMAL)&#10;        private set&#10;&#10;    // Current number of mistakes made by the player&#10;    var mistakesCount by mutableIntStateOf(0)&#10;        private set&#10;&#10;    // Selected number from input row (1-9)&#10;    var selectedNumber by mutableStateOf&lt;Int?&gt;(null)&#10;        private set&#10;&#10;    // Action history for undo functionality&#10;    private val actionHistory = Stack&lt;GameAction&gt;()&#10;&#10;    // Game timer&#10;    var elapsedTimeSeconds by mutableStateOf(0)&#10;        private set&#10;&#10;    // Game difficulty&#10;    var difficulty by mutableStateOf(&quot;Easy&quot;)&#10;        private set&#10;&#10;    // Game paused state&#10;    var isPaused by mutableStateOf(false)&#10;        private set&#10;&#10;    // Error cells&#10;    var errorCells by mutableStateOf(emptySet&lt;Pair&lt;Int, Int&gt;&gt;())&#10;        private set&#10;&#10;    // Game active state&#10;    var isGameActive by mutableStateOf(false)&#10;        private set&#10;&#10;    // Game completed state&#10;    var isGameCompleted by mutableStateOf(false)&#10;        private set&#10;&#10;    // Store the original solution grid for error checking&#10;    internal var solutionGrid: Array&lt;IntArray&gt; = Array(9) { IntArray(9) }&#10;        private set&#10;&#10;    enum class GameMode {&#10;        NORMAL,    // Place numbers&#10;        NOTES,     // Add/remove notes&#10;        ERASE      // Clear cells&#10;    }&#10;&#10;    private lateinit var repository: SudokuRepository&#10;&#10;    fun initializeRepository(context: Context) {&#10;        repository = SudokuRepository(context)&#10;    }&#10;&#10;    suspend fun submitScoreToServer(): Boolean {&#10;        return if (isGameCompleted &amp;&amp; ::repository.isInitialized &amp;&amp; repository.isLoggedIn()) {&#10;            val result = repository.submitGame(&#10;                difficulty = difficulty,&#10;                timeSeconds = elapsedTimeSeconds,&#10;                mistakes = mistakesCount&#10;            )&#10;            result.isSuccess&#10;        } else {&#10;            false&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Record game completion in local statistics&#10;     */&#10;    fun recordGameCompletion(context: Context) {&#10;        if (isGameCompleted) {&#10;            com.kooshmeen.sudoku.utils.StatisticsManager.recordCompletedGame(&#10;                context = context,&#10;                difficulty = difficulty,&#10;                score = highestPossibleScore(),&#10;                timeSeconds = elapsedTimeSeconds,&#10;                mistakes = mistakesCount&#10;            )&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Select a number from the input row&#10;     */&#10;    fun selectNumber(number: Int) {&#10;        selectedNumber = if (selectedNumber == number) null else number&#10;    }&#10;&#10;    /**&#10;     * Toggle the game mode between NORMAL and NOTES&#10;     */&#10;    fun toggleNotesMode() {&#10;        gameMode = if (gameMode == GameMode.NOTES) GameMode.NORMAL else GameMode.NOTES&#10;    }&#10;&#10;    /**&#10;     * Toggle erase mode on/off&#10;     */&#10;    fun toggleEraseMode() {&#10;        gameMode = if (gameMode == GameMode.ERASE) GameMode.NORMAL else GameMode.ERASE&#10;    }&#10;&#10;    /**&#10;     * Set erase mode&#10;     */&#10;    fun setEraseMode() {&#10;        gameMode = GameMode.ERASE&#10;    }&#10;&#10;    /**&#10;     * Returns highest possible score from current game state&#10;     * Calculated as:&#10;     * const score = Math.round((difficultyMultiplier * mistakePenalty) * (Math.max(0, (timeScore - timeSeconds) * 2) + basePoints));&#10;     * With: difficultyMultiplier = 0.33 for Easy, 0.7 for Medium, 1.5 for Hard&#10;     * timeScore = 600 for Easy, 1200 for Medium, 1800 for Hard&#10;     * mistakePenalty = max(0.4, 1 - (numberOfMistakes * 0.1)&#10;     * basePoints = 1000&#10;     */&#10;    fun highestPossibleScore(): Int {&#10;        val difficultyMultiplier = when (difficulty.lowercase(Locale.ROOT)) {&#10;            &quot;easy&quot; -&gt; 0.33&#10;            &quot;medium&quot; -&gt; 0.7&#10;            &quot;hard&quot; -&gt; 1.5&#10;            else -&gt; 0.33 // Default to Easy if unknown&#10;        }&#10;&#10;        val timeScore = when (difficulty.lowercase(Locale.ROOT)) {&#10;            &quot;easy&quot; -&gt; 600&#10;            &quot;medium&quot; -&gt; 1200&#10;            &quot;hard&quot; -&gt; 1800&#10;            else -&gt; 600 // Default to Easy if unknown&#10;        }&#10;&#10;        val mistakePenalty = maxOf(0.4, 1 - (mistakesCount * 0.1))&#10;        val basePoints = 1000&#10;&#10;        return ((difficultyMultiplier * mistakePenalty) * (maxOf(0, (timeScore - elapsedTimeSeconds) * 2) + basePoints)).toInt()&#10;    }&#10;&#10;    /**&#10;     * Input a number directly to a cell (no selection needed)&#10;     */&#10;    fun inputToCell(row: Int, col: Int) {&#10;        val number = selectedNumber ?: return&#10;&#10;        when (gameMode) {&#10;            GameMode.NORMAL -&gt; setValue(row, col, number)&#10;            GameMode.NOTES -&gt; toggleNote(row, col, number)&#10;            GameMode.ERASE -&gt; clearCell(row, col)&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Set a value in a cell&#10;     */&#10;    private fun setValue(row: Int, col: Int, value: Int) {&#10;        val currentCell = grid[row][col]&#10;        if (currentCell.isOriginal) return&#10;        val action = GameAction.SetValue(&#10;            row = row,&#10;            col = col,&#10;            oldValue = currentCell.value,&#10;            newValue = value,&#10;            oldNotes = currentCell.notes&#10;        )&#10;        actionHistory.push(action)&#10;        val newGrid = Array(9) { r -&gt; Array(9) { c -&gt; grid[r][c] } }&#10;        // Error: compare to solutionGrid&#10;        val hasError = solutionGrid[row][col] != value&#10;        newGrid[row][col] = currentCell.copy(&#10;            value = value,&#10;            notes = emptySet(),&#10;            hasError = hasError&#10;        )&#10;        // Track cells and old notes for undo&#10;        val affectedCells = mutableListOf&lt;Pair&lt;Int, Int&gt;&gt;()&#10;        val affectedOldNotes = mutableListOf&lt;Set&lt;Int&gt;&gt;()&#10;        // Remove notes of this value in row&#10;        for (c in 0..8) {&#10;            if (c != col) {&#10;                val cell = newGrid[row][c]&#10;                if (cell.notes.contains(value)) {&#10;                    affectedCells.add(Pair(row, c))&#10;                    affectedOldNotes.add(cell.notes)&#10;                    newGrid[row][c] = cell.copy(notes = cell.notes - value)&#10;                }&#10;            }&#10;        }&#10;        // Remove from column&#10;        for (r in 0..8) {&#10;            if (r != row) {&#10;                val cell = newGrid[r][col]&#10;                if (cell.notes.contains(value)) {&#10;                    affectedCells.add(Pair(r, col))&#10;                    affectedOldNotes.add(cell.notes)&#10;                    newGrid[r][col] = cell.copy(notes = cell.notes - value)&#10;                }&#10;            }&#10;        }&#10;        // Remove from box&#10;        val boxRow = (row / 3) * 3&#10;        val boxCol = (col / 3) * 3&#10;        for (r in boxRow until boxRow + 3) {&#10;            for (c in boxCol until boxCol + 3) {&#10;                if ((r != row || c != col)) {&#10;                    val cell = newGrid[r][c]&#10;                    if (cell.notes.contains(value)) {&#10;                        affectedCells.add(Pair(r, c))&#10;                        affectedOldNotes.add(cell.notes)&#10;                        newGrid[r][c] = cell.copy(notes = cell.notes - value)&#10;                    }&#10;                }&#10;            }&#10;        }&#10;        // Push batch note removal to action stack for undo&#10;        if (affectedCells.isNotEmpty()) {&#10;            actionHistory.push(GameAction.RemoveNotesBatch(affectedCells, value, affectedOldNotes))&#10;        }&#10;        if (hasError) {&#10;            errorCells = errorCells + Pair(row, col)&#10;            // Mark as mistake&#10;            mistakesCount++&#10;        } else {&#10;            errorCells = errorCells - Pair(row, col)&#10;        }&#10;        grid = newGrid&#10;        if (isGameComplete()) {&#10;            isGameCompleted = true&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Toggle a note in a cell&#10;     */&#10;    private fun toggleNote(row: Int, col: Int, note: Int) {&#10;        val currentCell = grid[row][col]&#10;&#10;        // Only allow notes in empty cells&#10;        if (currentCell.isFilled || currentCell.isOriginal) return&#10;&#10;        val newGrid = Array(9) { r -&gt; Array(9) { c -&gt; grid[r][c] } }&#10;&#10;        if (currentCell.notes.contains(note)) {&#10;            // Remove note&#10;            val action = GameAction.RemoveNote(row, col, note)&#10;            actionHistory.push(action)&#10;&#10;            newGrid[row][col] = currentCell.copy(&#10;                notes = currentCell.notes - note,&#10;            )&#10;        } else {&#10;            // Add note&#10;            val action = GameAction.AddNote(row, col, note)&#10;            actionHistory.push(action)&#10;&#10;            newGrid[row][col] = currentCell.copy(&#10;                notes = currentCell.notes + note,&#10;            )&#10;        }&#10;&#10;        grid = newGrid&#10;    }&#10;&#10;    /**&#10;     * Clear a cell (erase mode)&#10;     */&#10;    private fun clearCell(row: Int, col: Int) {&#10;        val currentCell = grid[row][col]&#10;&#10;        // Don't allow clearing original puzzle cells&#10;        if (currentCell.isOriginal) return&#10;&#10;        // Create action for undo&#10;        val action = GameAction.ClearCell(&#10;            row = row,&#10;            col = col,&#10;            oldValue = currentCell.value,&#10;            oldNotes = currentCell.notes&#10;        )&#10;        actionHistory.push(action)&#10;&#10;        // Clear the cell&#10;        val newGrid = Array(9) { r -&gt; Array(9) { c -&gt; grid[r][c] } }&#10;        newGrid[row][col] = SudokuCell() // Create a new empty cell&#10;        grid = newGrid&#10;    }&#10;&#10;    /**&#10;     * Undo the last action&#10;     */&#10;    fun undo() {&#10;        if (actionHistory.isEmpty()) return&#10;&#10;        val action = actionHistory.pop()&#10;        val newGrid = Array(9) { r -&gt; Array(9) { c -&gt; grid[r][c] } }&#10;&#10;        when (action) {&#10;            is GameAction.SetValue -&gt; {&#10;                newGrid[action.row][action.col] = grid[action.row][action.col].copy(&#10;                    value = action.oldValue,&#10;                    notes = action.oldNotes,&#10;                    hasError = false&#10;                )&#10;            }&#10;            is GameAction.AddNote -&gt; {&#10;                val currentCell = grid[action.row][action.col]&#10;                newGrid[action.row][action.col] = currentCell.copy(&#10;                    notes = currentCell.notes - action.note,&#10;                )&#10;            }&#10;            is GameAction.RemoveNote -&gt; {&#10;                val currentCell = grid[action.row][action.col]&#10;                newGrid[action.row][action.col] = currentCell.copy(&#10;                    notes = currentCell.notes + action.note,&#10;                )&#10;            }&#10;            is GameAction.ClearCell -&gt; {&#10;                newGrid[action.row][action.col] = SudokuCell(&#10;                    value = action.oldValue,&#10;                    notes = action.oldNotes,&#10;                    isOriginal = grid[action.row][action.col].isOriginal&#10;                )&#10;            }&#10;            is GameAction.RemoveNotesBatch -&gt; {&#10;                action.cells.forEachIndexed { idx, (row, col) -&gt;&#10;                    val cell = grid[row][col]&#10;                    newGrid[row][col] = cell.copy(notes = action.oldNotes[idx])&#10;                }&#10;            }&#10;            is GameAction.AutofillNotes -&gt; {&#10;                action.cells.forEachIndexed { idx, (row, col) -&gt;&#10;                    val cell = grid[row][col]&#10;                    newGrid[row][col] = cell.copy(notes = action.oldNotes[idx])&#10;                }&#10;            }&#10;        }&#10;&#10;        grid = newGrid&#10;    }&#10;&#10;    /**&#10;     * Check if there's an active game in progress&#10;     */&#10;    fun hasActiveGame(): Boolean {&#10;        return isGameActive &amp;&amp; !isGameCompleted&#10;    }&#10;&#10;    /**&#10;     * Check if the game is completed&#10;     */&#10;    fun isGameComplete(): Boolean {&#10;        // Check if all cells are filled and there are no errors&#10;        for (row in 0..8) {&#10;            for (col in 0..8) {&#10;                val cell = grid[row][col]&#10;                if (cell.isEmpty || cell.hasError) {&#10;                    return false&#10;                }&#10;            }&#10;        }&#10;        return true&#10;    }&#10;&#10;    /**&#10;     * Initialize a new game with the given difficulty&#10;     */&#10;    fun startNewGame(difficulty: String) {&#10;        this.difficulty = difficulty&#10;        this.elapsedTimeSeconds = 0&#10;        this.isPaused = false&#10;        this.selectedCell = null&#10;        this.selectedNumber = null&#10;        this.gameMode = GameMode.NORMAL&#10;        this.actionHistory.clear()&#10;        this.isGameActive = true&#10;        this.isGameCompleted = false&#10;        this.errorCells = emptySet()&#10;        this.mistakesCount = 0&#10;&#10;        // Generate a new puzzle and store the solution grid&#10;        val generator = SudokuGenerator()&#10;        val completeGrid = generator.generateCompleteGrid()&#10;        solutionGrid = completeGrid.map { it.clone() }.toTypedArray()&#10;        grid = generator.createPuzzleWithUniquenessCheck(completeGrid, difficulty)&#10;    }&#10;&#10;    /**&#10;     * Continue an existing game&#10;     */&#10;    fun continueGame() {&#10;        this.isPaused = false&#10;        this.selectedCell = null&#10;        this.selectedNumber = null&#10;        this.gameMode = GameMode.NORMAL&#10;    }&#10;&#10;    /**&#10;     * End the current game&#10;     */&#10;    fun endGame() {&#10;        this.isGameActive = false&#10;        this.isGameCompleted = isGameComplete()&#10;    }&#10;&#10;    /**&#10;     * Toggle pause state&#10;     */&#10;    fun togglePause() {&#10;        isPaused = !isPaused&#10;    }&#10;&#10;    /**&#10;     * Update timer (call this every second when game is not paused)&#10;     */&#10;    fun updateTimer() {&#10;        if (!isPaused &amp;&amp; isGameActive) {&#10;            elapsedTimeSeconds++&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Format elapsed time as MM:SS&#10;     */&#10;    fun getFormattedTime(): String {&#10;        val minutes = elapsedTimeSeconds / 60&#10;        val seconds = elapsedTimeSeconds % 60&#10;        return String.format(Locale.ROOT, &quot;%02d:%02d&quot;, minutes, seconds)&#10;    }&#10;&#10;    /**&#10;     * Load game state from saved data&#10;     */&#10;    fun loadFromSavedState(savedState: SavedGameState) {&#10;        this.difficulty = savedState.difficulty&#10;        this.elapsedTimeSeconds = savedState.elapsedTimeSeconds&#10;        this.mistakesCount = savedState.mistakesCount&#10;        this.isGameActive = true&#10;        this.isGameCompleted = false&#10;        this.isPaused = false&#10;        this.selectedCell = null&#10;        this.selectedNumber = null&#10;        this.gameMode = GameMode.NORMAL&#10;        this.actionHistory.clear()&#10;        this.errorCells = emptySet()&#10;&#10;        // Convert saved grid to SudokuCell array&#10;        this.grid = Array(9) { row -&gt;&#10;            Array(9) { col -&gt;&#10;                val saved = savedState.grid[row][col]&#10;                SudokuCell(&#10;                    value = saved.value,&#10;                    notes = saved.notes.toSet(),&#10;                    isOriginal = saved.isOriginal,&#10;                    hasError = saved.hasError&#10;                )&#10;            }&#10;        }&#10;&#10;        // Convert solution grid&#10;        this.solutionGrid = Array(9) { row -&gt;&#10;            IntArray(9) { col -&gt;&#10;                savedState.solutionGrid[row][col]&#10;            }&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Autofill all valid notes for empty cells&#10;     */&#10;    fun autofillNotes() {&#10;        val newGrid = Array(9) { r -&gt; Array(9) { c -&gt; grid[r][c] } }&#10;        val affectedCells = mutableListOf&lt;Pair&lt;Int, Int&gt;&gt;()&#10;        val oldNotes = mutableListOf&lt;Set&lt;Int&gt;&gt;()&#10;&#10;        for (row in 0..8) {&#10;            for (col in 0..8) {&#10;                val cell = grid[row][col]&#10;                if (cell.isEmpty &amp;&amp; !cell.isOriginal) {&#10;                    val validNotes = getValidNotesForCell(row, col)&#10;                    if (validNotes != cell.notes) {&#10;                        affectedCells.add(Pair(row, col))&#10;                        oldNotes.add(cell.notes)&#10;                        newGrid[row][col] = cell.copy(notes = validNotes)&#10;                    }&#10;                }&#10;            }&#10;        }&#10;&#10;        // Only update grid and add to history if there were changes&#10;        if (affectedCells.isNotEmpty()) {&#10;            // Create action for undo&#10;            val action = GameAction.AutofillNotes(affectedCells, oldNotes)&#10;            actionHistory.push(action)&#10;            grid = newGrid&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Get all valid notes for a cell based on current grid state&#10;     */&#10;    private fun getValidNotesForCell(row: Int, col: Int): Set&lt;Int&gt; {&#10;        val validNotes = mutableSetOf&lt;Int&gt;()&#10;&#10;        for (number in 1..9) {&#10;            if (isValidPlacement(row, col, number)) {&#10;                validNotes.add(number)&#10;            }&#10;        }&#10;&#10;        return validNotes&#10;    }&#10;&#10;    /**&#10;     * Check if placing a number at the given position would be valid&#10;     */&#10;    private fun isValidPlacement(row: Int, col: Int, number: Int): Boolean {&#10;        // Check row&#10;        for (c in 0..8) {&#10;            if (grid[row][c].value == number) {&#10;                return false&#10;            }&#10;        }&#10;&#10;        // Check column&#10;        for (r in 0..8) {&#10;            if (grid[r][col].value == number) {&#10;                return false&#10;            }&#10;        }&#10;&#10;        // Check 3x3 box&#10;        val boxRow = (row / 3) * 3&#10;        val boxCol = (col / 3) * 3&#10;        for (r in boxRow until boxRow + 3) {&#10;            for (c in boxCol until boxCol + 3) {&#10;                if (grid[r][c].value == number) {&#10;                    return false&#10;                }&#10;            }&#10;        }&#10;&#10;        return true&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/kooshmeen/sudoku/data/SavedGameState.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/kooshmeen/sudoku/data/SavedGameState.kt" />
              <option name="updatedContent" value="/**&#10; * Data class representing the serializable game state&#10; * Used for saving/loading games from SharedPreferences&#10; */&#10;&#10;package com.kooshmeen.sudoku.data&#10;&#10;data class SavedGameState(&#10;    val grid: List&lt;List&lt;SavedCellState&gt;&gt;,&#10;    val difficulty: String,&#10;    val elapsedTimeSeconds: Int,&#10;    val mistakesCount: Int,&#10;    val solutionGrid: List&lt;List&lt;Int&gt;&gt;&#10;)&#10;&#10;data class SavedCellState(&#10;    val value: Int,&#10;    val notes: List&lt;Int&gt;,&#10;    val isOriginal: Boolean,&#10;    val hasError: Boolean&#10;)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/kooshmeen/sudoku/data/api/ApiModels.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/kooshmeen/sudoku/data/api/ApiModels.kt" />
              <option name="originalContent" value="package com.kooshmeen.sudoku.data.api&#10;&#10;data class RegisterRequest(&#10;    val username: String,&#10;    val email: String,&#10;    val password: String&#10;)&#10;&#10;data class LoginRequest(&#10;    val email: String,&#10;    val password: String&#10;)&#10;&#10;data class LoginResponse(&#10;    val message: String,&#10;    val token: String,&#10;    val user: User&#10;)&#10;&#10;data class User(&#10;    val id: Int,&#10;    val username: String,&#10;    val email: String&#10;)&#10;&#10;data class GameSubmission(&#10;    val timeSeconds: Int,&#10;    val difficulty: String,&#10;    val numberOfMistakes: Int&#10;)&#10;&#10;data class LeaderboardEntry(&#10;    val player_id: Int,&#10;    val score: Int,&#10;    val period_type: String&#10;)&#10;&#10;data class GroupData(&#10;    val group_name: String,&#10;    val group_description: String?,&#10;    val group_password: String?&#10;)&#10;&#10;data class ApiResponse(&#10;    val message: String&#10;)" />
              <option name="updatedContent" value="package com.kooshmeen.sudoku.data.api&#10;&#10;data class RegisterRequest(&#10;    val username: String,&#10;    val email: String,&#10;    val password: String&#10;)&#10;&#10;data class LoginRequest(&#10;    val email: String,&#10;    val password: String&#10;)&#10;&#10;data class LoginResponse(&#10;    val message: String,&#10;    val token: String,&#10;    val user: User&#10;)&#10;&#10;data class User(&#10;    val id: Int,&#10;    val username: String,&#10;    val email: String&#10;)&#10;&#10;data class GameSubmission(&#10;    val timeSeconds: Int,&#10;    val difficulty: String,&#10;    val numberOfMistakes: Int&#10;)&#10;&#10;data class LeaderboardEntry(&#10;    val player_id: Int,&#10;    val username: String,&#10;    val score: Int,&#10;    val rank: Int? = null&#10;)&#10;&#10;data class LeaderboardResponse(&#10;    val leaderboard: List&lt;LeaderboardEntry&gt;,&#10;    val total: Int? = null&#10;)&#10;&#10;data class GroupData(&#10;    val group_name: String,&#10;    val group_description: String?,&#10;    val group_password: String?&#10;)&#10;&#10;data class ApiResponse(&#10;    val message: String&#10;)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/kooshmeen/sudoku/repository/SudokuRepository.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/kooshmeen/sudoku/repository/SudokuRepository.kt" />
              <option name="originalContent" value="package com.kooshmeen.sudoku.repository&#10;&#10;import android.content.Context&#10;import com.kooshmeen.sudoku.api.ApiClient&#10;import com.kooshmeen.sudoku.data.api.*&#10;&#10;class SudokuRepository(private val context: Context) {&#10;    private val apiService = ApiClient.apiService&#10;    private val prefs = context.getSharedPreferences(&quot;sudoku_prefs&quot;, Context.MODE_PRIVATE)&#10;&#10;    private var authToken: String?&#10;        get() = prefs.getString(&quot;auth_token&quot;, null)&#10;        set(value) = prefs.edit().putString(&quot;auth_token&quot;, value).apply()&#10;&#10;    private var currentUser: User?&#10;        get() {&#10;            val id = prefs.getInt(&quot;user_id&quot;, -1)&#10;            val username = prefs.getString(&quot;user_username&quot;, null)&#10;            val email = prefs.getString(&quot;user_email&quot;, null)&#10;            return if (id != -1 &amp;&amp; username != null &amp;&amp; email != null) {&#10;                User(id, username, email)&#10;            } else null&#10;        }&#10;        set(value) {&#10;            if (value != null) {&#10;                prefs.edit().apply {&#10;                    putInt(&quot;user_id&quot;, value.id)&#10;                    putString(&quot;user_username&quot;, value.username)&#10;                    putString(&quot;user_email&quot;, value.email)&#10;                    apply()&#10;                }&#10;            } else {&#10;                prefs.edit().apply {&#10;                    remove(&quot;user_id&quot;)&#10;                    remove(&quot;user_username&quot;)&#10;                    remove(&quot;user_email&quot;)&#10;                    apply()&#10;                }&#10;            }&#10;        }&#10;&#10;    suspend fun login(email: String, password: String): Result&lt;LoginResponse&gt; {&#10;        return try {&#10;            val response = apiService.login(LoginRequest(email, password))&#10;            if (response.isSuccessful &amp;&amp; response.body() != null) {&#10;                val loginResponse = response.body()!!&#10;                authToken = loginResponse.token&#10;                currentUser = loginResponse.user&#10;                Result.success(loginResponse)&#10;            } else {&#10;                Result.failure(Exception(&quot;Login failed&quot;))&#10;            }&#10;        } catch (e: Exception) {&#10;            Result.failure(e)&#10;        }&#10;    }&#10;&#10;    suspend fun register(username: String, email: String, password: String): Result&lt;ApiResponse&gt; {&#10;        return try {&#10;            val response = apiService.register(RegisterRequest(username, email, password))&#10;            if (response.isSuccessful &amp;&amp; response.body() != null) {&#10;                Result.success(response.body()!!)&#10;            } else {&#10;                Result.failure(Exception(&quot;Registration failed&quot;))&#10;            }&#10;        } catch (e: Exception) {&#10;            Result.failure(e)&#10;        }&#10;    }&#10;&#10;    suspend fun submitGame(difficulty: String, timeSeconds: Int, mistakes: Int): Result&lt;ApiResponse&gt; {&#10;        return try {&#10;            val token = authToken ?: return Result.failure(Exception(&quot;Not authenticated&quot;))&#10;            val response = apiService.submitGame(&#10;                &quot;Bearer $token&quot;,&#10;                GameSubmission(timeSeconds, difficulty.lowercase(), mistakes)&#10;            )&#10;            if (response.isSuccessful &amp;&amp; response.body() != null) {&#10;                Result.success(response.body()!!)&#10;            } else {&#10;                Result.failure(Exception(&quot;Failed to submit game&quot;))&#10;            }&#10;        } catch (e: Exception) {&#10;            Result.failure(e)&#10;        }&#10;    }&#10;&#10;    fun isLoggedIn(): Boolean = authToken != null&#10;&#10;    fun fetchCurrentUser(): User? = currentUser&#10;&#10;    fun logout() {&#10;        authToken = null&#10;        currentUser = null&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.kooshmeen.sudoku.repository&#10;&#10;import android.content.Context&#10;import com.kooshmeen.sudoku.api.ApiClient&#10;import com.kooshmeen.sudoku.data.api.*&#10;import kotlinx.coroutines.Dispatchers&#10;import kotlinx.coroutines.withContext&#10;&#10;class SudokuRepository(private val context: Context) {&#10;    private val apiService = ApiClient.apiService&#10;    private val prefs = context.getSharedPreferences(&quot;sudoku_prefs&quot;, Context.MODE_PRIVATE)&#10;&#10;    private var authToken: String?&#10;        get() = prefs.getString(&quot;auth_token&quot;, null)&#10;        set(value) = prefs.edit().putString(&quot;auth_token&quot;, value).apply()&#10;&#10;    private var currentUser: User?&#10;        get() {&#10;            val id = prefs.getInt(&quot;user_id&quot;, -1)&#10;            val username = prefs.getString(&quot;user_username&quot;, null)&#10;            val email = prefs.getString(&quot;user_email&quot;, null)&#10;            return if (id != -1 &amp;&amp; username != null &amp;&amp; email != null) {&#10;                User(id, username, email)&#10;            } else null&#10;        }&#10;        set(value) {&#10;            if (value != null) {&#10;                prefs.edit().apply {&#10;                    putInt(&quot;user_id&quot;, value.id)&#10;                    putString(&quot;user_username&quot;, value.username)&#10;                    putString(&quot;user_email&quot;, value.email)&#10;                    apply()&#10;                }&#10;            } else {&#10;                prefs.edit().apply {&#10;                    remove(&quot;user_id&quot;)&#10;                    remove(&quot;user_username&quot;)&#10;                    remove(&quot;user_email&quot;)&#10;                    apply()&#10;                }&#10;            }&#10;        }&#10;&#10;    suspend fun login(email: String, password: String): Result&lt;LoginResponse&gt; {&#10;        return try {&#10;            val response = apiService.login(LoginRequest(email, password))&#10;            if (response.isSuccessful &amp;&amp; response.body() != null) {&#10;                val loginResponse = response.body()!!&#10;                authToken = loginResponse.token&#10;                currentUser = loginResponse.user&#10;                Result.success(loginResponse)&#10;            } else {&#10;                Result.failure(Exception(&quot;Login failed&quot;))&#10;            }&#10;        } catch (e: Exception) {&#10;            Result.failure(e)&#10;        }&#10;    }&#10;&#10;    suspend fun register(username: String, email: String, password: String): Result&lt;ApiResponse&gt; {&#10;        return try {&#10;            val response = apiService.register(RegisterRequest(username, email, password))&#10;            if (response.isSuccessful &amp;&amp; response.body() != null) {&#10;                Result.success(response.body()!!)&#10;            } else {&#10;                Result.failure(Exception(&quot;Registration failed&quot;))&#10;            }&#10;        } catch (e: Exception) {&#10;            Result.failure(e)&#10;        }&#10;    }&#10;&#10;    suspend fun submitGame(difficulty: String, timeSeconds: Int, mistakes: Int): Result&lt;ApiResponse&gt; {&#10;        return try {&#10;            val token = authToken ?: return Result.failure(Exception(&quot;Not authenticated&quot;))&#10;            val response = apiService.submitGame(&#10;                &quot;Bearer $token&quot;,&#10;                GameSubmission(timeSeconds, difficulty.lowercase(), mistakes)&#10;            )&#10;            if (response.isSuccessful &amp;&amp; response.body() != null) {&#10;                Result.success(response.body()!!)&#10;            } else {&#10;                Result.failure(Exception(&quot;Failed to submit game&quot;))&#10;            }&#10;        } catch (e: Exception) {&#10;            Result.failure(e)&#10;        }&#10;    }&#10;&#10;    // Leaderboard methods&#10;    suspend fun getLeaderboardTotal(): Result&lt;LeaderboardResponse&gt; {&#10;        return withContext(Dispatchers.IO) {&#10;            try {&#10;                val response = apiService.getTop100GlobalAllTime()&#10;&#10;                if (response.isSuccessful) {&#10;                    response.body()?.let { Result.success(it) }&#10;                        ?: Result.failure(Exception(&quot;Empty response&quot;))&#10;                } else {&#10;                    Result.failure(Exception(&quot;Failed to load leaderboard: ${response.message()}&quot;))&#10;                }&#10;            } catch (e: Exception) {&#10;                Result.failure(e)&#10;            }&#10;        }&#10;    }&#10;&#10;    suspend fun getLeaderboardMonth(): Result&lt;LeaderboardResponse&gt; {&#10;        return withContext(Dispatchers.IO) {&#10;            try {&#10;                val response = apiService.getTop100GlobalMonth()&#10;&#10;                if (response.isSuccessful) {&#10;                    response.body()?.let { Result.success(it) }&#10;                        ?: Result.failure(Exception(&quot;Empty response&quot;))&#10;                } else {&#10;                    Result.failure(Exception(&quot;Failed to load monthly leaderboard: ${response.message()}&quot;))&#10;                }&#10;            } catch (e: Exception) {&#10;                Result.failure(e)&#10;            }&#10;        }&#10;    }&#10;&#10;    suspend fun getLeaderboardWeek(): Result&lt;LeaderboardResponse&gt; {&#10;        return withContext(Dispatchers.IO) {&#10;            try {&#10;                val response = apiService.getTop100GlobalWeek()&#10;&#10;                if (response.isSuccessful) {&#10;                    response.body()?.let { Result.success(it) }&#10;                        ?: Result.failure(Exception(&quot;Empty response&quot;))&#10;                } else {&#10;                    Result.failure(Exception(&quot;Failed to load weekly leaderboard: ${response.message()}&quot;))&#10;                }&#10;            } catch (e: Exception) {&#10;                Result.failure(e)&#10;            }&#10;        }&#10;    }&#10;&#10;    suspend fun getLeaderboardDay(): Result&lt;LeaderboardResponse&gt; {&#10;        return withContext(Dispatchers.IO) {&#10;            try {&#10;                val response = apiService.getTop100GlobalDay()&#10;&#10;                if (response.isSuccessful) {&#10;                    response.body()?.let { Result.success(it) }&#10;                        ?: Result.failure(Exception(&quot;Empty response&quot;))&#10;                } else {&#10;                    Result.failure(Exception(&quot;Failed to load daily leaderboard: ${response.message()}&quot;))&#10;                }&#10;            } catch (e: Exception) {&#10;                Result.failure(e)&#10;            }&#10;        }&#10;    }&#10;&#10;    fun isLoggedIn(): Boolean = authToken != null&#10;&#10;    fun fetchCurrentUser(): User? = currentUser&#10;&#10;    fun logout() {&#10;        authToken = null&#10;        currentUser = null&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/kooshmeen/sudoku/ui/components/UtilityRow.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/kooshmeen/sudoku/ui/components/UtilityRow.kt" />
              <option name="originalContent" value="/**&#10; * UtilityRow.kt&#10; * This file defines a composable function for displaying a row of utility buttons in the Sudoku app.&#10; * These buttons are, from left to right:&#10; * Erase: selecting it will enable erasing mode, clearing non-starting cells when clicked.&#10; * Notes: selecting it will toggle notes mode, allowing users to add notes to cells.&#10; * Undo: selecting it will undo the last action.&#10; */&#10;&#10;package com.kooshmeen.sudoku.ui.components&#10;&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.IconButton&#10;import androidx.compose.material3.IconToggleButton&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.res.painterResource&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import com.kooshmeen.sudoku.R&#10;&#10;@Composable&#10;fun UtilityRow(&#10;    modifier: Modifier = Modifier,&#10;    selectedButton: String? = null,&#10;    onEraseClick: () -&gt; Unit = {},&#10;    onNotesClick: () -&gt; Unit = {},&#10;    onUndoClick: () -&gt; Unit = {}&#10;) {&#10;    Row(&#10;        modifier = modifier,&#10;        horizontalArrangement = androidx.compose.foundation.layout.Arrangement.SpaceEvenly,&#10;        verticalAlignment = androidx.compose.ui.Alignment.CenterVertically&#10;    ) {&#10;        // Erase Button&#10;        IconToggleButton(&#10;            checked = selectedButton == &quot;erase&quot;,&#10;            onCheckedChange = { onEraseClick() }, // Always call onEraseClick, let GameState handle toggle&#10;            modifier = Modifier.weight(1f)&#10;        ) {&#10;            Icon (&#10;                painter = painterResource(id = R.drawable.ink_eraser_24dp_e3e3e3_fill0_wght400_grad0_opsz24),&#10;                contentDescription = &quot;Erase&quot;,&#10;                tint = if (selectedButton == &quot;erase&quot;) MaterialTheme.colorScheme.primary&#10;                else MaterialTheme.colorScheme.onSurface&#10;            )&#10;        }&#10;        // Notes Button&#10;        IconToggleButton(&#10;            checked = selectedButton == &quot;notes&quot;,&#10;            onCheckedChange = { onNotesClick() }, // Always call onNotesClick, let GameState handle toggle&#10;            modifier = Modifier.weight(1f)&#10;        ) {&#10;            Icon (&#10;                painter = painterResource(id = R.drawable.add_notes_24dp_e3e3e3_fill0_wght400_grad0_opsz24),&#10;                contentDescription = &quot;Notes&quot;,&#10;                tint = if (selectedButton == &quot;notes&quot;) MaterialTheme.colorScheme.primary&#10;                else MaterialTheme.colorScheme.onSurface&#10;            )&#10;        }&#10;        // Undo Button&#10;        IconButton(&#10;            onClick = onUndoClick,&#10;            modifier = Modifier.weight(1f)&#10;        ) {&#10;            Icon (&#10;                painter = painterResource(id = R.drawable.undo_24dp_e3e3e3_fill0_wght400_grad0_opsz24),&#10;                contentDescription = &quot;Undo&quot;,&#10;                tint = MaterialTheme.colorScheme.onSurface&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Preview (showBackground = true)&#10;@Composable&#10;fun UtilityRowPreview() {&#10;    UtilityRow(&#10;        selectedButton = null,&#10;        modifier = Modifier.fillMaxSize()&#10;    )&#10;}" />
              <option name="updatedContent" value="/**&#10; * UtilityRow.kt&#10; * This file defines a composable function for displaying a row of utility buttons in the Sudoku app.&#10; * These buttons are, from left to right:&#10; * Erase: selecting it will enable erasing mode, clearing non-starting cells when clicked.&#10; * Notes: selecting it will toggle notes mode, allowing users to add notes to cells.&#10; * Undo: selecting it will undo the last action.&#10; */&#10;&#10;package com.kooshmeen.sudoku.ui.components&#10;&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.IconButton&#10;import androidx.compose.material3.IconToggleButton&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.res.painterResource&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import com.kooshmeen.sudoku.R&#10;&#10;@Composable&#10;fun UtilityRow(&#10;    modifier: Modifier = Modifier,&#10;    selectedButton: String? = null,&#10;    onEraseClick: () -&gt; Unit = {},&#10;    onNotesClick: () -&gt; Unit = {},&#10;    onUndoClick: () -&gt; Unit = {},&#10;    onAutofillNotesClick: () -&gt; Unit = {}&#10;) {&#10;    Row(&#10;        modifier = modifier,&#10;        horizontalArrangement = androidx.compose.foundation.layout.Arrangement.SpaceEvenly,&#10;        verticalAlignment = androidx.compose.ui.Alignment.CenterVertically&#10;    ) {&#10;        // Autofill Notes Button&#10;        IconButton(&#10;            onClick = onAutofillNotesClick,&#10;            modifier = Modifier.weight(1f)&#10;        ) {&#10;            Icon (&#10;                painter = painterResource(id = R.drawable.add_notes_24dp_e3e3e3_fill0_wght400_grad0_opsz24),&#10;                contentDescription = &quot;Autofill Notes&quot;,&#10;                tint = MaterialTheme.colorScheme.onSurface&#10;            )&#10;        }&#10;        // Erase Button&#10;        IconToggleButton(&#10;            checked = selectedButton == &quot;erase&quot;,&#10;            onCheckedChange = { onEraseClick() }, // Always call onEraseClick, let GameState handle toggle&#10;            modifier = Modifier.weight(1f)&#10;        ) {&#10;            Icon (&#10;                painter = painterResource(id = R.drawable.ink_eraser_24dp_e3e3e3_fill0_wght400_grad0_opsz24),&#10;                contentDescription = &quot;Erase&quot;,&#10;                tint = if (selectedButton == &quot;erase&quot;) MaterialTheme.colorScheme.primary&#10;                else MaterialTheme.colorScheme.onSurface&#10;            )&#10;        }&#10;        // Notes Button&#10;        IconToggleButton(&#10;            checked = selectedButton == &quot;notes&quot;,&#10;            onCheckedChange = { onNotesClick() }, // Always call onNotesClick, let GameState handle toggle&#10;            modifier = Modifier.weight(1f)&#10;        ) {&#10;            Icon (&#10;                painter = painterResource(id = R.drawable.add_notes_24dp_e3e3e3_fill0_wght400_grad0_opsz24),&#10;                contentDescription = &quot;Notes&quot;,&#10;                tint = if (selectedButton == &quot;notes&quot;) MaterialTheme.colorScheme.primary&#10;                else MaterialTheme.colorScheme.onSurface&#10;            )&#10;        }&#10;        // Undo Button&#10;        IconButton(&#10;            onClick = onUndoClick,&#10;            modifier = Modifier.weight(1f)&#10;        ) {&#10;            Icon (&#10;                painter = painterResource(id = R.drawable.undo_24dp_e3e3e3_fill0_wght400_grad0_opsz24),&#10;                contentDescription = &quot;Undo&quot;,&#10;                tint = MaterialTheme.colorScheme.onSurface&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Preview (showBackground = true)&#10;@Composable&#10;fun UtilityRowPreview() {&#10;    UtilityRow(&#10;        selectedButton = null,&#10;        modifier = Modifier.fillMaxSize()&#10;    )&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/kooshmeen/sudoku/ui/screens/AuthScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/kooshmeen/sudoku/ui/screens/AuthScreen.kt" />
              <option name="originalContent" value="&#10;" />
              <option name="updatedContent" value="/**&#10; * Authentication screen for login and registration&#10; */&#10;&#10;package com.kooshmeen.sudoku.ui.screens&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.text.KeyboardOptions&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.automirrored.filled.ArrowBack&#10;import androidx.compose.material.icons.filled.Visibility&#10;import androidx.compose.material.icons.filled.VisibilityOff&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.input.KeyboardType&#10;import androidx.compose.ui.text.input.PasswordVisualTransformation&#10;import androidx.compose.ui.text.input.VisualTransformation&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import com.kooshmeen.sudoku.repository.SudokuRepository&#10;import com.kooshmeen.sudoku.ui.theme.SudokuTheme&#10;import kotlinx.coroutines.launch&#10;&#10;@Composable&#10;fun AuthScreen(&#10;    onNavigateBack: () -&gt; Unit = {},&#10;    onLoginSuccess: () -&gt; Unit = {},&#10;    modifier: Modifier = Modifier&#10;) {&#10;    var isLoginMode by remember { mutableStateOf(true) }&#10;    var email by remember { mutableStateOf(&quot;&quot;) }&#10;    var password by remember { mutableStateOf(&quot;&quot;) }&#10;    var username by remember { mutableStateOf(&quot;&quot;) }&#10;    var confirmPassword by remember { mutableStateOf(&quot;&quot;) }&#10;    var passwordVisible by remember { mutableStateOf(false) }&#10;    var confirmPasswordVisible by remember { mutableStateOf(false) }&#10;    var isLoading by remember { mutableStateOf(false) }&#10;    var errorMessage by remember { mutableStateOf&lt;String?&gt;(null) }&#10;    var successMessage by remember { mutableStateOf&lt;String?&gt;(null) }&#10;&#10;    val context = LocalContext.current&#10;    val repository = remember { SudokuRepository(context) }&#10;    val scope = rememberCoroutineScope()&#10;&#10;    Column(&#10;        modifier = modifier&#10;            .fillMaxSize()&#10;            .background(MaterialTheme.colorScheme.background)&#10;            .padding(16.dp),&#10;        verticalArrangement = Arrangement.spacedBy(16.dp)&#10;    ) {&#10;        // Header with back button&#10;        Row(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            IconButton(onClick = onNavigateBack) {&#10;                Icon(&#10;                    imageVector = Icons.AutoMirrored.Filled.ArrowBack,&#10;                    contentDescription = &quot;Back&quot;,&#10;                    tint = MaterialTheme.colorScheme.onBackground&#10;                )&#10;            }&#10;            Spacer(modifier = Modifier.weight(1f))&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(32.dp))&#10;&#10;        // Title&#10;        Text(&#10;            text = if (isLoginMode) &quot;Login&quot; else &quot;Register&quot;,&#10;            fontSize = 32.sp,&#10;            fontWeight = FontWeight.Bold,&#10;            color = MaterialTheme.colorScheme.onBackground,&#10;            modifier = Modifier.align(Alignment.CenterHorizontally)&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(32.dp))&#10;&#10;        // Username field (only for registration)&#10;        if (!isLoginMode) {&#10;            OutlinedTextField(&#10;                value = username,&#10;                onValueChange = { username = it },&#10;                label = { Text(&quot;Username&quot;) },&#10;                modifier = Modifier.fillMaxWidth(),&#10;                singleLine = true,&#10;                enabled = !isLoading&#10;            )&#10;        }&#10;&#10;        // Email field&#10;        OutlinedTextField(&#10;            value = email,&#10;            onValueChange = { email = it },&#10;            label = { Text(&quot;Email&quot;) },&#10;            modifier = Modifier.fillMaxWidth(),&#10;            singleLine = true,&#10;            keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Email),&#10;            enabled = !isLoading&#10;        )&#10;&#10;        // Password field&#10;        OutlinedTextField(&#10;            value = password,&#10;            onValueChange = { password = it },&#10;            label = { Text(&quot;Password&quot;) },&#10;            modifier = Modifier.fillMaxWidth(),&#10;            singleLine = true,&#10;            visualTransformation = if (passwordVisible) VisualTransformation.None else PasswordVisualTransformation(),&#10;            keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Password),&#10;            trailingIcon = {&#10;                IconButton(onClick = { passwordVisible = !passwordVisible }) {&#10;                    Icon(&#10;                        imageVector = if (passwordVisible) Icons.Default.Visibility else Icons.Default.VisibilityOff,&#10;                        contentDescription = if (passwordVisible) &quot;Hide password&quot; else &quot;Show password&quot;&#10;                    )&#10;                }&#10;            },&#10;            enabled = !isLoading&#10;        )&#10;&#10;        // Confirm password field (only for registration)&#10;        if (!isLoginMode) {&#10;            OutlinedTextField(&#10;                value = confirmPassword,&#10;                onValueChange = { confirmPassword = it },&#10;                label = { Text(&quot;Confirm Password&quot;) },&#10;                modifier = Modifier.fillMaxWidth(),&#10;                singleLine = true,&#10;                visualTransformation = if (confirmPasswordVisible) VisualTransformation.None else PasswordVisualTransformation(),&#10;                keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Password),&#10;                trailingIcon = {&#10;                    IconButton(onClick = { confirmPasswordVisible = !confirmPasswordVisible }) {&#10;                        Icon(&#10;                            imageVector = if (confirmPasswordVisible) Icons.Default.Visibility else Icons.Default.VisibilityOff,&#10;                            contentDescription = if (confirmPasswordVisible) &quot;Hide password&quot; else &quot;Show password&quot;&#10;                        )&#10;                    }&#10;                },&#10;                enabled = !isLoading&#10;            )&#10;        }&#10;&#10;        // Error message&#10;        errorMessage?.let { message -&gt;&#10;            Card(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                colors = CardDefaults.cardColors(&#10;                    containerColor = MaterialTheme.colorScheme.errorContainer&#10;                )&#10;            ) {&#10;                Text(&#10;                    text = message,&#10;                    color = MaterialTheme.colorScheme.onErrorContainer,&#10;                    modifier = Modifier.padding(16.dp)&#10;                )&#10;            }&#10;        }&#10;&#10;        // Success message&#10;        successMessage?.let { message -&gt;&#10;            Card(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                colors = CardDefaults.cardColors(&#10;                    containerColor = MaterialTheme.colorScheme.primaryContainer&#10;                )&#10;            ) {&#10;                Text(&#10;                    text = message,&#10;                    color = MaterialTheme.colorScheme.onPrimaryContainer,&#10;                    modifier = Modifier.padding(16.dp)&#10;                )&#10;            }&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(16.dp))&#10;&#10;        // Submit button&#10;        Button(&#10;            onClick = {&#10;                errorMessage = null&#10;                successMessage = null&#10;&#10;                // Validation&#10;                if (email.isBlank() || password.isBlank()) {&#10;                    errorMessage = &quot;Please fill in all fields&quot;&#10;                    return@Button&#10;                }&#10;&#10;                if (!isLoginMode) {&#10;                    if (username.isBlank()) {&#10;                        errorMessage = &quot;Please enter a username&quot;&#10;                        return@Button&#10;                    }&#10;                    if (password != confirmPassword) {&#10;                        errorMessage = &quot;Passwords do not match&quot;&#10;                        return@Button&#10;                    }&#10;                    if (password.length &lt; 6) {&#10;                        errorMessage = &quot;Password must be at least 6 characters&quot;&#10;                        return@Button&#10;                    }&#10;                }&#10;&#10;                isLoading = true&#10;                scope.launch {&#10;                    try {&#10;                        if (isLoginMode) {&#10;                            val result = repository.login(email, password)&#10;                            if (result.isSuccess) {&#10;                                onLoginSuccess()&#10;                            } else {&#10;                                errorMessage = result.exceptionOrNull()?.message ?: &quot;Login failed&quot;&#10;                            }&#10;                        } else {&#10;                            val result = repository.register(username, email, password)&#10;                            if (result.isSuccess) {&#10;                                successMessage = &quot;Registration successful! Please login.&quot;&#10;                                isLoginMode = true&#10;                                // Clear fields&#10;                                username = &quot;&quot;&#10;                                password = &quot;&quot;&#10;                                confirmPassword = &quot;&quot;&#10;                            } else {&#10;                                errorMessage = result.exceptionOrNull()?.message ?: &quot;Registration failed&quot;&#10;                            }&#10;                        }&#10;                    } catch (e: Exception) {&#10;                        errorMessage = e.message ?: &quot;An error occurred&quot;&#10;                    } finally {&#10;                        isLoading = false&#10;                    }&#10;                }&#10;            },&#10;            modifier = Modifier.fillMaxWidth(),&#10;            enabled = !isLoading&#10;        ) {&#10;            if (isLoading) {&#10;                CircularProgressIndicator(&#10;                    modifier = Modifier.size(20.dp),&#10;                    color = MaterialTheme.colorScheme.onPrimary&#10;                )&#10;            } else {&#10;                Text(if (isLoginMode) &quot;Login&quot; else &quot;Register&quot;)&#10;            }&#10;        }&#10;&#10;        // Toggle mode button&#10;        TextButton(&#10;            onClick = {&#10;                isLoginMode = !isLoginMode&#10;                errorMessage = null&#10;                successMessage = null&#10;            },&#10;            modifier = Modifier.align(Alignment.CenterHorizontally),&#10;            enabled = !isLoading&#10;        ) {&#10;            Text(&#10;                if (isLoginMode) &quot;Don't have an account? Register&quot; else &quot;Already have an account? Login&quot;&#10;            )&#10;        }&#10;&#10;        Spacer(modifier = Modifier.weight(1f))&#10;    }&#10;}&#10;&#10;@Preview(showBackground = true)&#10;@Composable&#10;fun AuthScreenPreview() {&#10;    SudokuTheme {&#10;        AuthScreen()&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/kooshmeen/sudoku/ui/screens/GameScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/kooshmeen/sudoku/ui/screens/GameScreen.kt" />
              <option name="originalContent" value="/**&#10; * Game Screen for the Sudoku Game&#10; * This screen displays the Sudoku grid and allows users to play the game.&#10; * Includes a timer from the start of the game, a difficulty indicator,&#10; * a back button to return to the main menu, and a pause button - which pauses the timer&#10; * and covers the grid.&#10; *&#10; * The grid is displayed using a SudokuGrid composable, and the input numbers are handled by an InputRow composable.&#10; * Below is a UtilityRow composable.&#10;*/&#10;&#10;package com.kooshmeen.sudoku.ui.screens&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.automirrored.filled.ArrowBack&#10;import androidx.compose.material.icons.filled.Lock&#10;import androidx.compose.material3.AlertDialog&#10;import androidx.compose.material3.Button&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.IconButton&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Text&#10;import androidx.compose.material3.TextButton&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.LaunchedEffect&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.setValue&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.compose.ui.unit.dp&#10;import com.kooshmeen.sudoku.data.GameState&#10;import com.kooshmeen.sudoku.data.GameStateManager&#10;import com.kooshmeen.sudoku.ui.components.InputRow&#10;import com.kooshmeen.sudoku.ui.components.SudokuGrid&#10;import com.kooshmeen.sudoku.ui.components.UtilityRow&#10;import com.kooshmeen.sudoku.ui.theme.SudokuTheme&#10;import com.kooshmeen.sudoku.utils.BestTimeManager&#10;import kotlinx.coroutines.delay&#10;&#10;@Composable&#10;fun GameScreen(&#10;    modifier: Modifier = Modifier,&#10;    onThemeToggle: (Boolean) -&gt; Unit = { /* Default no-op */ },&#10;    isDarkTheme: Boolean = true, // Default value for dark theme&#10;    onNavigateToMenu: () -&gt; Unit = { /* Default no-op */ }&#10;) {&#10;    val gameState = GameStateManager.gameState&#10;    var showCompletionDialog by remember { mutableStateOf(false) }&#10;&#10;    // Timer effect - only run when game is active and not paused&#10;    LaunchedEffect(gameState.isGameActive, gameState.isPaused) {&#10;        while (gameState.isGameActive &amp;&amp; !gameState.isPaused) {&#10;            delay(1000)&#10;            gameState.updateTimer()&#10;        }&#10;    }&#10;&#10;    // Check for game completion&#10;    LaunchedEffect(gameState.isGameCompleted) {&#10;        if (gameState.isGameCompleted) {&#10;            showCompletionDialog = true&#10;        }&#10;    }&#10;&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .padding(12.dp)&#10;            .background(MaterialTheme.colorScheme.background) // Use MaterialTheme for background color&#10;    ) {&#10;        Row(&#10;            modifier = Modifier.fillMaxWidth()&#10;        ) {&#10;            // Timer&#10;            Text(&#10;                text = &quot;Elapsed: ${gameState.getFormattedTime()}&quot;,&#10;                style = MaterialTheme.typography.bodyLarge,&#10;                modifier = Modifier.padding(start = 8.dp)&#10;            )&#10;            Spacer(Modifier.weight(1f)) // Push the difficulty indicator to the end&#10;            // Difficulty indicator&#10;            Text(&#10;                text = gameState.difficulty,&#10;                style = MaterialTheme.typography.bodyLarge,&#10;                modifier = Modifier.padding(start = 32.dp)&#10;            )&#10;        }&#10;        Row(&#10;            modifier = Modifier.fillMaxWidth()&#10;        ) {&#10;            // back to menu button&#10;            IconButton(&#10;                onClick = onNavigateToMenu,&#10;                modifier = Modifier.padding(8.dp)&#10;            ) {&#10;                Icon(&#10;                    imageVector = Icons.AutoMirrored.Filled.ArrowBack,&#10;                    contentDescription = &quot;Back to Main Menu&quot;,&#10;                    tint = MaterialTheme.colorScheme.onBackground // Use MaterialTheme for icon color&#10;                )&#10;            }&#10;            Spacer(Modifier.weight(1f)) // Push the pause button to the end&#10;            // Pause button - will pause timer, but cover the grid&#10;            IconButton(&#10;                onClick = { gameState.togglePause() },&#10;                modifier = Modifier.padding(8.dp),&#10;                // align the icon to the end of the row&#10;            ) {&#10;                Icon(&#10;                    imageVector = Icons.Default.Lock,&#10;                    contentDescription = &quot;Pause Game&quot;,&#10;                )&#10;            }&#10;        }&#10;        Spacer(Modifier.height(8.dp))&#10;&#10;        // Display number of mistakes and highest possible score&#10;        Row (&#10;            modifier = Modifier.fillMaxWidth(),&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            Text(&#10;                text = &quot;Mistakes: ${gameState.mistakesCount}&quot;,&#10;                style = MaterialTheme.typography.bodyLarge,&#10;                modifier = Modifier.padding(start = 8.dp)&#10;            )&#10;            Spacer(Modifier.weight(1f)) // Push the highest possible score to the end&#10;            Text(&#10;                text = &quot;Max Score: ${gameState.highestPossibleScore()}&quot;,&#10;                style = MaterialTheme.typography.bodyLarge,&#10;                modifier = Modifier.padding(end = 8.dp)&#10;            )&#10;        }&#10;&#10;        Spacer(Modifier.height(14.dp))&#10;        // Grid - show overlay when paused&#10;        Box(&#10;            modifier = Modifier.fillMaxWidth()&#10;        ) {&#10;            SudokuGrid(&#10;                grid = gameState.grid,&#10;                selectedCell = null,&#10;                selectedNumber = gameState.selectedNumber, // Pass selectedNumber&#10;                onCellClick = { row, col -&gt;&#10;                    gameState.inputToCell(row, col)&#10;                },&#10;                modifier = Modifier.fillMaxWidth()&#10;            )&#10;&#10;            // Pause overlay&#10;            if (gameState.isPaused) {&#10;                Box(&#10;                    modifier = Modifier&#10;                        .fillMaxSize()&#10;                        .background(MaterialTheme.colorScheme.surface.copy(alpha = 1f)),&#10;                    contentAlignment = Alignment.Center&#10;                ) {&#10;                    Text(&#10;                        text = &quot;Game Paused&quot;,&#10;                        style = MaterialTheme.typography.headlineLarge,&#10;                        color = MaterialTheme.colorScheme.onSurface&#10;                    )&#10;                }&#10;            }&#10;        }&#10;&#10;        Spacer(Modifier.height(96.dp))&#10;&#10;        // Compute which numbers are disabled (already filled in all spots)&#10;        val numberCounts = IntArray(9) { 0 }&#10;        for (row in gameState.grid) {&#10;            for (cell in row) {&#10;                if (cell.value in 1..9) {&#10;                    numberCounts[cell.value - 1]++&#10;                }&#10;            }&#10;        }&#10;        val disabledNumbers = numberCounts.mapIndexed { idx, count -&gt; if (count &gt;= 9) idx + 1 else null }.filterNotNull()&#10;&#10;        // Input numbers row&#10;        InputRow(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            input = List(9) { it + 1 },&#10;            onInputChange = { index, value -&gt;&#10;                val number = value.toInt()&#10;                if (!disabledNumbers.contains(number)) {&#10;                    gameState.selectNumber(number)&#10;                }&#10;            },&#10;            selectedNumber = gameState.selectedNumber,&#10;            disabledNumbers = disabledNumbers // Pass disabled numbers&#10;        )&#10;        Spacer(Modifier.height(24.dp))&#10;        // Utility Row&#10;        UtilityRow(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            selectedButton = when (gameState.gameMode) {&#10;                GameState.GameMode.NOTES -&gt; &quot;notes&quot;&#10;                GameState.GameMode.ERASE -&gt; &quot;erase&quot;&#10;                else -&gt; null&#10;            },&#10;            onEraseClick = { gameState.toggleEraseMode() },&#10;            onNotesClick = { gameState.toggleNotesMode() },&#10;            onUndoClick = { gameState.undo() }&#10;        )&#10;&#10;        // Completion Dialog&#10;        if (showCompletionDialog) {&#10;            // Check for new best time&#10;            val (isNewBest, isNewBestNoMistakes) = BestTimeManager.setBestTime(&#10;                context = LocalContext.current,&#10;                difficulty = gameState.difficulty,&#10;                time = gameState.getFormattedTime(),&#10;                numMistakes = gameState.mistakesCount,&#10;            )&#10;&#10;            val context = LocalContext.current&#10;&#10;            LaunchedEffect(Unit) {&#10;                // Initialize repository if not done&#10;                gameState.initializeRepository(context)&#10;&#10;                // Record game completion in local statistics&#10;                gameState.recordGameCompletion(context)&#10;&#10;                // Try to submit score&#10;                val submitted = gameState.submitScoreToServer()&#10;                if (!submitted) { // off line mode or not connected to server&#10;                    // Show a toast or some indication that score submission failed&#10;                    // Toast.makeText(context, &quot;Score submission failed. Please try again later.&quot;, Toast.LENGTH_SHORT).show()&#10;                    // For now, we will just log it&#10;                    println(&quot;Score submission failed. Please try again later.&quot;)&#10;                }&#10;            }&#10;&#10;            GameStateManager.endGame()&#10;            AlertDialog(&#10;                onDismissRequest = {&#10;                    showCompletionDialog = false&#10;                    GameStateManager.endGame()&#10;                },&#10;                title = { Text(&quot;Congratulations! Final score: ${gameState.highestPossibleScore()}&quot;) },&#10;                text = {&#10;                    if (isNewBest) {&#10;                        Text(&quot;You completed the game in a new best time for ${gameState.difficulty}: ${gameState.getFormattedTime()}!&quot;)&#10;                    } else {&#10;                        Text(&quot;You completed the game in ${gameState.getFormattedTime()}! Your best time for ${gameState.difficulty} is ${BestTimeManager.getBestTimeFormatted(LocalContext.current, gameState.difficulty)}.&quot;)&#10;                    }&#10;                },&#10;                confirmButton = {&#10;                    Button(&#10;                        onClick = {&#10;                            showCompletionDialog = false&#10;                            GameStateManager.endGame()&#10;                            onNavigateToMenu()&#10;                        }&#10;                    ) {&#10;                        Text(&quot;Back to Menu&quot;)&#10;                    }&#10;                },&#10;                dismissButton = {&#10;                    TextButton(&#10;                        onClick = {&#10;                            showCompletionDialog = false&#10;                            GameStateManager.endGame()&#10;                        }&#10;                    ) {&#10;                        Text(&quot;Stay Here&quot;)&#10;                    }&#10;                }&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Preview(showBackground = true)&#10;@Composable&#10;fun GameScreenPreview() {&#10;    var isDarkTheme by remember { mutableStateOf(false) }&#10;&#10;    SudokuTheme(darkTheme = isDarkTheme) {&#10;        GameScreen(&#10;            isDarkTheme = isDarkTheme,&#10;            onThemeToggle = { isDarkTheme = it },&#10;&#10;        )&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="/**&#10; * Game Screen for the Sudoku Game&#10; * This screen displays the Sudoku grid and allows users to play the game.&#10; * Includes a timer from the start of the game, a difficulty indicator,&#10; * a back button to return to the main menu, and a pause button - which pauses the timer&#10; * and covers the grid.&#10; *&#10; * The grid is displayed using a SudokuGrid composable, and the input numbers are handled by an InputRow composable.&#10; * Below is a UtilityRow composable.&#10;*/&#10;&#10;package com.kooshmeen.sudoku.ui.screens&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.automirrored.filled.ArrowBack&#10;import androidx.compose.material.icons.filled.Lock&#10;import androidx.compose.material3.AlertDialog&#10;import androidx.compose.material3.Button&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.IconButton&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Text&#10;import androidx.compose.material3.TextButton&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.LaunchedEffect&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.setValue&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.compose.ui.unit.dp&#10;import com.kooshmeen.sudoku.data.GameState&#10;import com.kooshmeen.sudoku.data.GameStateManager&#10;import com.kooshmeen.sudoku.ui.components.InputRow&#10;import com.kooshmeen.sudoku.ui.components.SudokuGrid&#10;import com.kooshmeen.sudoku.ui.components.UtilityRow&#10;import com.kooshmeen.sudoku.ui.theme.SudokuTheme&#10;import com.kooshmeen.sudoku.utils.BestTimeManager&#10;import kotlinx.coroutines.delay&#10;&#10;@Composable&#10;fun GameScreen(&#10;    modifier: Modifier = Modifier,&#10;    onThemeToggle: (Boolean) -&gt; Unit = { /* Default no-op */ },&#10;    isDarkTheme: Boolean = true, // Default value for dark theme&#10;    onNavigateToMenu: () -&gt; Unit = { /* Default no-op */ }&#10;) {&#10;    val gameState = GameStateManager.gameState&#10;    var showCompletionDialog by remember { mutableStateOf(false) }&#10;&#10;    // Timer effect - only run when game is active and not paused&#10;    LaunchedEffect(gameState.isGameActive, gameState.isPaused) {&#10;        while (gameState.isGameActive &amp;&amp; !gameState.isPaused) {&#10;            delay(1000)&#10;            gameState.updateTimer()&#10;        }&#10;    }&#10;&#10;    // Check for game completion&#10;    LaunchedEffect(gameState.isGameCompleted) {&#10;        if (gameState.isGameCompleted) {&#10;            showCompletionDialog = true&#10;        }&#10;    }&#10;&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .padding(12.dp)&#10;            .background(MaterialTheme.colorScheme.background) // Use MaterialTheme for background color&#10;    ) {&#10;        Row(&#10;            modifier = Modifier.fillMaxWidth()&#10;        ) {&#10;            // Timer&#10;            Text(&#10;                text = &quot;Elapsed: ${gameState.getFormattedTime()}&quot;,&#10;                style = MaterialTheme.typography.bodyLarge,&#10;                modifier = Modifier.padding(start = 8.dp)&#10;            )&#10;            Spacer(Modifier.weight(1f)) // Push the difficulty indicator to the end&#10;            // Difficulty indicator&#10;            Text(&#10;                text = gameState.difficulty,&#10;                style = MaterialTheme.typography.bodyLarge,&#10;                modifier = Modifier.padding(start = 32.dp)&#10;            )&#10;        }&#10;        Row(&#10;            modifier = Modifier.fillMaxWidth()&#10;        ) {&#10;            // back to menu button&#10;            IconButton(&#10;                onClick = onNavigateToMenu,&#10;                modifier = Modifier.padding(8.dp)&#10;            ) {&#10;                Icon(&#10;                    imageVector = Icons.AutoMirrored.Filled.ArrowBack,&#10;                    contentDescription = &quot;Back to Main Menu&quot;,&#10;                    tint = MaterialTheme.colorScheme.onBackground // Use MaterialTheme for icon color&#10;                )&#10;            }&#10;            Spacer(Modifier.weight(1f)) // Push the pause button to the end&#10;            // Pause button - will pause timer, but cover the grid&#10;            IconButton(&#10;                onClick = { gameState.togglePause() },&#10;                modifier = Modifier.padding(8.dp),&#10;                // align the icon to the end of the row&#10;            ) {&#10;                Icon(&#10;                    imageVector = Icons.Default.Lock,&#10;                    contentDescription = &quot;Pause Game&quot;,&#10;                )&#10;            }&#10;        }&#10;        Spacer(Modifier.height(8.dp))&#10;&#10;        // Display number of mistakes and highest possible score&#10;        Row (&#10;            modifier = Modifier.fillMaxWidth(),&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            Text(&#10;                text = &quot;Mistakes: ${gameState.mistakesCount}&quot;,&#10;                style = MaterialTheme.typography.bodyLarge,&#10;                modifier = Modifier.padding(start = 8.dp)&#10;            )&#10;            Spacer(Modifier.weight(1f)) // Push the highest possible score to the end&#10;            Text(&#10;                text = &quot;Max Score: ${gameState.highestPossibleScore()}&quot;,&#10;                style = MaterialTheme.typography.bodyLarge,&#10;                modifier = Modifier.padding(end = 8.dp)&#10;            )&#10;        }&#10;&#10;        Spacer(Modifier.height(14.dp))&#10;        // Grid - show overlay when paused&#10;        Box(&#10;            modifier = Modifier.fillMaxWidth()&#10;        ) {&#10;            SudokuGrid(&#10;                grid = gameState.grid,&#10;                selectedCell = null,&#10;                selectedNumber = gameState.selectedNumber, // Pass selectedNumber&#10;                onCellClick = { row, col -&gt;&#10;                    gameState.inputToCell(row, col)&#10;                },&#10;                modifier = Modifier.fillMaxWidth()&#10;            )&#10;&#10;            // Pause overlay&#10;            if (gameState.isPaused) {&#10;                Box(&#10;                    modifier = Modifier&#10;                        .fillMaxSize()&#10;                        .background(MaterialTheme.colorScheme.surface.copy(alpha = 1f)),&#10;                    contentAlignment = Alignment.Center&#10;                ) {&#10;                    Text(&#10;                        text = &quot;Game Paused&quot;,&#10;                        style = MaterialTheme.typography.headlineLarge,&#10;                        color = MaterialTheme.colorScheme.onSurface&#10;                    )&#10;                }&#10;            }&#10;        }&#10;&#10;        Spacer(Modifier.height(96.dp))&#10;&#10;        // Compute which numbers are disabled (already filled in all spots)&#10;        val numberCounts = IntArray(9) { 0 }&#10;        for (row in gameState.grid) {&#10;            for (cell in row) {&#10;                if (cell.value in 1..9) {&#10;                    numberCounts[cell.value - 1]++&#10;                }&#10;            }&#10;        }&#10;        val disabledNumbers = numberCounts.mapIndexed { idx, count -&gt; if (count &gt;= 9) idx + 1 else null }.filterNotNull()&#10;&#10;        // Input numbers row&#10;        InputRow(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            input = List(9) { it + 1 },&#10;            onInputChange = { index, value -&gt;&#10;                val number = value.toInt()&#10;                if (!disabledNumbers.contains(number)) {&#10;                    gameState.selectNumber(number)&#10;                }&#10;            },&#10;            selectedNumber = gameState.selectedNumber,&#10;            disabledNumbers = disabledNumbers // Pass disabled numbers&#10;        )&#10;        Spacer(Modifier.height(24.dp))&#10;        // Utility Row&#10;        UtilityRow(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            selectedButton = when (gameState.gameMode) {&#10;                GameState.GameMode.NOTES -&gt; &quot;notes&quot;&#10;                GameState.GameMode.ERASE -&gt; &quot;erase&quot;&#10;                else -&gt; null&#10;            },&#10;            onEraseClick = { gameState.toggleEraseMode() },&#10;            onNotesClick = { gameState.toggleNotesMode() },&#10;            onUndoClick = { gameState.undo() },&#10;            onAutofillNotesClick = { gameState.autofillNotes() }&#10;        )&#10;&#10;        // Completion Dialog&#10;        if (showCompletionDialog) {&#10;            // Check for new best time&#10;            val (isNewBest, isNewBestNoMistakes) = BestTimeManager.setBestTime(&#10;                context = LocalContext.current,&#10;                difficulty = gameState.difficulty,&#10;                time = gameState.getFormattedTime(),&#10;                numMistakes = gameState.mistakesCount,&#10;            )&#10;&#10;            val context = LocalContext.current&#10;&#10;            LaunchedEffect(Unit) {&#10;                // Initialize repository if not done&#10;                gameState.initializeRepository(context)&#10;&#10;                // Record game completion in local statistics&#10;                gameState.recordGameCompletion(context)&#10;&#10;                // Try to submit score&#10;                val submitted = gameState.submitScoreToServer()&#10;                if (!submitted) { // off line mode or not connected to server&#10;                    // Show a toast or some indication that score submission failed&#10;                    // Toast.makeText(context, &quot;Score submission failed. Please try again later.&quot;, Toast.LENGTH_SHORT).show()&#10;                    // For now, we will just log it&#10;                    println(&quot;Score submission failed. Please try again later.&quot;)&#10;                }&#10;            }&#10;&#10;            GameStateManager.endGame()&#10;            AlertDialog(&#10;                onDismissRequest = {&#10;                    showCompletionDialog = false&#10;                    GameStateManager.endGame()&#10;                },&#10;                title = { Text(&quot;Congratulations! Final score: ${gameState.highestPossibleScore()}&quot;) },&#10;                text = {&#10;                    if (isNewBest) {&#10;                        Text(&quot;You completed the game in a new best time for ${gameState.difficulty}: ${gameState.getFormattedTime()}!&quot;)&#10;                    } else {&#10;                        Text(&quot;You completed the game in ${gameState.getFormattedTime()}! Your best time for ${gameState.difficulty} is ${BestTimeManager.getBestTimeFormatted(LocalContext.current, gameState.difficulty)}.&quot;)&#10;                    }&#10;                },&#10;                confirmButton = {&#10;                    Button(&#10;                        onClick = {&#10;                            showCompletionDialog = false&#10;                            GameStateManager.endGame()&#10;                            onNavigateToMenu()&#10;                        }&#10;                    ) {&#10;                        Text(&quot;Back to Menu&quot;)&#10;                    }&#10;                },&#10;                dismissButton = {&#10;                    TextButton(&#10;                        onClick = {&#10;                            showCompletionDialog = false&#10;                            GameStateManager.endGame()&#10;                        }&#10;                    ) {&#10;                        Text(&quot;Stay Here&quot;)&#10;                    }&#10;                }&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Preview(showBackground = true)&#10;@Composable&#10;fun GameScreenPreview() {&#10;    var isDarkTheme by remember { mutableStateOf(false) }&#10;&#10;    SudokuTheme(darkTheme = isDarkTheme) {&#10;        GameScreen(&#10;            isDarkTheme = isDarkTheme,&#10;            onThemeToggle = { isDarkTheme = it },&#10;&#10;        )&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/kooshmeen/sudoku/ui/screens/LeaderboardScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/kooshmeen/sudoku/ui/screens/LeaderboardScreen.kt" />
              <option name="updatedContent" value="/**&#10; * Leaderboard screen displaying top 100 players across different time periods&#10; */&#10;&#10;package com.kooshmeen.sudoku.ui.screens&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.itemsIndexed&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.automirrored.filled.ArrowBack&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.text.style.TextOverflow&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import com.kooshmeen.sudoku.data.api.LeaderboardEntry&#10;import com.kooshmeen.sudoku.repository.SudokuRepository&#10;import com.kooshmeen.sudoku.ui.theme.SudokuTheme&#10;import kotlinx.coroutines.launch&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun LeaderboardScreen(&#10;    modifier: Modifier = Modifier,&#10;    onNavigateBack: () -&gt; Unit = {}&#10;) {&#10;    var selectedTabIndex by remember { mutableIntStateOf(0) }&#10;    var leaderboardData by remember { mutableStateOf&lt;List&lt;LeaderboardEntry&gt;&gt;(emptyList()) }&#10;    var isLoading by remember { mutableStateOf(true) }&#10;    var errorMessage by remember { mutableStateOf&lt;String?&gt;(null) }&#10;&#10;    val context = LocalContext.current&#10;    val repository = remember { SudokuRepository(context) }&#10;    val scope = rememberCoroutineScope()&#10;&#10;    val tabTitles = listOf(&quot;All Time&quot;, &quot;This Month&quot;, &quot;This Week&quot;, &quot;Today&quot;)&#10;&#10;    // Load leaderboard data based on selected tab&#10;    LaunchedEffect(selectedTabIndex) {&#10;        isLoading = true&#10;        errorMessage = null&#10;&#10;        scope.launch {&#10;            val result = when (selectedTabIndex) {&#10;                0 -&gt; repository.getLeaderboardTotal()&#10;                1 -&gt; repository.getLeaderboardMonth()&#10;                2 -&gt; repository.getLeaderboardWeek()&#10;                3 -&gt; repository.getLeaderboardDay()&#10;                else -&gt; repository.getLeaderboardTotal()&#10;            }&#10;&#10;            result.fold(&#10;                onSuccess = { response -&gt;&#10;                    leaderboardData = response.leaderboard.mapIndexed { index, entry -&gt;&#10;                        entry.copy(rank = index + 1)&#10;                    }&#10;                    isLoading = false&#10;                },&#10;                onFailure = { exception -&gt;&#10;                    errorMessage = exception.message ?: &quot;Failed to load leaderboard&quot;&#10;                    isLoading = false&#10;                }&#10;            )&#10;        }&#10;    }&#10;&#10;    Column(&#10;        modifier = modifier&#10;            .fillMaxSize()&#10;            .background(MaterialTheme.colorScheme.background)&#10;    ) {&#10;        // Header with back button and title&#10;        TopAppBar(&#10;            title = {&#10;                Text(&#10;                    text = &quot;Leaderboard&quot;,&#10;                    style = MaterialTheme.typography.headlineMedium,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;            },&#10;            navigationIcon = {&#10;                IconButton(onClick = onNavigateBack) {&#10;                    Icon(&#10;                        imageVector = Icons.AutoMirrored.Filled.ArrowBack,&#10;                        contentDescription = &quot;Back&quot;,&#10;                        tint = MaterialTheme.colorScheme.onSurface&#10;                    )&#10;                }&#10;            },&#10;            colors = TopAppBarDefaults.topAppBarColors(&#10;                containerColor = MaterialTheme.colorScheme.surface&#10;            )&#10;        )&#10;&#10;        // Tab Row&#10;        TabRow(&#10;            selectedTabIndex = selectedTabIndex,&#10;            modifier = Modifier.fillMaxWidth(),&#10;            containerColor = MaterialTheme.colorScheme.surface,&#10;            contentColor = MaterialTheme.colorScheme.onSurface&#10;        ) {&#10;            tabTitles.forEachIndexed { index, title -&gt;&#10;                Tab(&#10;                    selected = selectedTabIndex == index,&#10;                    onClick = { selectedTabIndex = index },&#10;                    text = {&#10;                        Text(&#10;                            text = title,&#10;                            fontSize = 14.sp,&#10;                            fontWeight = if (selectedTabIndex == index) FontWeight.Bold else FontWeight.Normal&#10;                        )&#10;                    }&#10;                )&#10;            }&#10;        }&#10;&#10;        // Content&#10;        Box(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(16.dp)&#10;        ) {&#10;            when {&#10;                isLoading -&gt; {&#10;                    CircularProgressIndicator(&#10;                        modifier = Modifier.align(Alignment.Center),&#10;                        color = MaterialTheme.colorScheme.primary&#10;                    )&#10;                }&#10;                &#10;                errorMessage != null -&gt; {&#10;                    Card(&#10;                        modifier = Modifier&#10;                            .fillMaxWidth()&#10;                            .align(Alignment.Center),&#10;                        colors = CardDefaults.cardColors(&#10;                            containerColor = MaterialTheme.colorScheme.errorContainer&#10;                        ),&#10;                        shape = RoundedCornerShape(12.dp)&#10;                    ) {&#10;                        Column(&#10;                            modifier = Modifier.padding(16.dp),&#10;                            horizontalAlignment = Alignment.CenterHorizontally&#10;                        ) {&#10;                            Text(&#10;                                text = &quot;Error&quot;,&#10;                                style = MaterialTheme.typography.titleMedium,&#10;                                fontWeight = FontWeight.Bold,&#10;                                color = MaterialTheme.colorScheme.onErrorContainer&#10;                            )&#10;                            Spacer(modifier = Modifier.height(8.dp))&#10;                            Text(&#10;                                text = errorMessage!!,&#10;                                style = MaterialTheme.typography.bodyMedium,&#10;                                color = MaterialTheme.colorScheme.onErrorContainer,&#10;                                textAlign = TextAlign.Center&#10;                            )&#10;                            Spacer(modifier = Modifier.height(16.dp))&#10;                            Button(&#10;                                onClick = {&#10;                                    selectedTabIndex = selectedTabIndex // Trigger reload&#10;                                },&#10;                                colors = ButtonDefaults.buttonColors(&#10;                                    containerColor = MaterialTheme.colorScheme.error&#10;                                )&#10;                            ) {&#10;                                Text(&quot;Retry&quot;)&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;                &#10;                leaderboardData.isEmpty() -&gt; {&#10;                    Card(&#10;                        modifier = Modifier&#10;                            .fillMaxWidth()&#10;                            .align(Alignment.Center),&#10;                        shape = RoundedCornerShape(12.dp)&#10;                    ) {&#10;                        Text(&#10;                            text = &quot;No leaderboard data available&quot;,&#10;                            style = MaterialTheme.typography.bodyLarge,&#10;                            modifier = Modifier.padding(32.dp),&#10;                            textAlign = TextAlign.Center&#10;                        )&#10;                    }&#10;                }&#10;                &#10;                else -&gt; {&#10;                    LazyColumn(&#10;                        modifier = Modifier.fillMaxSize(),&#10;                        verticalArrangement = Arrangement.spacedBy(8.dp)&#10;                    ) {&#10;                        itemsIndexed(leaderboardData) { index, entry -&gt;&#10;                            LeaderboardItem(&#10;                                entry = entry,&#10;                                rank = index + 1&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun LeaderboardItem(&#10;    entry: LeaderboardEntry,&#10;    rank: Int&#10;) {&#10;    Card(&#10;        modifier = Modifier.fillMaxWidth(),&#10;        shape = RoundedCornerShape(12.dp),&#10;        colors = CardDefaults.cardColors(&#10;            containerColor = when (rank) {&#10;                1 -&gt; Color(0xFFFFD700).copy(alpha = 0.2f) // Gold&#10;                2 -&gt; Color(0xFFC0C0C0).copy(alpha = 0.2f) // Silver&#10;                3 -&gt; Color(0xFFCD7F32).copy(alpha = 0.2f) // Bronze&#10;                else -&gt; MaterialTheme.colorScheme.surface&#10;            }&#10;        ),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 2.dp)&#10;    ) {&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(16.dp),&#10;            verticalAlignment = Alignment.CenterVertically,&#10;            horizontalArrangement = Arrangement.SpaceBetween&#10;        ) {&#10;            // Rank indicator&#10;            Box(&#10;                modifier = Modifier&#10;                    .size(40.dp)&#10;                    .clip(CircleShape)&#10;                    .background(&#10;                        when (rank) {&#10;                            1 -&gt; Color(0xFFFFD700) // Gold&#10;                            2 -&gt; Color(0xFFC0C0C0) // Silver&#10;                            3 -&gt; Color(0xFFCD7F32) // Bronze&#10;                            else -&gt; MaterialTheme.colorScheme.primary&#10;                        }&#10;                    ),&#10;                contentAlignment = Alignment.Center&#10;            ) {&#10;                Text(&#10;                    text = rank.toString(),&#10;                    color = when (rank) {&#10;                        in 1..3 -&gt; Color.Black&#10;                        else -&gt; MaterialTheme.colorScheme.onPrimary&#10;                    },&#10;                    fontWeight = FontWeight.Bold,&#10;                    fontSize = 16.sp&#10;                )&#10;            }&#10;&#10;            // Username&#10;            Text(&#10;                text = entry.username,&#10;                style = MaterialTheme.typography.titleMedium,&#10;                fontWeight = if (rank &lt;= 3) FontWeight.Bold else FontWeight.Medium,&#10;                color = MaterialTheme.colorScheme.onSurface,&#10;                modifier = Modifier&#10;                    .weight(1f)&#10;                    .padding(horizontal = 16.dp),&#10;                maxLines = 1,&#10;                overflow = TextOverflow.Ellipsis&#10;            )&#10;&#10;            // Score&#10;            Text(&#10;                text = &quot;${entry.score}&quot;,&#10;                style = MaterialTheme.typography.titleMedium,&#10;                fontWeight = FontWeight.Bold,&#10;                color = when (rank) {&#10;                    1 -&gt; Color(0xFFB8860B) // Dark gold&#10;                    2 -&gt; Color(0xFF708090) // Dark silver&#10;                    3 -&gt; Color(0xFF8B4513) // Dark bronze&#10;                    else -&gt; MaterialTheme.colorScheme.primary&#10;                }&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Preview(showBackground = true)&#10;@Composable&#10;fun LeaderboardScreenPreview() {&#10;    SudokuTheme {&#10;        LeaderboardScreen()&#10;    }&#10;}&#10;&#10;@Preview(showBackground = true)&#10;@Composable&#10;fun LeaderboardItemPreview() {&#10;    SudokuTheme {&#10;        Column(&#10;            modifier = Modifier.padding(16.dp),&#10;            verticalArrangement = Arrangement.spacedBy(8.dp)&#10;        ) {&#10;            LeaderboardItem(&#10;                entry = LeaderboardEntry(1, &quot;GoldPlayer&quot;, 15000),&#10;                rank = 1&#10;            )&#10;            LeaderboardItem(&#10;                entry = LeaderboardEntry(2, &quot;SilverChamp&quot;, 12500),&#10;                rank = 2&#10;            )&#10;            LeaderboardItem(&#10;                entry = LeaderboardEntry(3, &quot;BronzeMaster&quot;, 10000),&#10;                rank = 3&#10;            )&#10;            LeaderboardItem(&#10;                entry = LeaderboardEntry(4, &quot;RegularPlayer&quot;, 8500),&#10;                rank = 4&#10;            )&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/kooshmeen/sudoku/ui/screens/MainMenu.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/kooshmeen/sudoku/ui/screens/MainMenu.kt" />
              <option name="originalContent" value="/**&#10; * MainMenu.kt&#10; * This file defines the main menu screen for the Sudoku app.&#10; * It includes options to start a game, select difficulty, and toggle themes.&#10; * It also includes a settings button.&#10; */&#10;&#10;package com.kooshmeen.sudoku.ui.screens&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.size&#10;import androidx.compose.foundation.layout.width&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.rounded.Settings&#10;import androidx.compose.material3.Button&#10;import androidx.compose.material3.DropdownMenu&#10;import androidx.compose.material3.DropdownMenuItem&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.IconButton&#10;import androidx.compose.material3.IconToggleButton&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.OutlinedButton&#10;import androidx.compose.material3.Text&#10;import androidx.compose.material3.TextButton&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.LaunchedEffect&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.setValue&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.res.painterResource&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import com.kooshmeen.sudoku.R&#10;import com.kooshmeen.sudoku.data.GameStateManager&#10;import com.kooshmeen.sudoku.ui.theme.SudokuTheme&#10;import androidx.compose.ui.platform.LocalContext&#10;import com.kooshmeen.sudoku.repository.SudokuRepository&#10;import com.kooshmeen.sudoku.data.api.User&#10;&#10;@Composable&#10;fun MainMenu (&#10;    modifier: Modifier = Modifier,&#10;    onThemeToggle: (Boolean) -&gt; Unit = { /* Default no-op */ },&#10;    isDarkTheme: Boolean = true, // Default value for dark theme&#10;    onNavigateToGame: () -&gt; Unit = { /* Default no-op */ },&#10;    onContinueGame: () -&gt; Unit = { /* Default no-op */ },&#10;    onStartNewGame: (String) -&gt; Unit = { /* Default no-op */ },&#10;    onNavigateToRecords: () -&gt; Unit = { /* Default no-op */ },&#10;    onNavigateToLeaderboard: () -&gt; Unit = { /* Default no-op */ },&#10;    onNavigateToAuth: () -&gt; Unit = { /* Default no-op */ }&#10;) {&#10;    var isDifficultyDropdownOpen by remember { mutableStateOf(false) }&#10;    var selectedDifficulty by remember { mutableStateOf(&quot;Easy&quot;) }&#10;    var isLoggedIn by remember { mutableStateOf(false) }&#10;    var currentUser by remember { mutableStateOf&lt;User?&gt;(null) }&#10;&#10;    val context = LocalContext.current&#10;    val hasActiveGame = remember {&#10;        GameStateManager.hasActiveGame() || GameStateManager.hasSavedGame(context)&#10;    }&#10;    val repository = remember { SudokuRepository(context) }&#10;&#10;    LaunchedEffect(Unit) {&#10;        isLoggedIn = repository.isLoggedIn()&#10;        currentUser = repository.fetchCurrentUser()&#10;    }&#10;&#10;    Column (&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .background(MaterialTheme.colorScheme.background)&#10;    ) {&#10;        Spacer(modifier = Modifier.height(32.dp))&#10;&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(horizontal = 16.dp),&#10;            horizontalArrangement = Arrangement.End,&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            IconToggleButton(&#10;                checked = isDarkTheme,&#10;                onCheckedChange = onThemeToggle,  // Use the callback&#10;                modifier = Modifier.size(24.dp)&#10;            ) {&#10;                Icon(&#10;                    painter = painterResource(&#10;                        id = if (!isDarkTheme) R.drawable.light_mode_24dp_e3e3e3_fill0_wght400_grad0_opsz24&#10;                        else R.drawable.dark_mode_24dp_e3e3e3_fill0_wght400_grad0_opsz24&#10;                    ),&#10;                    contentDescription = &quot;Toggle Dark/Light Mode&quot;,&#10;                    modifier = Modifier.size(24.dp)&#10;                )&#10;            }&#10;            Spacer(modifier = Modifier.width(16.dp))&#10;            IconButton(onClick = { /* TODO: Open Settings */ }) {&#10;                Icon(&#10;                    imageVector = Icons.Rounded.Settings,&#10;                    contentDescription = &quot;Settings&quot;,&#10;                    tint = MaterialTheme.colorScheme.onBackground,&#10;                    modifier = Modifier&#10;                        .size(24.dp)&#10;                        .fillMaxSize()&#10;                )&#10;            }&#10;        }&#10;&#10;        // Login/User status section&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(horizontal = 16.dp),&#10;            horizontalArrangement = Arrangement.SpaceBetween,&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            if (isLoggedIn &amp;&amp; currentUser != null) {&#10;                // Show welcome message and logout button&#10;                Column {&#10;                    Text(&#10;                        text = &quot;Hello, ${currentUser!!.username}!&quot;,&#10;                        style = MaterialTheme.typography.bodyLarge,&#10;                        color = MaterialTheme.colorScheme.onBackground,&#10;                        fontWeight = FontWeight.Medium&#10;                    )&#10;                    TextButton(&#10;                        onClick = {&#10;                            repository.logout()&#10;                            isLoggedIn = false&#10;                            currentUser = null&#10;                        }&#10;                    ) {&#10;                        Text(&quot;Logout&quot;, style = MaterialTheme.typography.bodySmall)&#10;                    }&#10;                }&#10;            } else {&#10;                // Show login button&#10;                Button(&#10;                    onClick = onNavigateToAuth,&#10;                    modifier = Modifier.padding(vertical = 8.dp)&#10;                ) {&#10;                    Text(&quot;Login&quot;)&#10;                }&#10;            }&#10;            Spacer(modifier = Modifier.weight(1f))&#10;        }&#10;&#10;        // Title&#10;        Spacer(modifier = Modifier.height(32.dp))&#10;        Text(&#10;            text = &quot;Welcome to Sudoku!&quot;,&#10;            fontSize = 32.sp,&#10;            fontWeight = FontWeight.Bold,&#10;            color = MaterialTheme.colorScheme.onBackground,&#10;            modifier = Modifier.align(Alignment.CenterHorizontally)&#10;        )&#10;        Spacer(modifier = Modifier.height(192.dp))&#10;&#10;        // Continue game button - only show if there's an active game&#10;        if (hasActiveGame) {&#10;            Button(&#10;                onClick = {&#10;                    if (!GameStateManager.hasActiveGame()) {&#10;                        GameStateManager.loadSavedGame(context)&#10;                    }&#10;                    GameStateManager.continueGame()&#10;                    onContinueGame()&#10;                },&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(horizontal = 16.dp)&#10;            ) {&#10;                Text(&#10;                    text = &quot;Continue Game&quot;,&#10;                    color = MaterialTheme.colorScheme.onPrimary,&#10;                )&#10;            }&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;        }&#10;&#10;        // Start new game button&#10;        Button(&#10;            onClick = {&#10;                GameStateManager.startNewGame(selectedDifficulty, context)&#10;                onStartNewGame(selectedDifficulty)&#10;            },&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(horizontal = 16.dp)&#10;        ) {&#10;            Text(&#10;                text = if (hasActiveGame) &quot;New Game&quot; else &quot;Start Game&quot;,&#10;                color = MaterialTheme.colorScheme.onPrimary,&#10;            )&#10;        }&#10;        Spacer(modifier = Modifier.height(8.dp))&#10;&#10;        // Select difficulty&#10;        Box(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(horizontal = 16.dp)&#10;        ) {&#10;            OutlinedButton(&#10;                onClick = { isDifficultyDropdownOpen = true },&#10;                modifier = Modifier.fillMaxWidth()&#10;            ) {&#10;                Box(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    contentAlignment = Alignment.Center&#10;                ) {&#10;                    Text(&#10;                        text = &quot;Difficulty: $selectedDifficulty&quot;,&#10;                        modifier = Modifier.align(Alignment.Center)&#10;                    )&#10;                    Icon(&#10;                        painter = painterResource(id = R.drawable.arrow_drop_down),&#10;                        contentDescription = &quot;Dropdown arrow&quot;,&#10;                        modifier = Modifier&#10;                            .align(Alignment.CenterEnd)&#10;                            .size(24.dp),&#10;                        tint = MaterialTheme.colorScheme.onBackground&#10;                    )&#10;                }&#10;            }&#10;&#10;            DropdownMenu(&#10;                expanded = isDifficultyDropdownOpen,&#10;                onDismissRequest = { isDifficultyDropdownOpen = false }&#10;            ) {&#10;                DropdownMenuItem(&#10;                    text = { Text(&quot;Easy&quot;) },&#10;                    onClick = {&#10;                        selectedDifficulty = &quot;Easy&quot;&#10;                        isDifficultyDropdownOpen = false&#10;                    }&#10;                )&#10;                DropdownMenuItem(&#10;                    text = { Text(&quot;Medium&quot;) },&#10;                    onClick = {&#10;                        selectedDifficulty = &quot;Medium&quot;&#10;                        isDifficultyDropdownOpen = false&#10;                    }&#10;                )&#10;                DropdownMenuItem(&#10;                    text = { Text(&quot;Hard&quot;) },&#10;                    onClick = {&#10;                        selectedDifficulty = &quot;Hard&quot;&#10;                        isDifficultyDropdownOpen = false&#10;                    }&#10;                )&#10;            }&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(128.dp))&#10;&#10;        // Row for Leaderboard button (left) and Records button (right)&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(horizontal = 16.dp),&#10;            horizontalArrangement = Arrangement.SpaceBetween,&#10;        ) {&#10;            Button(&#10;                onClick = { /* TODO: Navigate to Leaderboard */ },&#10;                modifier = Modifier.weight(1f)&#10;            ) {&#10;                Text(&#10;                    text = &quot;Leaderboard&quot;,&#10;                    color = MaterialTheme.colorScheme.onPrimary,&#10;                )&#10;            }&#10;            Spacer(modifier = Modifier.width(8.dp)) // Space between buttons&#10;            Button(&#10;                onClick = { onNavigateToRecords() },&#10;                modifier = Modifier.weight(1f)&#10;            ) {&#10;                Text(&#10;                    text = &quot;Records&quot;,&#10;                    color = MaterialTheme.colorScheme.onPrimary,&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Preview(showBackground = true)&#10;@Composable&#10;fun MainMenuPreview() {&#10;    var isDarkTheme by remember { mutableStateOf(false) }&#10;&#10;    SudokuTheme(darkTheme = isDarkTheme) {&#10;        MainMenu(&#10;            isDarkTheme = isDarkTheme,&#10;            onThemeToggle = { isDarkTheme = it }&#10;        )&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="/**&#10; * MainMenu.kt&#10; * This file defines the main menu screen for the Sudoku app.&#10; * It includes options to start a game, select difficulty, and toggle themes.&#10; * It also includes a settings button.&#10; */&#10;&#10;package com.kooshmeen.sudoku.ui.screens&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.size&#10;import androidx.compose.foundation.layout.width&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.rounded.Settings&#10;import androidx.compose.material3.Button&#10;import androidx.compose.material3.DropdownMenu&#10;import androidx.compose.material3.DropdownMenuItem&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.IconButton&#10;import androidx.compose.material3.IconToggleButton&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.OutlinedButton&#10;import androidx.compose.material3.Text&#10;import androidx.compose.material3.TextButton&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.LaunchedEffect&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.setValue&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.res.painterResource&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import com.kooshmeen.sudoku.R&#10;import com.kooshmeen.sudoku.data.GameStateManager&#10;import com.kooshmeen.sudoku.ui.theme.SudokuTheme&#10;import androidx.compose.ui.platform.LocalContext&#10;import com.kooshmeen.sudoku.repository.SudokuRepository&#10;import com.kooshmeen.sudoku.data.api.User&#10;&#10;@Composable&#10;fun MainMenu (&#10;    modifier: Modifier = Modifier,&#10;    onThemeToggle: (Boolean) -&gt; Unit = { /* Default no-op */ },&#10;    isDarkTheme: Boolean = true, // Default value for dark theme&#10;    onNavigateToGame: () -&gt; Unit = { /* Default no-op */ },&#10;    onContinueGame: () -&gt; Unit = { /* Default no-op */ },&#10;    onStartNewGame: (String) -&gt; Unit = { /* Default no-op */ },&#10;    onNavigateToRecords: () -&gt; Unit = { /* Default no-op */ },&#10;    onNavigateToLeaderboard: () -&gt; Unit = { /* Default no-op */ },&#10;    onNavigateToAuth: () -&gt; Unit = { /* Default no-op */ }&#10;) {&#10;    var isDifficultyDropdownOpen by remember { mutableStateOf(false) }&#10;    var selectedDifficulty by remember { mutableStateOf(&quot;Easy&quot;) }&#10;    var isLoggedIn by remember { mutableStateOf(false) }&#10;    var currentUser by remember { mutableStateOf&lt;User?&gt;(null) }&#10;&#10;    val context = LocalContext.current&#10;    val hasActiveGame = remember {&#10;        GameStateManager.hasActiveGame() || GameStateManager.hasSavedGame(context)&#10;    }&#10;    val repository = remember { SudokuRepository(context) }&#10;&#10;    LaunchedEffect(Unit) {&#10;        isLoggedIn = repository.isLoggedIn()&#10;        currentUser = repository.fetchCurrentUser()&#10;    }&#10;&#10;    Column (&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .background(MaterialTheme.colorScheme.background)&#10;    ) {&#10;        Spacer(modifier = Modifier.height(32.dp))&#10;&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(horizontal = 16.dp),&#10;            horizontalArrangement = Arrangement.End,&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            IconToggleButton(&#10;                checked = isDarkTheme,&#10;                onCheckedChange = onThemeToggle,  // Use the callback&#10;                modifier = Modifier.size(24.dp)&#10;            ) {&#10;                Icon(&#10;                    painter = painterResource(&#10;                        id = if (!isDarkTheme) R.drawable.light_mode_24dp_e3e3e3_fill0_wght400_grad0_opsz24&#10;                        else R.drawable.dark_mode_24dp_e3e3e3_fill0_wght400_grad0_opsz24&#10;                    ),&#10;                    contentDescription = &quot;Toggle Dark/Light Mode&quot;,&#10;                    modifier = Modifier.size(24.dp)&#10;                )&#10;            }&#10;            Spacer(modifier = Modifier.width(16.dp))&#10;            IconButton(onClick = { /* TODO: Open Settings */ }) {&#10;                Icon(&#10;                    imageVector = Icons.Rounded.Settings,&#10;                    contentDescription = &quot;Settings&quot;,&#10;                    tint = MaterialTheme.colorScheme.onBackground,&#10;                    modifier = Modifier&#10;                        .size(24.dp)&#10;                        .fillMaxSize()&#10;                )&#10;            }&#10;        }&#10;&#10;        // Login/User status section&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(horizontal = 16.dp),&#10;            horizontalArrangement = Arrangement.SpaceBetween,&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            if (isLoggedIn &amp;&amp; currentUser != null) {&#10;                // Show welcome message and logout button&#10;                Column {&#10;                    Text(&#10;                        text = &quot;Hello, ${currentUser!!.username}!&quot;,&#10;                        style = MaterialTheme.typography.bodyLarge,&#10;                        color = MaterialTheme.colorScheme.onBackground,&#10;                        fontWeight = FontWeight.Medium&#10;                    )&#10;                    TextButton(&#10;                        onClick = {&#10;                            repository.logout()&#10;                            isLoggedIn = false&#10;                            currentUser = null&#10;                        }&#10;                    ) {&#10;                        Text(&quot;Logout&quot;, style = MaterialTheme.typography.bodySmall)&#10;                    }&#10;                }&#10;            } else {&#10;                // Show login button&#10;                Button(&#10;                    onClick = onNavigateToAuth,&#10;                    modifier = Modifier.padding(vertical = 8.dp)&#10;                ) {&#10;                    Text(&quot;Login&quot;)&#10;                }&#10;            }&#10;            Spacer(modifier = Modifier.weight(1f))&#10;        }&#10;&#10;        // Title&#10;        Spacer(modifier = Modifier.height(32.dp))&#10;        Text(&#10;            text = &quot;Welcome to Sudoku!&quot;,&#10;            fontSize = 32.sp,&#10;            fontWeight = FontWeight.Bold,&#10;            color = MaterialTheme.colorScheme.onBackground,&#10;            modifier = Modifier.align(Alignment.CenterHorizontally)&#10;        )&#10;        Spacer(modifier = Modifier.height(192.dp))&#10;&#10;        // Continue game button - only show if there's an active game&#10;        if (hasActiveGame) {&#10;            Button(&#10;                onClick = {&#10;                    if (!GameStateManager.hasActiveGame()) {&#10;                        GameStateManager.loadSavedGame(context)&#10;                    }&#10;                    GameStateManager.continueGame()&#10;                    onContinueGame()&#10;                },&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(horizontal = 16.dp)&#10;            ) {&#10;                Text(&#10;                    text = &quot;Continue Game&quot;,&#10;                    color = MaterialTheme.colorScheme.onPrimary,&#10;                )&#10;            }&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;        }&#10;&#10;        // Start new game button&#10;        Button(&#10;            onClick = {&#10;                GameStateManager.startNewGame(selectedDifficulty, context)&#10;                onStartNewGame(selectedDifficulty)&#10;            },&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(horizontal = 16.dp)&#10;        ) {&#10;            Text(&#10;                text = if (hasActiveGame) &quot;New Game&quot; else &quot;Start Game&quot;,&#10;                color = MaterialTheme.colorScheme.onPrimary,&#10;            )&#10;        }&#10;        Spacer(modifier = Modifier.height(8.dp))&#10;&#10;        // Select difficulty&#10;        Box(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(horizontal = 16.dp)&#10;        ) {&#10;            OutlinedButton(&#10;                onClick = { isDifficultyDropdownOpen = true },&#10;                modifier = Modifier.fillMaxWidth()&#10;            ) {&#10;                Box(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    contentAlignment = Alignment.Center&#10;                ) {&#10;                    Text(&#10;                        text = &quot;Difficulty: $selectedDifficulty&quot;,&#10;                        modifier = Modifier.align(Alignment.Center)&#10;                    )&#10;                    Icon(&#10;                        painter = painterResource(id = R.drawable.arrow_drop_down),&#10;                        contentDescription = &quot;Dropdown arrow&quot;,&#10;                        modifier = Modifier&#10;                            .align(Alignment.CenterEnd)&#10;                            .size(24.dp),&#10;                        tint = MaterialTheme.colorScheme.onBackground&#10;                    )&#10;                }&#10;            }&#10;&#10;            DropdownMenu(&#10;                expanded = isDifficultyDropdownOpen,&#10;                onDismissRequest = { isDifficultyDropdownOpen = false }&#10;            ) {&#10;                DropdownMenuItem(&#10;                    text = { Text(&quot;Easy&quot;) },&#10;                    onClick = {&#10;                        selectedDifficulty = &quot;Easy&quot;&#10;                        isDifficultyDropdownOpen = false&#10;                    }&#10;                )&#10;                DropdownMenuItem(&#10;                    text = { Text(&quot;Medium&quot;) },&#10;                    onClick = {&#10;                        selectedDifficulty = &quot;Medium&quot;&#10;                        isDifficultyDropdownOpen = false&#10;                    }&#10;                )&#10;                DropdownMenuItem(&#10;                    text = { Text(&quot;Hard&quot;) },&#10;                    onClick = {&#10;                        selectedDifficulty = &quot;Hard&quot;&#10;                        isDifficultyDropdownOpen = false&#10;                    }&#10;                )&#10;            }&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(128.dp))&#10;&#10;        // Row for Leaderboard button (left) and Records button (right)&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(horizontal = 16.dp),&#10;            horizontalArrangement = Arrangement.SpaceBetween,&#10;        ) {&#10;            Button(&#10;                onClick = { onNavigateToLeaderboard() },&#10;                modifier = Modifier.weight(1f)&#10;            ) {&#10;                Text(&#10;                    text = &quot;Leaderboard&quot;,&#10;                    color = MaterialTheme.colorScheme.onPrimary,&#10;                )&#10;            }&#10;            Spacer(modifier = Modifier.width(8.dp)) // Space between buttons&#10;            Button(&#10;                onClick = { onNavigateToRecords() },&#10;                modifier = Modifier.weight(1f)&#10;            ) {&#10;                Text(&#10;                    text = &quot;Records&quot;,&#10;                    color = MaterialTheme.colorScheme.onPrimary,&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Preview(showBackground = true)&#10;@Composable&#10;fun MainMenuPreview() {&#10;    var isDarkTheme by remember { mutableStateOf(false) }&#10;&#10;    SudokuTheme(darkTheme = isDarkTheme) {&#10;        MainMenu(&#10;            isDarkTheme = isDarkTheme,&#10;            onThemeToggle = { isDarkTheme = it }&#10;        )&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/kooshmeen/sudoku/ui/screens/RecordScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/kooshmeen/sudoku/ui/screens/RecordScreen.kt" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/kooshmeen/sudoku/ui/screens/RecordsScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/kooshmeen/sudoku/ui/screens/RecordsScreen.kt" />
              <option name="originalContent" value="/**&#10; * Displays best times for each difficulty.&#10; */&#10;&#10;package com.kooshmeen.sudoku.ui.screens&#10;&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.material3.Button&#10;import androidx.compose.material3.ButtonDefaults&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.setValue&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.compose.ui.unit.dp&#10;import com.kooshmeen.sudoku.utils.BestTimeManager&#10;&#10;@Composable&#10;fun RecordScreen(&#10;    modifier: Modifier = Modifier,&#10;    onNavigateBack: () -&gt; Unit = {}&#10;) {&#10;    var refresh by remember { mutableStateOf(false) }&#10;    val context = LocalContext.current&#10;&#10;    val difficulties = listOf(&quot;Easy&quot;, &quot;Medium&quot;, &quot;Hard&quot;)&#10;&#10;    // Make best times reactive to refresh state&#10;    val bestTimes = remember(refresh) {&#10;        difficulties.associateWith { difficulty -&gt;&#10;            Pair(&#10;                BestTimeManager.getBestTimeFormatted(context, difficulty),&#10;                BestTimeManager.getBestTimeNoMistakeFormatted(context, difficulty)&#10;            )&#10;        }&#10;    }&#10;&#10;    Column(&#10;        modifier = modifier&#10;            .fillMaxSize()&#10;            .padding(16.dp),&#10;        verticalArrangement = Arrangement.spacedBy(16.dp)&#10;    ) {&#10;        Text(&#10;            text = &quot;Best Times&quot;,&#10;            style = MaterialTheme.typography.headlineLarge,&#10;            color = MaterialTheme.colorScheme.onBackground&#10;        )&#10;        difficulties.forEach { difficulty -&gt;&#10;            val (bestTime, bestTimeNoMistakes) = bestTimes[difficulty] ?: Pair(&quot;No best time&quot;, &quot;No best time&quot;)&#10;            Text(&#10;                text = &quot;$difficulty: $bestTime&quot;,&#10;                style = MaterialTheme.typography.bodyLarge,&#10;                color = MaterialTheme.colorScheme.onBackground&#10;            )&#10;            Text(&#10;                text = &quot;$difficulty (No Mistakes): $bestTimeNoMistakes&quot;,&#10;                style = MaterialTheme.typography.bodyMedium,&#10;                color = MaterialTheme.colorScheme.onBackground&#10;            )&#10;        }&#10;        Spacer(modifier = Modifier.weight(1f))&#10;        Row (&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(32.dp),&#10;            horizontalArrangement = Arrangement.Center,&#10;&#10;        ){&#10;            Button(&#10;                onClick = {&#10;                    BestTimeManager.clearBestTimes(context)&#10;                    refresh = !refresh // Toggle to force recomposition&#10;                          },&#10;                modifier = Modifier.padding(top = 16.dp, end = 4.dp),&#10;                colors = ButtonDefaults.buttonColors(&#10;                    containerColor = MaterialTheme.colorScheme.error,&#10;                    contentColor = MaterialTheme.colorScheme.onError&#10;                )&#10;            ) {&#10;                Text(text = &quot;Reset Times&quot;)&#10;            }&#10;            Button(&#10;                onClick = onNavigateBack,&#10;                modifier = Modifier.padding(start = 4.dp, top = 16.dp),&#10;            ) {&#10;                Text(text = &quot;Back to Menu&quot;)&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Preview(showBackground = true)&#10;@Composable&#10;fun RecordScreenPreview() {&#10;    RecordScreen(&#10;        modifier = Modifier.fillMaxSize(),&#10;        onNavigateBack = {}&#10;    )&#10;}" />
              <option name="updatedContent" value="/**&#10; * Comprehensive records screen displaying player statistics and achievements&#10; * Shows best times, completion stats, scores, and streaks in a beautiful Material Design layout&#10; */&#10;&#10;package com.kooshmeen.sudoku.ui.screens&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.LazyRow&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.automirrored.filled.ArrowBack&#10;import androidx.compose.material.icons.filled.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.graphics.vector.ImageVector&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import com.kooshmeen.sudoku.ui.theme.SudokuTheme&#10;import com.kooshmeen.sudoku.utils.BestTimeManager&#10;import com.kooshmeen.sudoku.utils.StatisticsManager&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun RecordScreen(&#10;    modifier: Modifier = Modifier,&#10;    onNavigateBack: () -&gt; Unit = {}&#10;) {&#10;    val context = LocalContext.current&#10;    val stats = remember { StatisticsManager.getPlayerStats(context) }&#10;    &#10;    var selectedTabIndex by remember { mutableIntStateOf(0) }&#10;    val tabTitles = listOf(&quot;Overview&quot;, &quot;Best Times&quot;, &quot;Statistics&quot;, &quot;Achievements&quot;)&#10;&#10;    Column(&#10;        modifier = modifier&#10;            .fillMaxSize()&#10;            .background(MaterialTheme.colorScheme.background)&#10;    ) {&#10;        // Header with back button and title&#10;        TopAppBar(&#10;            title = {&#10;                Text(&#10;                    text = &quot;Records &amp; Statistics&quot;,&#10;                    style = MaterialTheme.typography.headlineMedium,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;            },&#10;            navigationIcon = {&#10;                IconButton(onClick = onNavigateBack) {&#10;                    Icon(&#10;                        imageVector = Icons.AutoMirrored.Filled.ArrowBack,&#10;                        contentDescription = &quot;Back&quot;,&#10;                        tint = MaterialTheme.colorScheme.onSurface&#10;                    )&#10;                }&#10;            },&#10;            colors = TopAppBarDefaults.topAppBarColors(&#10;                containerColor = MaterialTheme.colorScheme.surface&#10;            )&#10;        )&#10;&#10;        // Tab Row&#10;        TabRow(&#10;            selectedTabIndex = selectedTabIndex,&#10;            modifier = Modifier.fillMaxWidth(),&#10;            containerColor = MaterialTheme.colorScheme.surface,&#10;            contentColor = MaterialTheme.colorScheme.onSurface&#10;        ) {&#10;            tabTitles.forEachIndexed { index, title -&gt;&#10;                Tab(&#10;                    selected = selectedTabIndex == index,&#10;                    onClick = { selectedTabIndex = index },&#10;                    text = {&#10;                        Text(&#10;                            text = title,&#10;                            fontSize = 14.sp,&#10;                            fontWeight = if (selectedTabIndex == index) FontWeight.Bold else FontWeight.Normal&#10;                        )&#10;                    }&#10;                )&#10;            }&#10;        }&#10;&#10;        // Content based on selected tab&#10;        LazyColumn(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(16.dp),&#10;            verticalArrangement = Arrangement.spacedBy(16.dp)&#10;        ) {&#10;            when (selectedTabIndex) {&#10;                0 -&gt; { // Overview&#10;                    item { OverviewSection(stats) }&#10;                    item { QuickStatsCards(stats) }&#10;                    item { ScoreProgressSection(stats) }&#10;                }&#10;                1 -&gt; { // Best Times&#10;                    item { BestTimesSection() }&#10;                }&#10;                2 -&gt; { // Statistics&#10;                    item { DetailedStatsSection(stats) }&#10;                    item { DifficultyBreakdownSection(stats) }&#10;                }&#10;                3 -&gt; { // Achievements&#10;                    item { AchievementsSection(stats) }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun OverviewSection(stats: StatisticsManager.PlayerStats) {&#10;    Card(&#10;        modifier = Modifier.fillMaxWidth(),&#10;        shape = RoundedCornerShape(16.dp),&#10;        colors = CardDefaults.cardColors(&#10;            containerColor = MaterialTheme.colorScheme.primaryContainer&#10;        )&#10;    ) {&#10;        Column(&#10;            modifier = Modifier.padding(20.dp),&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            Icon(&#10;                imageVector = Icons.Default.EmojiEvents,&#10;                contentDescription = &quot;Trophy&quot;,&#10;                modifier = Modifier.size(48.dp),&#10;                tint = MaterialTheme.colorScheme.primary&#10;            )&#10;            Spacer(modifier = Modifier.height(12.dp))&#10;            Text(&#10;                text = &quot;Total Games Completed&quot;,&#10;                style = MaterialTheme.typography.titleLarge,&#10;                fontWeight = FontWeight.Bold,&#10;                color = MaterialTheme.colorScheme.onPrimaryContainer&#10;            )&#10;            Text(&#10;                text = &quot;${stats.easyGamesCompleted + stats.mediumGamesCompleted + stats.hardGamesCompleted}&quot;,&#10;                style = MaterialTheme.typography.headlineLarge,&#10;                fontWeight = FontWeight.ExtraBold,&#10;                color = MaterialTheme.colorScheme.primary,&#10;                fontSize = 36.sp&#10;            )&#10;            Text(&#10;                text = &quot;Perfect Games: ${stats.easyGamesPerfect + stats.mediumGamesPerfect + stats.hardGamesPerfect}&quot;,&#10;                style = MaterialTheme.typography.bodyLarge,&#10;                color = MaterialTheme.colorScheme.onPrimaryContainer&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun QuickStatsCards(stats: StatisticsManager.PlayerStats) {&#10;    LazyRow(&#10;        horizontalArrangement = Arrangement.spacedBy(12.dp)&#10;    ) {&#10;        items(&#10;            listOf(&#10;                Triple(&quot;Current Streak&quot;, &quot;${stats.currentStreak} days&quot;, Icons.Default.LocalFire),&#10;                Triple(&quot;Total Score&quot;, &quot;${stats.easyTotalScore + stats.mediumTotalScore + stats.hardTotalScore}&quot;, Icons.Default.Score),&#10;                Triple(&quot;Time Played&quot;, StatisticsManager.formatPlayTime(stats.totalTimePlayed), Icons.Default.Schedule),&#10;                Triple(&quot;This Week&quot;, &quot;${stats.weeklyScore}&quot;, Icons.Default.CalendarMonth)&#10;            )&#10;        ) { (title, value, icon) -&gt;&#10;            QuickStatCard(title, value, icon)&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun QuickStatCard(title: String, value: String, icon: ImageVector) {&#10;    Card(&#10;        modifier = Modifier&#10;            .width(140.dp)&#10;            .height(100.dp),&#10;        shape = RoundedCornerShape(12.dp),&#10;        colors = CardDefaults.cardColors(&#10;            containerColor = MaterialTheme.colorScheme.surface&#10;        ),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)&#10;    ) {&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(12.dp),&#10;            horizontalAlignment = Alignment.CenterHorizontally,&#10;            verticalArrangement = Arrangement.SpaceEvenly&#10;        ) {&#10;            Icon(&#10;                imageVector = icon,&#10;                contentDescription = title,&#10;                tint = MaterialTheme.colorScheme.primary,&#10;                modifier = Modifier.size(24.dp)&#10;            )&#10;            Text(&#10;                text = value,&#10;                style = MaterialTheme.typography.titleMedium,&#10;                fontWeight = FontWeight.Bold,&#10;                color = MaterialTheme.colorScheme.onSurface,&#10;                textAlign = TextAlign.Center&#10;            )&#10;            Text(&#10;                text = title,&#10;                style = MaterialTheme.typography.bodySmall,&#10;                color = MaterialTheme.colorScheme.onSurfaceVariant,&#10;                textAlign = TextAlign.Center&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun ScoreProgressSection(stats: StatisticsManager.PlayerStats) {&#10;    Card(&#10;        modifier = Modifier.fillMaxWidth(),&#10;        shape = RoundedCornerShape(16.dp)&#10;    ) {&#10;        Column(&#10;            modifier = Modifier.padding(16.dp)&#10;        ) {&#10;            Text(&#10;                text = &quot;Score Progress&quot;,&#10;                style = MaterialTheme.typography.titleLarge,&#10;                fontWeight = FontWeight.Bold,&#10;                modifier = Modifier.padding(bottom = 16.dp)&#10;            )&#10;            &#10;            ScoreProgressItem(&quot;Today&quot;, stats.dailyScore, Color(0xFF4CAF50))&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;            ScoreProgressItem(&quot;This Week&quot;, stats.weeklyScore, Color(0xFF2196F3))&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;            ScoreProgressItem(&quot;This Month&quot;, stats.monthlyScore, Color(0xFF9C27B0))&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun ScoreProgressItem(period: String, score: Int, color: Color) {&#10;    Row(&#10;        modifier = Modifier.fillMaxWidth(),&#10;        horizontalArrangement = Arrangement.SpaceBetween,&#10;        verticalAlignment = Alignment.CenterVertically&#10;    ) {&#10;        Text(&#10;            text = period,&#10;            style = MaterialTheme.typography.bodyLarge,&#10;            fontWeight = FontWeight.Medium&#10;        )&#10;        Row(&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            Box(&#10;                modifier = Modifier&#10;                    .size(12.dp)&#10;                    .clip(CircleShape)&#10;                    .background(color)&#10;            )&#10;            Spacer(modifier = Modifier.width(8.dp))&#10;            Text(&#10;                text = score.toString(),&#10;                style = MaterialTheme.typography.titleMedium,&#10;                fontWeight = FontWeight.Bold,&#10;                color = color&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun BestTimesSection() {&#10;    val context = LocalContext.current&#10;    val difficulties = listOf(&quot;Easy&quot;, &quot;Medium&quot;, &quot;Hard&quot;)&#10;    &#10;    Card(&#10;        modifier = Modifier.fillMaxWidth(),&#10;        shape = RoundedCornerShape(16.dp)&#10;    ) {&#10;        Column(&#10;            modifier = Modifier.padding(16.dp)&#10;        ) {&#10;            Text(&#10;                text = &quot;Best Times&quot;,&#10;                style = MaterialTheme.typography.titleLarge,&#10;                fontWeight = FontWeight.Bold,&#10;                modifier = Modifier.padding(bottom = 16.dp)&#10;            )&#10;            &#10;            difficulties.forEach { difficulty -&gt;&#10;                BestTimeItem(&#10;                    difficulty = difficulty,&#10;                    bestTime = BestTimeManager.getBestTimeFormatted(context, difficulty),&#10;                    bestTimeNoMistake = BestTimeManager.getBestTimeNoMistakeFormatted(context, difficulty)&#10;                )&#10;                if (difficulty != difficulties.last()) {&#10;                    Spacer(modifier = Modifier.height(12.dp))&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun BestTimeItem(difficulty: String, bestTime: String, bestTimeNoMistake: String) {&#10;    Card(&#10;        modifier = Modifier.fillMaxWidth(),&#10;        shape = RoundedCornerShape(12.dp),&#10;        colors = CardDefaults.cardColors(&#10;            containerColor = when (difficulty) {&#10;                &quot;Easy&quot; -&gt; Color(0xFF4CAF50).copy(alpha = 0.1f)&#10;                &quot;Medium&quot; -&gt; Color(0xFFFF9800).copy(alpha = 0.1f)&#10;                &quot;Hard&quot; -&gt; Color(0xFFF44336).copy(alpha = 0.1f)&#10;                else -&gt; MaterialTheme.colorScheme.surface&#10;            }&#10;        )&#10;    ) {&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(16.dp),&#10;            horizontalArrangement = Arrangement.SpaceBetween,&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            Column {&#10;                Text(&#10;                    text = difficulty,&#10;                    style = MaterialTheme.typography.titleMedium,&#10;                    fontWeight = FontWeight.Bold,&#10;                    color = when (difficulty) {&#10;                        &quot;Easy&quot; -&gt; Color(0xFF2E7D32)&#10;                        &quot;Medium&quot; -&gt; Color(0xFFE65100)&#10;                        &quot;Hard&quot; -&gt; Color(0xFFC62828)&#10;                        else -&gt; MaterialTheme.colorScheme.onSurface&#10;                    }&#10;                )&#10;                Text(&#10;                    text = &quot;Best: $bestTime&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium,&#10;                    color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                )&#10;                Text(&#10;                    text = &quot;Perfect: $bestTimeNoMistake&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium,&#10;                    color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                )&#10;            }&#10;            Icon(&#10;                imageVector = Icons.Default.Timer,&#10;                contentDescription = &quot;Timer&quot;,&#10;                tint = when (difficulty) {&#10;                    &quot;Easy&quot; -&gt; Color(0xFF4CAF50)&#10;                    &quot;Medium&quot; -&gt; Color(0xFFFF9800)&#10;                    &quot;Hard&quot; -&gt; Color(0xFFF44336)&#10;                    else -&gt; MaterialTheme.colorScheme.primary&#10;                },&#10;                modifier = Modifier.size(32.dp)&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun DetailedStatsSection(stats: StatisticsManager.PlayerStats) {&#10;    Card(&#10;        modifier = Modifier.fillMaxWidth(),&#10;        shape = RoundedCornerShape(16.dp)&#10;    ) {&#10;        Column(&#10;            modifier = Modifier.padding(16.dp)&#10;        ) {&#10;            Text(&#10;                text = &quot;Detailed Statistics&quot;,&#10;                style = MaterialTheme.typography.titleLarge,&#10;                fontWeight = FontWeight.Bold,&#10;                modifier = Modifier.padding(bottom = 16.dp)&#10;            )&#10;            &#10;            StatRow(&quot;Total Games&quot;, &quot;${stats.easyGamesCompleted + stats.mediumGamesCompleted + stats.hardGamesCompleted}&quot;)&#10;            StatRow(&quot;Perfect Games&quot;, &quot;${stats.easyGamesPerfect + stats.mediumGamesPerfect + stats.hardGamesPerfect}&quot;)&#10;            StatRow(&quot;Current Streak&quot;, &quot;${stats.currentStreak} days&quot;)&#10;            StatRow(&quot;Longest Streak&quot;, &quot;${stats.longestStreak} days&quot;)&#10;            StatRow(&quot;Total Time&quot;, StatisticsManager.formatPlayTime(stats.totalTimePlayed))&#10;            StatRow(&quot;Total Score&quot;, &quot;${stats.easyTotalScore + stats.mediumTotalScore + stats.hardTotalScore}&quot;)&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun StatRow(label: String, value: String) {&#10;    Row(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .padding(vertical = 4.dp),&#10;        horizontalArrangement = Arrangement.SpaceBetween&#10;    ) {&#10;        Text(&#10;            text = label,&#10;            style = MaterialTheme.typography.bodyLarge,&#10;            color = MaterialTheme.colorScheme.onSurfaceVariant&#10;        )&#10;        Text(&#10;            text = value,&#10;            style = MaterialTheme.typography.bodyLarge,&#10;            fontWeight = FontWeight.Medium,&#10;            color = MaterialTheme.colorScheme.onSurface&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun DifficultyBreakdownSection(stats: StatisticsManager.PlayerStats) {&#10;    Card(&#10;        modifier = Modifier.fillMaxWidth(),&#10;        shape = RoundedCornerShape(16.dp)&#10;    ) {&#10;        Column(&#10;            modifier = Modifier.padding(16.dp)&#10;        ) {&#10;            Text(&#10;                text = &quot;Difficulty Breakdown&quot;,&#10;                style = MaterialTheme.typography.titleLarge,&#10;                fontWeight = FontWeight.Bold,&#10;                modifier = Modifier.padding(bottom = 16.dp)&#10;            )&#10;            &#10;            DifficultyCard(&#10;                difficulty = &quot;Easy&quot;,&#10;                completed = stats.easyGamesCompleted,&#10;                perfect = stats.easyGamesPerfect,&#10;                totalScore = stats.easyTotalScore,&#10;                averageScore = stats.easyAverageScore,&#10;                color = Color(0xFF4CAF50)&#10;            )&#10;            Spacer(modifier = Modifier.height(12.dp))&#10;            DifficultyCard(&#10;                difficulty = &quot;Medium&quot;,&#10;                completed = stats.mediumGamesCompleted,&#10;                perfect = stats.mediumGamesPerfect,&#10;                totalScore = stats.mediumTotalScore,&#10;                averageScore = stats.mediumAverageScore,&#10;                color = Color(0xFFFF9800)&#10;            )&#10;            Spacer(modifier = Modifier.height(12.dp))&#10;            DifficultyCard(&#10;                difficulty = &quot;Hard&quot;,&#10;                completed = stats.hardGamesCompleted,&#10;                perfect = stats.hardGamesPerfect,&#10;                totalScore = stats.hardTotalScore,&#10;                averageScore = stats.hardAverageScore,&#10;                color = Color(0xFFF44336)&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun DifficultyCard(&#10;    difficulty: String,&#10;    completed: Int,&#10;    perfect: Int,&#10;    totalScore: Int,&#10;    averageScore: Float,&#10;    color: Color&#10;) {&#10;    Card(&#10;        modifier = Modifier.fillMaxWidth(),&#10;        shape = RoundedCornerShape(12.dp),&#10;        colors = CardDefaults.cardColors(&#10;            containerColor = color.copy(alpha = 0.1f)&#10;        )&#10;    ) {&#10;        Column(&#10;            modifier = Modifier.padding(16.dp)&#10;        ) {&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.SpaceBetween,&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                Text(&#10;                    text = difficulty,&#10;                    style = MaterialTheme.typography.titleMedium,&#10;                    fontWeight = FontWeight.Bold,&#10;                    color = color&#10;                )&#10;                Text(&#10;                    text = &quot;$completed games&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium,&#10;                    fontWeight = FontWeight.Medium,&#10;                    color = color&#10;                )&#10;            }&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.SpaceBetween&#10;            ) {&#10;                Column {&#10;                    Text(&#10;                        text = &quot;Perfect Games&quot;,&#10;                        style = MaterialTheme.typography.bodySmall,&#10;                        color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                    )&#10;                    Text(&#10;                        text = &quot;$perfect&quot;,&#10;                        style = MaterialTheme.typography.bodyMedium,&#10;                        fontWeight = FontWeight.Medium&#10;                    )&#10;                }&#10;                Column {&#10;                    Text(&#10;                        text = &quot;Total Score&quot;,&#10;                        style = MaterialTheme.typography.bodySmall,&#10;                        color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                    )&#10;                    Text(&#10;                        text = &quot;$totalScore&quot;,&#10;                        style = MaterialTheme.typography.bodyMedium,&#10;                        fontWeight = FontWeight.Medium&#10;                    )&#10;                }&#10;                Column {&#10;                    Text(&#10;                        text = &quot;Average Score&quot;,&#10;                        style = MaterialTheme.typography.bodySmall,&#10;                        color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                    )&#10;                    Text(&#10;                        text = String.format(&quot;%.1f&quot;, averageScore),&#10;                        style = MaterialTheme.typography.bodyMedium,&#10;                        fontWeight = FontWeight.Medium&#10;                    )&#10;                }&#10;            }&#10;            if (completed &gt; 0) {&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;                val completionRate = StatisticsManager.getCompletionRate(completed, perfect)&#10;                Text(&#10;                    text = &quot;Perfect Rate: ${String.format(&quot;%.1f&quot;, completionRate)}%&quot;,&#10;                    style = MaterialTheme.typography.bodySmall,&#10;                    color = color&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun AchievementsSection(stats: StatisticsManager.PlayerStats) {&#10;    val achievements = listOf(&#10;        Achievement(&quot;First Victory&quot;, &quot;Complete your first game&quot;, stats.easyGamesCompleted + stats.mediumGamesCompleted + stats.hardGamesCompleted &gt; 0),&#10;        Achievement(&quot;Perfect Player&quot;, &quot;Complete a game without mistakes&quot;, stats.easyGamesPerfect + stats.mediumGamesPerfect + stats.hardGamesPerfect &gt; 0),&#10;        Achievement(&quot;Speed Demon&quot;, &quot;Complete 10 games&quot;, stats.easyGamesCompleted + stats.mediumGamesCompleted + stats.hardGamesCompleted &gt;= 10),&#10;        Achievement(&quot;Dedication&quot;, &quot;Play for 7 consecutive days&quot;, stats.longestStreak &gt;= 7),&#10;        Achievement(&quot;Master&quot;, &quot;Complete 50 games&quot;, stats.easyGamesCompleted + stats.mediumGamesCompleted + stats.hardGamesCompleted &gt;= 50),&#10;        Achievement(&quot;Perfectionist&quot;, &quot;Complete 10 perfect games&quot;, stats.easyGamesPerfect + stats.mediumGamesPerfect + stats.hardGamesPerfect &gt;= 10),&#10;        Achievement(&quot;Marathon&quot;, &quot;Play for 100 minutes total&quot;, stats.totalTimePlayed &gt;= 6000),&#10;        Achievement(&quot;High Scorer&quot;, &quot;Score over 10,000 points total&quot;, stats.easyTotalScore + stats.mediumTotalScore + stats.hardTotalScore &gt;= 10000)&#10;    )&#10;    &#10;    Card(&#10;        modifier = Modifier.fillMaxWidth(),&#10;        shape = RoundedCornerShape(16.dp)&#10;    ) {&#10;        Column(&#10;            modifier = Modifier.padding(16.dp)&#10;        ) {&#10;            Text(&#10;                text = &quot;Achievements&quot;,&#10;                style = MaterialTheme.typography.titleLarge,&#10;                fontWeight = FontWeight.Bold,&#10;                modifier = Modifier.padding(bottom = 16.dp)&#10;            )&#10;            &#10;            achievements.forEach { achievement -&gt;&#10;                AchievementItem(achievement)&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;data class Achievement(&#10;    val title: String,&#10;    val description: String,&#10;    val isUnlocked: Boolean&#10;)&#10;&#10;@Composable&#10;private fun AchievementItem(achievement: Achievement) {&#10;    Row(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .padding(vertical = 4.dp),&#10;        verticalAlignment = Alignment.CenterVertically&#10;    ) {&#10;        Icon(&#10;            imageVector = if (achievement.isUnlocked) Icons.Default.CheckCircle else Icons.Default.RadioButtonUnchecked,&#10;            contentDescription = if (achievement.isUnlocked) &quot;Unlocked&quot; else &quot;Locked&quot;,&#10;            tint = if (achievement.isUnlocked) Color(0xFF4CAF50) else MaterialTheme.colorScheme.onSurfaceVariant,&#10;            modifier = Modifier.size(24.dp)&#10;        )&#10;        Spacer(modifier = Modifier.width(12.dp))&#10;        Column(modifier = Modifier.weight(1f)) {&#10;            Text(&#10;                text = achievement.title,&#10;                style = MaterialTheme.typography.bodyLarge,&#10;                fontWeight = FontWeight.Medium,&#10;                color = if (achievement.isUnlocked) MaterialTheme.colorScheme.onSurface else MaterialTheme.colorScheme.onSurfaceVariant&#10;            )&#10;            Text(&#10;                text = achievement.description,&#10;                style = MaterialTheme.typography.bodySmall,&#10;                color = MaterialTheme.colorScheme.onSurfaceVariant&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Preview(showBackground = true)&#10;@Composable&#10;fun RecordScreenPreview() {&#10;    SudokuTheme {&#10;        RecordScreen()&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/kooshmeen/sudoku/utils/GameStatePersistence.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/kooshmeen/sudoku/utils/GameStatePersistence.kt" />
              <option name="updatedContent" value="/**&#10; * Handles persistence of game state using SharedPreferences&#10; * Serializes game state to JSON for storage&#10; */&#10;&#10;package com.kooshmeen.sudoku.utils&#10;&#10;import android.content.Context&#10;import org.json.JSONArray&#10;import org.json.JSONObject&#10;import com.kooshmeen.sudoku.data.*&#10;&#10;object GameStatePersistence {&#10;    private const val PREFS_NAME = &quot;SudokuGameState&quot;&#10;    private const val KEY_SAVED_GAME = &quot;saved_game&quot;&#10;    &#10;    fun saveGameState(context: Context, gameState: GameState) {&#10;        // Only save if game is active and not completed&#10;        if (!gameState.isGameActive || gameState.isGameCompleted) return&#10;        &#10;        val prefs = context.getSharedPreferences(PREFS_NAME, Context.MODE_PRIVATE)&#10;        val json = serializeGameState(gameState)&#10;        prefs.edit().putString(KEY_SAVED_GAME, json).apply()&#10;    }&#10;    &#10;    fun loadGameState(context: Context): SavedGameState? {&#10;        val prefs = context.getSharedPreferences(PREFS_NAME, Context.MODE_PRIVATE)&#10;        val json = prefs.getString(KEY_SAVED_GAME, null) ?: return null&#10;        return deserializeGameState(json)&#10;    }&#10;    &#10;    fun clearSavedGame(context: Context) {&#10;        val prefs = context.getSharedPreferences(PREFS_NAME, Context.MODE_PRIVATE)&#10;        prefs.edit().remove(KEY_SAVED_GAME).apply()&#10;    }&#10;    &#10;    private fun serializeGameState(gameState: GameState): String {&#10;        val jsonObject = JSONObject().apply {&#10;            put(&quot;difficulty&quot;, gameState.difficulty)&#10;            put(&quot;elapsedTime&quot;, gameState.elapsedTimeSeconds)&#10;            put(&quot;mistakesCount&quot;, gameState.mistakesCount)&#10;            put(&quot;grid&quot;, serializeGrid(gameState.grid))&#10;            put(&quot;solutionGrid&quot;, serializeSolutionGrid(gameState.solutionGrid))&#10;        }&#10;        return jsonObject.toString()&#10;    }&#10;    &#10;    private fun serializeGrid(grid: Array&lt;Array&lt;SudokuCell&gt;&gt;): JSONArray {&#10;        return JSONArray().apply {&#10;            grid.forEach { row -&gt;&#10;                val rowArray = JSONArray().apply {&#10;                    row.forEach { cell -&gt;&#10;                        val cellObj = JSONObject().apply {&#10;                            put(&quot;value&quot;, cell.value)&#10;                            put(&quot;notes&quot;, JSONArray(cell.notes.toList()))&#10;                            put(&quot;isOriginal&quot;, cell.isOriginal)&#10;                            put(&quot;hasError&quot;, cell.hasError)&#10;                        }&#10;                        put(cellObj)&#10;                    }&#10;                }&#10;                put(rowArray)&#10;            }&#10;        }&#10;    }&#10;    &#10;    private fun serializeSolutionGrid(solutionGrid: Array&lt;IntArray&gt;): JSONArray {&#10;        return JSONArray().apply {&#10;            solutionGrid.forEach { row -&gt;&#10;                val rowArray = JSONArray().apply {&#10;                    row.forEach { value -&gt;&#10;                        put(value)&#10;                    }&#10;                }&#10;                put(rowArray)&#10;            }&#10;        }&#10;    }&#10;    &#10;    private fun deserializeGameState(json: String): SavedGameState? {&#10;        return try {&#10;            val jsonObject = JSONObject(json)&#10;            &#10;            val gridArray = jsonObject.getJSONArray(&quot;grid&quot;)&#10;            val grid = mutableListOf&lt;List&lt;SavedCellState&gt;&gt;()&#10;            &#10;            for (i in 0 until gridArray.length()) {&#10;                val rowArray = gridArray.getJSONArray(i)&#10;                val row = mutableListOf&lt;SavedCellState&gt;()&#10;                &#10;                for (j in 0 until rowArray.length()) {&#10;                    val cellObj = rowArray.getJSONObject(j)&#10;                    val notesArray = cellObj.getJSONArray(&quot;notes&quot;)&#10;                    val notes = mutableListOf&lt;Int&gt;()&#10;                    &#10;                    for (k in 0 until notesArray.length()) {&#10;                        notes.add(notesArray.getInt(k))&#10;                    }&#10;                    &#10;                    row.add(SavedCellState(&#10;                        value = cellObj.getInt(&quot;value&quot;),&#10;                        notes = notes,&#10;                        isOriginal = cellObj.getBoolean(&quot;isOriginal&quot;),&#10;                        hasError = cellObj.getBoolean(&quot;hasError&quot;)&#10;                    ))&#10;                }&#10;                grid.add(row)&#10;            }&#10;            &#10;            val solutionArray = jsonObject.getJSONArray(&quot;solutionGrid&quot;)&#10;            val solutionGrid = mutableListOf&lt;List&lt;Int&gt;&gt;()&#10;            &#10;            for (i in 0 until solutionArray.length()) {&#10;                val rowArray = solutionArray.getJSONArray(i)&#10;                val row = mutableListOf&lt;Int&gt;()&#10;                &#10;                for (j in 0 until rowArray.length()) {&#10;                    row.add(rowArray.getInt(j))&#10;                }&#10;                solutionGrid.add(row)&#10;            }&#10;            &#10;            SavedGameState(&#10;                grid = grid,&#10;                difficulty = jsonObject.getString(&quot;difficulty&quot;),&#10;                elapsedTimeSeconds = jsonObject.getInt(&quot;elapsedTime&quot;),&#10;                mistakesCount = jsonObject.getInt(&quot;mistakesCount&quot;),&#10;                solutionGrid = solutionGrid&#10;            )&#10;        } catch (e: Exception) {&#10;            e.printStackTrace()&#10;            null&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/kooshmeen/sudoku/utils/StatisticsManager.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/kooshmeen/sudoku/utils/StatisticsManager.kt" />
              <option name="originalContent" value="/**&#10; * Comprehensive statistics manager for tracking player performance&#10; * Handles local storage of game statistics including completion counts, scores, and time-based tracking&#10; */&#10;&#10;package com.kooshmeen.sudoku.utils&#10;&#10;import android.content.Context&#10;import android.content.SharedPreferences&#10;import androidx.core.content.edit&#10;import java.lang.reflect.Array.getInt&#10;import java.lang.reflect.Array.getLong&#10;import java.text.SimpleDateFormat&#10;import java.util.*&#10;&#10;object StatisticsManager {&#10;    private const val PREFS_NAME = &quot;SudokuStatistics&quot;&#10;&#10;    // Keys for different statistics&#10;    private const val KEY_GAMES_COMPLETED = &quot;games_completed_&quot;&#10;    private const val KEY_GAMES_PERFECT = &quot;games_perfect_&quot; // without mistakes&#10;    private const val KEY_TOTAL_SCORE = &quot;total_score_&quot;&#10;    private const val KEY_DAILY_SCORE = &quot;daily_score_&quot;&#10;    private const val KEY_WEEKLY_SCORE = &quot;weekly_score_&quot;&#10;    private const val KEY_MONTHLY_SCORE = &quot;monthly_score_&quot;&#10;    private const val KEY_LAST_PLAY_DATE = &quot;last_play_date&quot;&#10;    private const val KEY_CURRENT_STREAK = &quot;current_streak&quot;&#10;    private const val KEY_LONGEST_STREAK = &quot;longest_streak&quot;&#10;    private const val KEY_TOTAL_TIME_PLAYED = &quot;total_time_played&quot;&#10;    private const val KEY_AVERAGE_SCORE = &quot;average_score_&quot;&#10;&#10;    data class PlayerStats(&#10;        val easyGamesCompleted: Int = 0,&#10;        val mediumGamesCompleted: Int = 0,&#10;        val hardGamesCompleted: Int = 0,&#10;        val easyGamesPerfect: Int = 0,&#10;        val mediumGamesPerfect: Int = 0,&#10;        val hardGamesPerfect: Int = 0,&#10;        val easyTotalScore: Int = 0,&#10;        val mediumTotalScore: Int = 0,&#10;        val hardTotalScore: Int = 0,&#10;        val dailyScore: Int = 0,&#10;        val weeklyScore: Int = 0,&#10;        val monthlyScore: Int = 0,&#10;        val currentStreak: Int = 0,&#10;        val longestStreak: Int = 0,&#10;        val totalTimePlayed: Long = 0, // in seconds&#10;        val easyAverageScore: Float = 0f,&#10;        val mediumAverageScore: Float = 0f,&#10;        val hardAverageScore: Float = 0f&#10;    )&#10;&#10;    /**&#10;     * Record a completed game and update all relevant statistics&#10;     */&#10;    fun recordCompletedGame(&#10;        context: Context,&#10;        difficulty: String,&#10;        score: Int,&#10;        timeSeconds: Int,&#10;        mistakes: Int&#10;    ) {&#10;        val prefs = context.getSharedPreferences(PREFS_NAME, Context.MODE_PRIVATE)&#10;        val difficultyKey = difficulty.lowercase()&#10;&#10;        prefs.edit {&#10;            // Update game completion counts&#10;            val completedKey = KEY_GAMES_COMPLETED + difficultyKey&#10;            val currentCompleted = getInt(completedKey, 0)&#10;            putInt(completedKey, currentCompleted + 1)&#10;&#10;            // Update perfect games count (no mistakes)&#10;            if (mistakes == 0) {&#10;                val perfectKey = KEY_GAMES_PERFECT + difficultyKey&#10;                val currentPerfect = getInt(perfectKey, 0)&#10;                putInt(perfectKey, currentPerfect + 1)&#10;            }&#10;&#10;            // Update total scores&#10;            val totalScoreKey = KEY_TOTAL_SCORE + difficultyKey&#10;            val currentTotalScore = getInt(totalScoreKey, 0)&#10;            putInt(totalScoreKey, currentTotalScore + score)&#10;&#10;            // Update average score&#10;            val averageKey = KEY_AVERAGE_SCORE + difficultyKey&#10;            val newAverage = (currentTotalScore + score).toFloat() / (currentCompleted + 1)&#10;            putFloat(averageKey, newAverage)&#10;&#10;            // Update time-based scores&#10;            updateTimeBasedScores(&#10;                this, score,&#10;                context = context&#10;            )&#10;&#10;            // Update playing streak&#10;            updatePlayingStreak(this, context)&#10;&#10;            // Update total time played&#10;            val currentTotalTime = getLong(KEY_TOTAL_TIME_PLAYED, 0)&#10;            putLong(KEY_TOTAL_TIME_PLAYED, currentTotalTime + timeSeconds)&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Update daily, weekly, and monthly scores&#10;     */&#10;    private fun updateTimeBasedScores(editor: SharedPreferences.Editor, score: Int, context: Context) {&#10;        val currentDate = Calendar.getInstance()&#10;        val prefs = context.getSharedPreferences(PREFS_NAME, Context.MODE_PRIVATE)&#10;&#10;        // Get current date strings&#10;        val today = SimpleDateFormat(&quot;yyyy-MM-dd&quot;, Locale.getDefault()).format(currentDate.time)&#10;        val thisWeek = &quot;${currentDate.get(Calendar.YEAR)}-W${currentDate.get(Calendar.WEEK_OF_YEAR)}&quot;&#10;        val thisMonth = SimpleDateFormat(&quot;yyyy-MM&quot;, Locale.getDefault()).format(currentDate.time)&#10;&#10;        // Check if we need to reset daily score&#10;        val lastDailyUpdate = prefs.getString(&quot;last_daily_update&quot;, &quot;&quot;)&#10;        if (lastDailyUpdate != today) {&#10;            editor.putInt(KEY_DAILY_SCORE, score)&#10;            editor.putString(&quot;last_daily_update&quot;, today)&#10;        } else {&#10;            val currentDaily = prefs.getInt(KEY_DAILY_SCORE, 0)&#10;            editor.putInt(KEY_DAILY_SCORE, currentDaily + score)&#10;        }&#10;&#10;        // Check if we need to reset weekly score&#10;        val lastWeeklyUpdate = prefs.getString(&quot;last_weekly_update&quot;, &quot;&quot;)&#10;        if (lastWeeklyUpdate != thisWeek) {&#10;            editor.putInt(KEY_WEEKLY_SCORE, score)&#10;            editor.putString(&quot;last_weekly_update&quot;, thisWeek)&#10;        } else {&#10;            val currentWeekly = prefs.getInt(KEY_WEEKLY_SCORE, 0)&#10;            editor.putInt(KEY_WEEKLY_SCORE, currentWeekly + score)&#10;        }&#10;&#10;        // Check if we need to reset monthly score&#10;        val lastMonthlyUpdate = prefs.getString(&quot;last_monthly_update&quot;, &quot;&quot;)&#10;        if (lastMonthlyUpdate != thisMonth) {&#10;            editor.putInt(KEY_MONTHLY_SCORE, score)&#10;            editor.putString(&quot;last_monthly_update&quot;, thisMonth)&#10;        } else {&#10;            val currentMonthly = prefs.getInt(KEY_MONTHLY_SCORE, 0)&#10;            editor.putInt(KEY_MONTHLY_SCORE, currentMonthly + score)&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Update playing streak (consecutive days played)&#10;     */&#10;    private fun updatePlayingStreak(editor: SharedPreferences.Editor, context: Context) {&#10;        val prefs = context.getSharedPreferences(PREFS_NAME, Context.MODE_PRIVATE)&#10;        val today = SimpleDateFormat(&quot;yyyy-MM-dd&quot;, Locale.getDefault()).format(Date())&#10;        val lastPlayDate = prefs.getString(KEY_LAST_PLAY_DATE, &quot;&quot;)&#10;&#10;        val currentStreak = prefs.getInt(KEY_CURRENT_STREAK, 0)&#10;        val longestStreak = prefs.getInt(KEY_LONGEST_STREAK, 0)&#10;&#10;        if (lastPlayDate == today) {&#10;            // Already played today, don't update streak&#10;            return&#10;        }&#10;&#10;        val yesterday = Calendar.getInstance().apply {&#10;            add(Calendar.DAY_OF_YEAR, -1)&#10;        }&#10;        val yesterdayStr = SimpleDateFormat(&quot;yyyy-MM-dd&quot;, Locale.getDefault()).format(yesterday.time)&#10;&#10;        val newStreak = if (lastPlayDate == yesterdayStr) {&#10;            // Consecutive day&#10;            currentStreak + 1&#10;        } else {&#10;            // Streak broken or first time playing&#10;            1&#10;        }&#10;&#10;        editor.putString(KEY_LAST_PLAY_DATE, today)&#10;        editor.putInt(KEY_CURRENT_STREAK, newStreak)&#10;&#10;        if (newStreak &gt; longestStreak) {&#10;            editor.putInt(KEY_LONGEST_STREAK, newStreak)&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Get all player statistics&#10;     */&#10;    fun getPlayerStats(context: Context): PlayerStats {&#10;        val prefs = context.getSharedPreferences(PREFS_NAME, Context.MODE_PRIVATE)&#10;&#10;        return PlayerStats(&#10;            easyGamesCompleted = prefs.getInt(KEY_GAMES_COMPLETED + &quot;easy&quot;, 0),&#10;            mediumGamesCompleted = prefs.getInt(KEY_GAMES_COMPLETED + &quot;medium&quot;, 0),&#10;            hardGamesCompleted = prefs.getInt(KEY_GAMES_COMPLETED + &quot;hard&quot;, 0),&#10;            easyGamesPerfect = prefs.getInt(KEY_GAMES_PERFECT + &quot;easy&quot;, 0),&#10;            mediumGamesPerfect = prefs.getInt(KEY_GAMES_PERFECT + &quot;medium&quot;, 0),&#10;            hardGamesPerfect = prefs.getInt(KEY_GAMES_PERFECT + &quot;hard&quot;, 0),&#10;            easyTotalScore = prefs.getInt(KEY_TOTAL_SCORE + &quot;easy&quot;, 0),&#10;            mediumTotalScore = prefs.getInt(KEY_TOTAL_SCORE + &quot;medium&quot;, 0),&#10;            hardTotalScore = prefs.getInt(KEY_TOTAL_SCORE + &quot;hard&quot;, 0),&#10;            dailyScore = prefs.getInt(KEY_DAILY_SCORE, 0),&#10;            weeklyScore = prefs.getInt(KEY_WEEKLY_SCORE, 0),&#10;            monthlyScore = prefs.getInt(KEY_MONTHLY_SCORE, 0),&#10;            currentStreak = prefs.getInt(KEY_CURRENT_STREAK, 0),&#10;            longestStreak = prefs.getInt(KEY_LONGEST_STREAK, 0),&#10;            totalTimePlayed = prefs.getLong(KEY_TOTAL_TIME_PLAYED, 0),&#10;            easyAverageScore = prefs.getFloat(KEY_AVERAGE_SCORE + &quot;easy&quot;, 0f),&#10;            mediumAverageScore = prefs.getFloat(KEY_AVERAGE_SCORE + &quot;medium&quot;, 0f),&#10;            hardAverageScore = prefs.getFloat(KEY_AVERAGE_SCORE + &quot;hard&quot;, 0f)&#10;        )&#10;    }&#10;&#10;    /**&#10;     * Clear all statistics&#10;     */&#10;    fun clearAllStats(context: Context) {&#10;        val prefs = context.getSharedPreferences(PREFS_NAME, Context.MODE_PRIVATE)&#10;        prefs.edit { clear() }&#10;    }&#10;&#10;    /**&#10;     * Format time in a human-readable way&#10;     */&#10;    fun formatPlayTime(totalSeconds: Long): String {&#10;        val hours = totalSeconds / 3600&#10;        val minutes = (totalSeconds % 3600) / 60&#10;        val seconds = totalSeconds % 60&#10;&#10;        return when {&#10;            hours &gt; 0 -&gt; String.format(Locale.getDefault(), &quot;%dh %dm %ds&quot;, hours, minutes, seconds)&#10;            minutes &gt; 0 -&gt; String.format(Locale.getDefault(), &quot;%dm %ds&quot;, minutes, seconds)&#10;            else -&gt; String.format(Locale.getDefault(), &quot;%ds&quot;, seconds)&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Calculate completion rate for a difficulty&#10;     */&#10;    fun getCompletionRate(completed: Int, perfect: Int): Float {&#10;        return if (completed &gt; 0) (perfect.toFloat() / completed.toFloat()) * 100 else 0f&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="/**&#10; * Comprehensive statistics manager for tracking player performance&#10; * Handles local storage of game statistics including completion counts, scores, and time-based tracking&#10; */&#10;&#10;package com.kooshmeen.sudoku.utils&#10;&#10;import android.content.Context&#10;import android.content.SharedPreferences&#10;import androidx.core.content.edit&#10;import java.text.SimpleDateFormat&#10;import java.util.*&#10;&#10;object StatisticsManager {&#10;    private const val PREFS_NAME = &quot;SudokuStatistics&quot;&#10;&#10;    // Keys for different statistics&#10;    private const val KEY_GAMES_COMPLETED = &quot;games_completed_&quot;&#10;    private const val KEY_GAMES_PERFECT = &quot;games_perfect_&quot; // without mistakes&#10;    private const val KEY_TOTAL_SCORE = &quot;total_score_&quot;&#10;    private const val KEY_DAILY_SCORE = &quot;daily_score_&quot;&#10;    private const val KEY_WEEKLY_SCORE = &quot;weekly_score_&quot;&#10;    private const val KEY_MONTHLY_SCORE = &quot;monthly_score_&quot;&#10;    private const val KEY_LAST_PLAY_DATE = &quot;last_play_date&quot;&#10;    private const val KEY_CURRENT_STREAK = &quot;current_streak&quot;&#10;    private const val KEY_LONGEST_STREAK = &quot;longest_streak&quot;&#10;    private const val KEY_TOTAL_TIME_PLAYED = &quot;total_time_played&quot;&#10;    private const val KEY_AVERAGE_SCORE = &quot;average_score_&quot;&#10;&#10;    data class PlayerStats(&#10;        val easyGamesCompleted: Int = 0,&#10;        val mediumGamesCompleted: Int = 0,&#10;        val hardGamesCompleted: Int = 0,&#10;        val easyGamesPerfect: Int = 0,&#10;        val mediumGamesPerfect: Int = 0,&#10;        val hardGamesPerfect: Int = 0,&#10;        val easyTotalScore: Int = 0,&#10;        val mediumTotalScore: Int = 0,&#10;        val hardTotalScore: Int = 0,&#10;        val dailyScore: Int = 0,&#10;        val weeklyScore: Int = 0,&#10;        val monthlyScore: Int = 0,&#10;        val currentStreak: Int = 0,&#10;        val longestStreak: Int = 0,&#10;        val totalTimePlayed: Long = 0, // in seconds&#10;        val easyAverageScore: Float = 0f,&#10;        val mediumAverageScore: Float = 0f,&#10;        val hardAverageScore: Float = 0f&#10;    )&#10;&#10;    /**&#10;     * Record a completed game and update all relevant statistics&#10;     */&#10;    fun recordCompletedGame(&#10;        context: Context,&#10;        difficulty: String,&#10;        score: Int,&#10;        timeSeconds: Int,&#10;        mistakes: Int&#10;    ) {&#10;        val prefs = context.getSharedPreferences(PREFS_NAME, Context.MODE_PRIVATE)&#10;        val difficultyKey = difficulty.lowercase()&#10;&#10;        prefs.edit {&#10;            // Update game completion counts&#10;            val completedKey = KEY_GAMES_COMPLETED + difficultyKey&#10;            val currentCompleted = prefs.getInt(completedKey, 0)&#10;            putInt(completedKey, currentCompleted + 1)&#10;&#10;            // Update perfect games count (no mistakes)&#10;            if (mistakes == 0) {&#10;                val perfectKey = KEY_GAMES_PERFECT + difficultyKey&#10;                val currentPerfect = prefs.getInt(perfectKey, 0)&#10;                putInt(perfectKey, currentPerfect + 1)&#10;            }&#10;&#10;            // Update total scores&#10;            val totalScoreKey = KEY_TOTAL_SCORE + difficultyKey&#10;            val currentTotalScore = prefs.getInt(totalScoreKey, 0)&#10;            putInt(totalScoreKey, currentTotalScore + score)&#10;&#10;            // Update average score&#10;            val averageKey = KEY_AVERAGE_SCORE + difficultyKey&#10;            val newAverage = (currentTotalScore + score).toFloat() / (currentCompleted + 1)&#10;            putFloat(averageKey, newAverage)&#10;&#10;            // Update time-based scores&#10;            updateTimeBasedScores(this, score, context)&#10;&#10;            // Update playing streak&#10;            updatePlayingStreak(this, context)&#10;&#10;            // Update total time played&#10;            val currentTotalTime = prefs.getLong(KEY_TOTAL_TIME_PLAYED, 0)&#10;            putLong(KEY_TOTAL_TIME_PLAYED, currentTotalTime + timeSeconds)&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Update daily, weekly, and monthly scores&#10;     */&#10;    private fun updateTimeBasedScores(editor: SharedPreferences.Editor, score: Int, context: Context) {&#10;        val currentDate = Calendar.getInstance()&#10;        val prefs = context.getSharedPreferences(PREFS_NAME, Context.MODE_PRIVATE)&#10;&#10;        // Get current date strings&#10;        val today = SimpleDateFormat(&quot;yyyy-MM-dd&quot;, Locale.getDefault()).format(currentDate.time)&#10;        val thisWeek = &quot;${currentDate.get(Calendar.YEAR)}-W${currentDate.get(Calendar.WEEK_OF_YEAR)}&quot;&#10;        val thisMonth = SimpleDateFormat(&quot;yyyy-MM&quot;, Locale.getDefault()).format(currentDate.time)&#10;&#10;        // Check if we need to reset daily score&#10;        val lastDailyUpdate = prefs.getString(&quot;last_daily_update&quot;, &quot;&quot;)&#10;        if (lastDailyUpdate != today) {&#10;            editor.putInt(KEY_DAILY_SCORE, score)&#10;            editor.putString(&quot;last_daily_update&quot;, today)&#10;        } else {&#10;            val currentDaily = prefs.getInt(KEY_DAILY_SCORE, 0)&#10;            editor.putInt(KEY_DAILY_SCORE, currentDaily + score)&#10;        }&#10;&#10;        // Check if we need to reset weekly score&#10;        val lastWeeklyUpdate = prefs.getString(&quot;last_weekly_update&quot;, &quot;&quot;)&#10;        if (lastWeeklyUpdate != thisWeek) {&#10;            editor.putInt(KEY_WEEKLY_SCORE, score)&#10;            editor.putString(&quot;last_weekly_update&quot;, thisWeek)&#10;        } else {&#10;            val currentWeekly = prefs.getInt(KEY_WEEKLY_SCORE, 0)&#10;            editor.putInt(KEY_WEEKLY_SCORE, currentWeekly + score)&#10;        }&#10;&#10;        // Check if we need to reset monthly score&#10;        val lastMonthlyUpdate = prefs.getString(&quot;last_monthly_update&quot;, &quot;&quot;)&#10;        if (lastMonthlyUpdate != thisMonth) {&#10;            editor.putInt(KEY_MONTHLY_SCORE, score)&#10;            editor.putString(&quot;last_monthly_update&quot;, thisMonth)&#10;        } else {&#10;            val currentMonthly = prefs.getInt(KEY_MONTHLY_SCORE, 0)&#10;            editor.putInt(KEY_MONTHLY_SCORE, currentMonthly + score)&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Update playing streak (consecutive days played)&#10;     */&#10;    private fun updatePlayingStreak(editor: SharedPreferences.Editor, context: Context) {&#10;        val prefs = context.getSharedPreferences(PREFS_NAME, Context.MODE_PRIVATE)&#10;        val today = SimpleDateFormat(&quot;yyyy-MM-dd&quot;, Locale.getDefault()).format(Date())&#10;        val lastPlayDate = prefs.getString(KEY_LAST_PLAY_DATE, &quot;&quot;)&#10;&#10;        val currentStreak = prefs.getInt(KEY_CURRENT_STREAK, 0)&#10;        val longestStreak = prefs.getInt(KEY_LONGEST_STREAK, 0)&#10;&#10;        if (lastPlayDate == today) {&#10;            // Already played today, don't update streak&#10;            return&#10;        }&#10;&#10;        val yesterday = Calendar.getInstance().apply {&#10;            add(Calendar.DAY_OF_YEAR, -1)&#10;        }&#10;        val yesterdayStr = SimpleDateFormat(&quot;yyyy-MM-dd&quot;, Locale.getDefault()).format(yesterday.time)&#10;&#10;        val newStreak = if (lastPlayDate == yesterdayStr) {&#10;            // Consecutive day&#10;            currentStreak + 1&#10;        } else {&#10;            // Streak broken or first time playing&#10;            1&#10;        }&#10;&#10;        editor.putString(KEY_LAST_PLAY_DATE, today)&#10;        editor.putInt(KEY_CURRENT_STREAK, newStreak)&#10;&#10;        if (newStreak &gt; longestStreak) {&#10;            editor.putInt(KEY_LONGEST_STREAK, newStreak)&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Get all player statistics&#10;     */&#10;    fun getPlayerStats(context: Context): PlayerStats {&#10;        val prefs = context.getSharedPreferences(PREFS_NAME, Context.MODE_PRIVATE)&#10;&#10;        return PlayerStats(&#10;            easyGamesCompleted = prefs.getInt(KEY_GAMES_COMPLETED + &quot;easy&quot;, 0),&#10;            mediumGamesCompleted = prefs.getInt(KEY_GAMES_COMPLETED + &quot;medium&quot;, 0),&#10;            hardGamesCompleted = prefs.getInt(KEY_GAMES_COMPLETED + &quot;hard&quot;, 0),&#10;            easyGamesPerfect = prefs.getInt(KEY_GAMES_PERFECT + &quot;easy&quot;, 0),&#10;            mediumGamesPerfect = prefs.getInt(KEY_GAMES_PERFECT + &quot;medium&quot;, 0),&#10;            hardGamesPerfect = prefs.getInt(KEY_GAMES_PERFECT + &quot;hard&quot;, 0),&#10;            easyTotalScore = prefs.getInt(KEY_TOTAL_SCORE + &quot;easy&quot;, 0),&#10;            mediumTotalScore = prefs.getInt(KEY_TOTAL_SCORE + &quot;medium&quot;, 0),&#10;            hardTotalScore = prefs.getInt(KEY_TOTAL_SCORE + &quot;hard&quot;, 0),&#10;            dailyScore = prefs.getInt(KEY_DAILY_SCORE, 0),&#10;            weeklyScore = prefs.getInt(KEY_WEEKLY_SCORE, 0),&#10;            monthlyScore = prefs.getInt(KEY_MONTHLY_SCORE, 0),&#10;            currentStreak = prefs.getInt(KEY_CURRENT_STREAK, 0),&#10;            longestStreak = prefs.getInt(KEY_LONGEST_STREAK, 0),&#10;            totalTimePlayed = prefs.getLong(KEY_TOTAL_TIME_PLAYED, 0),&#10;            easyAverageScore = prefs.getFloat(KEY_AVERAGE_SCORE + &quot;easy&quot;, 0f),&#10;            mediumAverageScore = prefs.getFloat(KEY_AVERAGE_SCORE + &quot;medium&quot;, 0f),&#10;            hardAverageScore = prefs.getFloat(KEY_AVERAGE_SCORE + &quot;hard&quot;, 0f)&#10;        )&#10;    }&#10;&#10;    /**&#10;     * Clear all statistics&#10;     */&#10;    fun clearAllStats(context: Context) {&#10;        val prefs = context.getSharedPreferences(PREFS_NAME, Context.MODE_PRIVATE)&#10;        prefs.edit { clear() }&#10;    }&#10;&#10;    /**&#10;     * Format time in a human-readable way&#10;     */&#10;    fun formatPlayTime(totalSeconds: Long): String {&#10;        val hours = totalSeconds / 3600&#10;        val minutes = (totalSeconds % 3600) / 60&#10;        val seconds = totalSeconds % 60&#10;&#10;        return when {&#10;            hours &gt; 0 -&gt; String.format(Locale.getDefault(), &quot;%dh %dm %ds&quot;, hours, minutes, seconds)&#10;            minutes &gt; 0 -&gt; String.format(Locale.getDefault(), &quot;%dm %ds&quot;, minutes, seconds)&#10;            else -&gt; String.format(Locale.getDefault(), &quot;%ds&quot;, seconds)&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Calculate completion rate for a difficulty&#10;     */&#10;    fun getCompletionRate(completed: Int, perfect: Int): Float {&#10;        return if (completed &gt; 0) (perfect.toFloat() / completed.toFloat()) * 100 else 0f&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>