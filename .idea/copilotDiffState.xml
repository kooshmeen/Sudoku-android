<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/kooshmeen/sudoku/ui/screens/AuthScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/kooshmeen/sudoku/ui/screens/AuthScreen.kt" />
              <option name="updatedContent" value="/**&#10; * Authentication screen for login and registration&#10; */&#10;&#10;package com.kooshmeen.sudoku.ui.screens&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.text.KeyboardOptions&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.automirrored.filled.ArrowBack&#10;import androidx.compose.material.icons.filled.Visibility&#10;import androidx.compose.material.icons.filled.VisibilityOff&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.input.KeyboardType&#10;import androidx.compose.ui.text.input.PasswordVisualTransformation&#10;import androidx.compose.ui.text.input.VisualTransformation&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import com.kooshmeen.sudoku.repository.SudokuRepository&#10;import com.kooshmeen.sudoku.ui.theme.SudokuTheme&#10;import kotlinx.coroutines.launch&#10;&#10;@Composable&#10;fun AuthScreen(&#10;    onNavigateBack: () -&gt; Unit = {},&#10;    onLoginSuccess: () -&gt; Unit = {},&#10;    modifier: Modifier = Modifier&#10;) {&#10;    var isLoginMode by remember { mutableStateOf(true) }&#10;    var email by remember { mutableStateOf(&quot;&quot;) }&#10;    var password by remember { mutableStateOf(&quot;&quot;) }&#10;    var username by remember { mutableStateOf(&quot;&quot;) }&#10;    var confirmPassword by remember { mutableStateOf(&quot;&quot;) }&#10;    var passwordVisible by remember { mutableStateOf(false) }&#10;    var confirmPasswordVisible by remember { mutableStateOf(false) }&#10;    var isLoading by remember { mutableStateOf(false) }&#10;    var errorMessage by remember { mutableStateOf&lt;String?&gt;(null) }&#10;    var successMessage by remember { mutableStateOf&lt;String?&gt;(null) }&#10;&#10;    val context = LocalContext.current&#10;    val repository = remember { SudokuRepository(context) }&#10;    val scope = rememberCoroutineScope()&#10;&#10;    Column(&#10;        modifier = modifier&#10;            .fillMaxSize()&#10;            .background(MaterialTheme.colorScheme.background)&#10;            .padding(16.dp),&#10;        verticalArrangement = Arrangement.spacedBy(16.dp)&#10;    ) {&#10;        // Header with back button&#10;        Row(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            IconButton(onClick = onNavigateBack) {&#10;                Icon(&#10;                    imageVector = Icons.AutoMirrored.Filled.ArrowBack,&#10;                    contentDescription = &quot;Back&quot;,&#10;                    tint = MaterialTheme.colorScheme.onBackground&#10;                )&#10;            }&#10;            Spacer(modifier = Modifier.weight(1f))&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(32.dp))&#10;&#10;        // Title&#10;        Text(&#10;            text = if (isLoginMode) &quot;Login&quot; else &quot;Register&quot;,&#10;            fontSize = 32.sp,&#10;            fontWeight = FontWeight.Bold,&#10;            color = MaterialTheme.colorScheme.onBackground,&#10;            modifier = Modifier.align(Alignment.CenterHorizontally)&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(32.dp))&#10;&#10;        // Username field (only for registration)&#10;        if (!isLoginMode) {&#10;            OutlinedTextField(&#10;                value = username,&#10;                onValueChange = { username = it },&#10;                label = { Text(&quot;Username&quot;) },&#10;                modifier = Modifier.fillMaxWidth(),&#10;                singleLine = true,&#10;                enabled = !isLoading&#10;            )&#10;        }&#10;&#10;        // Email field&#10;        OutlinedTextField(&#10;            value = email,&#10;            onValueChange = { email = it },&#10;            label = { Text(&quot;Email&quot;) },&#10;            modifier = Modifier.fillMaxWidth(),&#10;            singleLine = true,&#10;            keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Email),&#10;            enabled = !isLoading&#10;        )&#10;&#10;        // Password field&#10;        OutlinedTextField(&#10;            value = password,&#10;            onValueChange = { password = it },&#10;            label = { Text(&quot;Password&quot;) },&#10;            modifier = Modifier.fillMaxWidth(),&#10;            singleLine = true,&#10;            visualTransformation = if (passwordVisible) VisualTransformation.None else PasswordVisualTransformation(),&#10;            keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Password),&#10;            trailingIcon = {&#10;                IconButton(onClick = { passwordVisible = !passwordVisible }) {&#10;                    Icon(&#10;                        imageVector = if (passwordVisible) Icons.Default.Visibility else Icons.Default.VisibilityOff,&#10;                        contentDescription = if (passwordVisible) &quot;Hide password&quot; else &quot;Show password&quot;&#10;                    )&#10;                }&#10;            },&#10;            enabled = !isLoading&#10;        )&#10;&#10;        // Confirm password field (only for registration)&#10;        if (!isLoginMode) {&#10;            OutlinedTextField(&#10;                value = confirmPassword,&#10;                onValueChange = { confirmPassword = it },&#10;                label = { Text(&quot;Confirm Password&quot;) },&#10;                modifier = Modifier.fillMaxWidth(),&#10;                singleLine = true,&#10;                visualTransformation = if (confirmPasswordVisible) VisualTransformation.None else PasswordVisualTransformation(),&#10;                keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Password),&#10;                trailingIcon = {&#10;                    IconButton(onClick = { confirmPasswordVisible = !confirmPasswordVisible }) {&#10;                        Icon(&#10;                            imageVector = if (confirmPasswordVisible) Icons.Default.Visibility else Icons.Default.VisibilityOff,&#10;                            contentDescription = if (confirmPasswordVisible) &quot;Hide password&quot; else &quot;Show password&quot;&#10;                        )&#10;                    }&#10;                },&#10;                enabled = !isLoading&#10;            )&#10;        }&#10;&#10;        // Error message&#10;        errorMessage?.let { message -&gt;&#10;            Card(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                colors = CardDefaults.cardColors(&#10;                    containerColor = MaterialTheme.colorScheme.errorContainer&#10;                )&#10;            ) {&#10;                Text(&#10;                    text = message,&#10;                    color = MaterialTheme.colorScheme.onErrorContainer,&#10;                    modifier = Modifier.padding(16.dp)&#10;                )&#10;            }&#10;        }&#10;&#10;        // Success message&#10;        successMessage?.let { message -&gt;&#10;            Card(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                colors = CardDefaults.cardColors(&#10;                    containerColor = MaterialTheme.colorScheme.primaryContainer&#10;                )&#10;            ) {&#10;                Text(&#10;                    text = message,&#10;                    color = MaterialTheme.colorScheme.onPrimaryContainer,&#10;                    modifier = Modifier.padding(16.dp)&#10;                )&#10;            }&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(16.dp))&#10;&#10;        // Submit button&#10;        Button(&#10;            onClick = {&#10;                errorMessage = null&#10;                successMessage = null&#10;&#10;                // Validation&#10;                if (email.isBlank() || password.isBlank()) {&#10;                    errorMessage = &quot;Please fill in all fields&quot;&#10;                    return@Button&#10;                }&#10;&#10;                if (!isLoginMode) {&#10;                    if (username.isBlank()) {&#10;                        errorMessage = &quot;Please enter a username&quot;&#10;                        return@Button&#10;                    }&#10;                    if (password != confirmPassword) {&#10;                        errorMessage = &quot;Passwords do not match&quot;&#10;                        return@Button&#10;                    }&#10;                    if (password.length &lt; 6) {&#10;                        errorMessage = &quot;Password must be at least 6 characters&quot;&#10;                        return@Button&#10;                    }&#10;                }&#10;&#10;                isLoading = true&#10;                scope.launch {&#10;                    try {&#10;                        if (isLoginMode) {&#10;                            val result = repository.login(email, password)&#10;                            if (result.isSuccess) {&#10;                                onLoginSuccess()&#10;                            } else {&#10;                                errorMessage = result.exceptionOrNull()?.message ?: &quot;Login failed&quot;&#10;                            }&#10;                        } else {&#10;                            val result = repository.register(username, email, password)&#10;                            if (result.isSuccess) {&#10;                                successMessage = &quot;Registration successful! Please login.&quot;&#10;                                isLoginMode = true&#10;                                // Clear fields&#10;                                username = &quot;&quot;&#10;                                password = &quot;&quot;&#10;                                confirmPassword = &quot;&quot;&#10;                            } else {&#10;                                errorMessage = result.exceptionOrNull()?.message ?: &quot;Registration failed&quot;&#10;                            }&#10;                        }&#10;                    } catch (e: Exception) {&#10;                        errorMessage = e.message ?: &quot;An error occurred&quot;&#10;                    } finally {&#10;                        isLoading = false&#10;                    }&#10;                }&#10;            },&#10;            modifier = Modifier.fillMaxWidth(),&#10;            enabled = !isLoading&#10;        ) {&#10;            if (isLoading) {&#10;                CircularProgressIndicator(&#10;                    modifier = Modifier.size(20.dp),&#10;                    color = MaterialTheme.colorScheme.onPrimary&#10;                )&#10;            } else {&#10;                Text(if (isLoginMode) &quot;Login&quot; else &quot;Register&quot;)&#10;            }&#10;        }&#10;&#10;        // Toggle mode button&#10;        TextButton(&#10;            onClick = {&#10;                isLoginMode = !isLoginMode&#10;                errorMessage = null&#10;                successMessage = null&#10;            },&#10;            modifier = Modifier.align(Alignment.CenterHorizontally),&#10;            enabled = !isLoading&#10;        ) {&#10;            Text(&#10;                if (isLoginMode) &quot;Don't have an account? Register&quot; else &quot;Already have an account? Login&quot;&#10;            )&#10;        }&#10;&#10;        Spacer(modifier = Modifier.weight(1f))&#10;    }&#10;}&#10;&#10;@Preview(showBackground = true)&#10;@Composable&#10;fun AuthScreenPreview() {&#10;    SudokuTheme {&#10;        AuthScreen()&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/kooshmeen/sudoku/ui/screens/RecordScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/kooshmeen/sudoku/ui/screens/RecordScreen.kt" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/kooshmeen/sudoku/utils/StatisticsManager.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/kooshmeen/sudoku/utils/StatisticsManager.kt" />
              <option name="originalContent" value="/**&#10; * Comprehensive statistics manager for tracking player performance&#10; * Handles local storage of game statistics including completion counts, scores, and time-based tracking&#10; */&#10;&#10;package com.kooshmeen.sudoku.utils&#10;&#10;import android.content.Context&#10;import android.content.SharedPreferences&#10;import androidx.core.content.edit&#10;import java.lang.reflect.Array.getInt&#10;import java.lang.reflect.Array.getLong&#10;import java.lang.reflect.Array.getInt&#10;import java.lang.reflect.Array.getLong&#10;import java.lang.reflect.Array.getInt&#10;import java.lang.reflect.Array.getLong&#10;import java.lang.reflect.Array.getInt&#10;import java.lang.reflect.Array.getLong&#10;import java.lang.reflect.Array.getInt&#10;import java.lang.reflect.Array.getLong&#10;import java.lang.reflect.Array.getInt&#10;import java.lang.reflect.Array.getLong&#10;import java.lang.reflect.Array.getInt&#10;import java.lang.reflect.Array.getLong&#10;import java.lang.reflect.Array.getInt&#10;import java.lang.reflect.Array.getLong&#10;import java.text.SimpleDateFormat&#10;import java.util.*&#10;&#10;object StatisticsManager {&#10;    private const val PREFS_NAME = &quot;SudokuStatistics&quot;&#10;&#10;    // Keys for different statistics&#10;    private const val KEY_GAMES_COMPLETED = &quot;games_completed_&quot;&#10;    private const val KEY_GAMES_PERFECT = &quot;games_perfect_&quot; // without mistakes&#10;    private const val KEY_TOTAL_SCORE = &quot;total_score_&quot;&#10;    private const val KEY_DAILY_SCORE = &quot;daily_score_&quot;&#10;    private const val KEY_WEEKLY_SCORE = &quot;weekly_score_&quot;&#10;    private const val KEY_MONTHLY_SCORE = &quot;monthly_score_&quot;&#10;    private const val KEY_LAST_PLAY_DATE = &quot;last_play_date&quot;&#10;    private const val KEY_CURRENT_STREAK = &quot;current_streak&quot;&#10;    private const val KEY_LONGEST_STREAK = &quot;longest_streak&quot;&#10;    private const val KEY_TOTAL_TIME_PLAYED = &quot;total_time_played&quot;&#10;    private const val KEY_AVERAGE_SCORE = &quot;average_score_&quot;&#10;&#10;    data class PlayerStats(&#10;        val easyGamesCompleted: Int = 0,&#10;        val mediumGamesCompleted: Int = 0,&#10;        val hardGamesCompleted: Int = 0,&#10;        val easyGamesPerfect: Int = 0,&#10;        val mediumGamesPerfect: Int = 0,&#10;        val hardGamesPerfect: Int = 0,&#10;        val easyTotalScore: Int = 0,&#10;        val mediumTotalScore: Int = 0,&#10;        val hardTotalScore: Int = 0,&#10;        val dailyScore: Int = 0,&#10;        val weeklyScore: Int = 0,&#10;        val monthlyScore: Int = 0,&#10;        val currentStreak: Int = 0,&#10;        val longestStreak: Int = 0,&#10;        val totalTimePlayed: Long = 0, // in seconds&#10;        val easyAverageScore: Float = 0f,&#10;            val currentCompleted = getInt(completedKey, 0)&#10;        val hardAverageScore: Float = 0f&#10;            val currentCompleted = getInt(completedKey, 0)&#10;&#10;                val currentPerfect = getInt(perfectKey, 0)&#10;     * Record a completed game and update all relevant statistics&#10;                val currentPerfect = getInt(perfectKey, 0)&#10;    fun recordCompletedGame(&#10;                val currentPerfect = getInt(perfectKey, 0)&#10;        difficulty: String,&#10;            val currentTotalScore = getInt(totalScoreKey, 0)&#10;        timeSeconds: Int,&#10;            val currentTotalScore = getInt(totalScoreKey, 0)&#10;    ) {&#10;            val currentTotalScore = getInt(totalScoreKey, 0)&#10;        val difficultyKey = difficulty.lowercase()&#10;            val currentTotalScore = getInt(totalScoreKey, 0)&#10;        prefs.edit {&#10;            val currentCompleted = getInt(completedKey, 0)&#10;            updateTimeBasedScores(&#10;                this, score,&#10;                context = context&#10;            )&#10;                val currentPerfect = getInt(perfectKey, 0)&#10;            updateTimeBasedScores(&#10;                this, score,&#10;                context = context&#10;            )&#10;            val currentTotalTime = getLong(KEY_TOTAL_TIME_PLAYED, 0)&#10;            updateTimeBasedScores(&#10;                this, score,&#10;                context = context&#10;            )&#10;            val currentTotalTime = getLong(KEY_TOTAL_TIME_PLAYED, 0)&#10;            updateTimeBasedScores(&#10;                this, score,&#10;                context = context&#10;            )&#10;            val currentTotalTime = getLong(KEY_TOTAL_TIME_PLAYED, 0)&#10;                putInt(perfectKey, currentPerfect + 1)&#10;            val currentTotalTime = getLong(KEY_TOTAL_TIME_PLAYED, 0)&#10;&#10;            val currentTotalScore = getInt(totalScoreKey, 0)&#10;            val totalScoreKey = KEY_TOTAL_SCORE + difficultyKey&#10;            val currentTotalScore = getInt(totalScoreKey, 0)&#10;            putInt(totalScoreKey, currentTotalScore + score)&#10;&#10;            updateTimeBasedScores(&#10;                this, score,&#10;                context = context&#10;            )&#10;            val averageKey = KEY_AVERAGE_SCORE + difficultyKey&#10;            updateTimeBasedScores(&#10;                this, score,&#10;                context = context&#10;            )&#10;            val currentTotalTime = getLong(KEY_TOTAL_TIME_PLAYED, 0)&#10;            updateTimeBasedScores(&#10;                this, score,&#10;                context = context&#10;            )&#10;            val currentTotalTime = getLong(KEY_TOTAL_TIME_PLAYED, 0)&#10;            updateTimeBasedScores(&#10;                this, score,&#10;                context = context&#10;            )&#10;            val currentTotalTime = getLong(KEY_TOTAL_TIME_PLAYED, 0)&#10;            // Update playing streak&#10;            updatePlayingStreak(this, context)&#10;&#10;            // Update total time played&#10;            val currentTotalTime = getLong(KEY_TOTAL_TIME_PLAYED, 0)&#10;            putLong(KEY_TOTAL_TIME_PLAYED, currentTotalTime + timeSeconds)&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Update daily, weekly, and monthly scores&#10;     */&#10;    private fun updateTimeBasedScores(editor: SharedPreferences.Editor, score: Int, context: Context) {&#10;        val currentDate = Calendar.getInstance()&#10;        val prefs = context.getSharedPreferences(PREFS_NAME, Context.MODE_PRIVATE)&#10;&#10;        // Get current date strings&#10;        val today = SimpleDateFormat(&quot;yyyy-MM-dd&quot;, Locale.getDefault()).format(currentDate.time)&#10;        val thisWeek = &quot;${currentDate.get(Calendar.YEAR)}-W${currentDate.get(Calendar.WEEK_OF_YEAR)}&quot;&#10;        val thisMonth = SimpleDateFormat(&quot;yyyy-MM&quot;, Locale.getDefault()).format(currentDate.time)&#10;&#10;        // Check if we need to reset daily score&#10;        val lastDailyUpdate = prefs.getString(&quot;last_daily_update&quot;, &quot;&quot;)&#10;        if (lastDailyUpdate != today) {&#10;            editor.putInt(KEY_DAILY_SCORE, score)&#10;            editor.putString(&quot;last_daily_update&quot;, today)&#10;        } else {&#10;            val currentDaily = prefs.getInt(KEY_DAILY_SCORE, 0)&#10;            editor.putInt(KEY_DAILY_SCORE, currentDaily + score)&#10;        }&#10;&#10;        // Check if we need to reset weekly score&#10;        val lastWeeklyUpdate = prefs.getString(&quot;last_weekly_update&quot;, &quot;&quot;)&#10;        if (lastWeeklyUpdate != thisWeek) {&#10;            editor.putInt(KEY_WEEKLY_SCORE, score)&#10;            editor.putString(&quot;last_weekly_update&quot;, thisWeek)&#10;        } else {&#10;            val currentWeekly = prefs.getInt(KEY_WEEKLY_SCORE, 0)&#10;            editor.putInt(KEY_WEEKLY_SCORE, currentWeekly + score)&#10;        }&#10;&#10;        // Check if we need to reset monthly score&#10;        val lastMonthlyUpdate = prefs.getString(&quot;last_monthly_update&quot;, &quot;&quot;)&#10;        if (lastMonthlyUpdate != thisMonth) {&#10;            editor.putInt(KEY_MONTHLY_SCORE, score)&#10;            editor.putString(&quot;last_monthly_update&quot;, thisMonth)&#10;        } else {&#10;            val currentMonthly = prefs.getInt(KEY_MONTHLY_SCORE, 0)&#10;            editor.putInt(KEY_MONTHLY_SCORE, currentMonthly + score)&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Update playing streak (consecutive days played)&#10;     */&#10;    private fun updatePlayingStreak(editor: SharedPreferences.Editor, context: Context) {&#10;        val prefs = context.getSharedPreferences(PREFS_NAME, Context.MODE_PRIVATE)&#10;        val today = SimpleDateFormat(&quot;yyyy-MM-dd&quot;, Locale.getDefault()).format(Date())&#10;        val lastPlayDate = prefs.getString(KEY_LAST_PLAY_DATE, &quot;&quot;)&#10;&#10;        val currentStreak = prefs.getInt(KEY_CURRENT_STREAK, 0)&#10;        val longestStreak = prefs.getInt(KEY_LONGEST_STREAK, 0)&#10;&#10;        if (lastPlayDate == today) {&#10;            // Already played today, don't update streak&#10;            return&#10;        }&#10;&#10;        val yesterday = Calendar.getInstance().apply {&#10;            add(Calendar.DAY_OF_YEAR, -1)&#10;        }&#10;        val yesterdayStr = SimpleDateFormat(&quot;yyyy-MM-dd&quot;, Locale.getDefault()).format(yesterday.time)&#10;&#10;        val newStreak = if (lastPlayDate == yesterdayStr) {&#10;            // Consecutive day&#10;            currentStreak + 1&#10;        } else {&#10;            // Streak broken or first time playing&#10;            1&#10;        }&#10;&#10;        editor.putString(KEY_LAST_PLAY_DATE, today)&#10;        editor.putInt(KEY_CURRENT_STREAK, newStreak)&#10;&#10;        if (newStreak &gt; longestStreak) {&#10;            editor.putInt(KEY_LONGEST_STREAK, newStreak)&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Get all player statistics&#10;     */&#10;    fun getPlayerStats(context: Context): PlayerStats {&#10;        val prefs = context.getSharedPreferences(PREFS_NAME, Context.MODE_PRIVATE)&#10;&#10;        return PlayerStats(&#10;            easyGamesCompleted = prefs.getInt(KEY_GAMES_COMPLETED + &quot;easy&quot;, 0),&#10;            mediumGamesCompleted = prefs.getInt(KEY_GAMES_COMPLETED + &quot;medium&quot;, 0),&#10;            hardGamesCompleted = prefs.getInt(KEY_GAMES_COMPLETED + &quot;hard&quot;, 0),&#10;            easyGamesPerfect = prefs.getInt(KEY_GAMES_PERFECT + &quot;easy&quot;, 0),&#10;            mediumGamesPerfect = prefs.getInt(KEY_GAMES_PERFECT + &quot;medium&quot;, 0),&#10;            hardGamesPerfect = prefs.getInt(KEY_GAMES_PERFECT + &quot;hard&quot;, 0),&#10;            easyTotalScore = prefs.getInt(KEY_TOTAL_SCORE + &quot;easy&quot;, 0),&#10;            mediumTotalScore = prefs.getInt(KEY_TOTAL_SCORE + &quot;medium&quot;, 0),&#10;            hardTotalScore = prefs.getInt(KEY_TOTAL_SCORE + &quot;hard&quot;, 0),&#10;            dailyScore = prefs.getInt(KEY_DAILY_SCORE, 0),&#10;            weeklyScore = prefs.getInt(KEY_WEEKLY_SCORE, 0),&#10;            monthlyScore = prefs.getInt(KEY_MONTHLY_SCORE, 0),&#10;            currentStreak = prefs.getInt(KEY_CURRENT_STREAK, 0),&#10;            longestStreak = prefs.getInt(KEY_LONGEST_STREAK, 0),&#10;            totalTimePlayed = prefs.getLong(KEY_TOTAL_TIME_PLAYED, 0),&#10;            easyAverageScore = prefs.getFloat(KEY_AVERAGE_SCORE + &quot;easy&quot;, 0f),&#10;            mediumAverageScore = prefs.getFloat(KEY_AVERAGE_SCORE + &quot;medium&quot;, 0f),&#10;            hardAverageScore = prefs.getFloat(KEY_AVERAGE_SCORE + &quot;hard&quot;, 0f)&#10;        )&#10;    }&#10;&#10;    /**&#10;     * Clear all statistics&#10;     */&#10;    fun clearAllStats(context: Context) {&#10;        val prefs = context.getSharedPreferences(PREFS_NAME, Context.MODE_PRIVATE)&#10;        prefs.edit { clear() }&#10;    }&#10;&#10;    /**&#10;     * Format time in a human-readable way&#10;     */&#10;    fun formatPlayTime(totalSeconds: Long): String {&#10;        val hours = totalSeconds / 3600&#10;        val minutes = (totalSeconds % 3600) / 60&#10;        val seconds = totalSeconds % 60&#10;&#10;        return when {&#10;            hours &gt; 0 -&gt; String.format(Locale.getDefault(), &quot;%dh %dm %ds&quot;, hours, minutes, seconds)&#10;            minutes &gt; 0 -&gt; String.format(Locale.getDefault(), &quot;%dm %ds&quot;, minutes, seconds)&#10;            else -&gt; String.format(Locale.getDefault(), &quot;%ds&quot;, seconds)&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Calculate completion rate for a difficulty&#10;     */&#10;    fun getCompletionRate(completed: Int, perfect: Int): Float {&#10;        return if (completed &gt; 0) (perfect.toFloat() / completed.toFloat()) * 100 else 0f&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="/**&#10; * Comprehensive statistics manager for tracking player performance&#10; * Handles local storage of game statistics including completion counts, scores, and time-based tracking&#10; */&#10;&#10;package com.kooshmeen.sudoku.utils&#10;&#10;import android.content.Context&#10;import android.content.SharedPreferences&#10;import androidx.core.content.edit&#10;import java.text.SimpleDateFormat&#10;import java.util.*&#10;&#10;object StatisticsManager {&#10;    private const val PREFS_NAME = &quot;SudokuStatistics&quot;&#10;&#10;    // Keys for different statistics&#10;    private const val KEY_GAMES_COMPLETED = &quot;games_completed_&quot;&#10;    private const val KEY_GAMES_PERFECT = &quot;games_perfect_&quot; // without mistakes&#10;    private const val KEY_TOTAL_SCORE = &quot;total_score_&quot;&#10;    private const val KEY_DAILY_SCORE = &quot;daily_score_&quot;&#10;    private const val KEY_WEEKLY_SCORE = &quot;weekly_score_&quot;&#10;    private const val KEY_MONTHLY_SCORE = &quot;monthly_score_&quot;&#10;    private const val KEY_LAST_PLAY_DATE = &quot;last_play_date&quot;&#10;    private const val KEY_CURRENT_STREAK = &quot;current_streak&quot;&#10;    private const val KEY_LONGEST_STREAK = &quot;longest_streak&quot;&#10;    private const val KEY_TOTAL_TIME_PLAYED = &quot;total_time_played&quot;&#10;    private const val KEY_AVERAGE_SCORE = &quot;average_score_&quot;&#10;&#10;    data class PlayerStats(&#10;        val easyGamesCompleted: Int = 0,&#10;        val mediumGamesCompleted: Int = 0,&#10;        val hardGamesCompleted: Int = 0,&#10;        val easyGamesPerfect: Int = 0,&#10;        val mediumGamesPerfect: Int = 0,&#10;        val hardGamesPerfect: Int = 0,&#10;        val easyTotalScore: Int = 0,&#10;        val mediumTotalScore: Int = 0,&#10;        val hardTotalScore: Int = 0,&#10;        val dailyScore: Int = 0,&#10;        val weeklyScore: Int = 0,&#10;        val monthlyScore: Int = 0,&#10;        val currentStreak: Int = 0,&#10;        val longestStreak: Int = 0,&#10;        val totalTimePlayed: Long = 0, // in seconds&#10;        val easyAverageScore: Float = 0f,&#10;        val mediumAverageScore: Float = 0f,&#10;        val hardAverageScore: Float = 0f&#10;    )&#10;&#10;    /**&#10;     * Record a completed game and update all relevant statistics&#10;     */&#10;    fun recordCompletedGame(&#10;        context: Context,&#10;        difficulty: String,&#10;        score: Int,&#10;        timeSeconds: Int,&#10;        mistakes: Int&#10;    ) {&#10;        val prefs = context.getSharedPreferences(PREFS_NAME, Context.MODE_PRIVATE)&#10;        val difficultyKey = difficulty.lowercase()&#10;&#10;        prefs.edit {&#10;            // Update game completion counts&#10;            val completedKey = KEY_GAMES_COMPLETED + difficultyKey&#10;            val currentCompleted = prefs.getInt(completedKey, 0)&#10;            putInt(completedKey, currentCompleted + 1)&#10;&#10;            // Update perfect games count (no mistakes)&#10;            if (mistakes == 0) {&#10;                val perfectKey = KEY_GAMES_PERFECT + difficultyKey&#10;                val currentPerfect = prefs.getInt(perfectKey, 0)&#10;                putInt(perfectKey, currentPerfect + 1)&#10;            }&#10;&#10;            // Update total scores&#10;            val totalScoreKey = KEY_TOTAL_SCORE + difficultyKey&#10;            val currentTotalScore = prefs.getInt(totalScoreKey, 0)&#10;            putInt(totalScoreKey, currentTotalScore + score)&#10;&#10;            // Update average score&#10;            val averageKey = KEY_AVERAGE_SCORE + difficultyKey&#10;            val newAverage = (currentTotalScore + score).toFloat() / (currentCompleted + 1)&#10;            putFloat(averageKey, newAverage)&#10;&#10;            // Update time-based scores&#10;            updateTimeBasedScores(this, score, context)&#10;&#10;            // Update playing streak&#10;            updatePlayingStreak(this, context)&#10;&#10;            // Update total time played&#10;            val currentTotalTime = prefs.getLong(KEY_TOTAL_TIME_PLAYED, 0)&#10;            putLong(KEY_TOTAL_TIME_PLAYED, currentTotalTime + timeSeconds)&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Update daily, weekly, and monthly scores&#10;     */&#10;    private fun updateTimeBasedScores(editor: SharedPreferences.Editor, score: Int, context: Context) {&#10;        val currentDate = Calendar.getInstance()&#10;        val prefs = context.getSharedPreferences(PREFS_NAME, Context.MODE_PRIVATE)&#10;&#10;        // Get current date strings&#10;        val today = SimpleDateFormat(&quot;yyyy-MM-dd&quot;, Locale.getDefault()).format(currentDate.time)&#10;        val thisWeek = &quot;${currentDate.get(Calendar.YEAR)}-W${currentDate.get(Calendar.WEEK_OF_YEAR)}&quot;&#10;        val thisMonth = SimpleDateFormat(&quot;yyyy-MM&quot;, Locale.getDefault()).format(currentDate.time)&#10;&#10;        // Check if we need to reset daily score&#10;        val lastDailyUpdate = prefs.getString(&quot;last_daily_update&quot;, &quot;&quot;)&#10;        if (lastDailyUpdate != today) {&#10;            editor.putInt(KEY_DAILY_SCORE, score)&#10;            editor.putString(&quot;last_daily_update&quot;, today)&#10;        } else {&#10;            val currentDaily = prefs.getInt(KEY_DAILY_SCORE, 0)&#10;            editor.putInt(KEY_DAILY_SCORE, currentDaily + score)&#10;        }&#10;&#10;        // Check if we need to reset weekly score&#10;        val lastWeeklyUpdate = prefs.getString(&quot;last_weekly_update&quot;, &quot;&quot;)&#10;        if (lastWeeklyUpdate != thisWeek) {&#10;            editor.putInt(KEY_WEEKLY_SCORE, score)&#10;            editor.putString(&quot;last_weekly_update&quot;, thisWeek)&#10;        } else {&#10;            val currentWeekly = prefs.getInt(KEY_WEEKLY_SCORE, 0)&#10;            editor.putInt(KEY_WEEKLY_SCORE, currentWeekly + score)&#10;        }&#10;&#10;        // Check if we need to reset monthly score&#10;        val lastMonthlyUpdate = prefs.getString(&quot;last_monthly_update&quot;, &quot;&quot;)&#10;        if (lastMonthlyUpdate != thisMonth) {&#10;            editor.putInt(KEY_MONTHLY_SCORE, score)&#10;            editor.putString(&quot;last_monthly_update&quot;, thisMonth)&#10;        } else {&#10;            val currentMonthly = prefs.getInt(KEY_MONTHLY_SCORE, 0)&#10;            editor.putInt(KEY_MONTHLY_SCORE, currentMonthly + score)&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Update playing streak (consecutive days played)&#10;     */&#10;    private fun updatePlayingStreak(editor: SharedPreferences.Editor, context: Context) {&#10;        val prefs = context.getSharedPreferences(PREFS_NAME, Context.MODE_PRIVATE)&#10;        val today = SimpleDateFormat(&quot;yyyy-MM-dd&quot;, Locale.getDefault()).format(Date())&#10;        val lastPlayDate = prefs.getString(KEY_LAST_PLAY_DATE, &quot;&quot;)&#10;&#10;        val currentStreak = prefs.getInt(KEY_CURRENT_STREAK, 0)&#10;        val longestStreak = prefs.getInt(KEY_LONGEST_STREAK, 0)&#10;&#10;        if (lastPlayDate == today) {&#10;            // Already played today, don't update streak&#10;            return&#10;        }&#10;&#10;        val yesterday = Calendar.getInstance().apply {&#10;            add(Calendar.DAY_OF_YEAR, -1)&#10;        }&#10;        val yesterdayStr = SimpleDateFormat(&quot;yyyy-MM-dd&quot;, Locale.getDefault()).format(yesterday.time)&#10;&#10;        val newStreak = if (lastPlayDate == yesterdayStr) {&#10;            // Consecutive day&#10;            currentStreak + 1&#10;        } else {&#10;            // Streak broken or first time playing&#10;            1&#10;        }&#10;&#10;        editor.putString(KEY_LAST_PLAY_DATE, today)&#10;        editor.putInt(KEY_CURRENT_STREAK, newStreak)&#10;&#10;        if (newStreak &gt; longestStreak) {&#10;            editor.putInt(KEY_LONGEST_STREAK, newStreak)&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Get all player statistics&#10;     */&#10;    fun getPlayerStats(context: Context): PlayerStats {&#10;        val prefs = context.getSharedPreferences(PREFS_NAME, Context.MODE_PRIVATE)&#10;&#10;        return PlayerStats(&#10;            easyGamesCompleted = prefs.getInt(KEY_GAMES_COMPLETED + &quot;easy&quot;, 0),&#10;            mediumGamesCompleted = prefs.getInt(KEY_GAMES_COMPLETED + &quot;medium&quot;, 0),&#10;            hardGamesCompleted = prefs.getInt(KEY_GAMES_COMPLETED + &quot;hard&quot;, 0),&#10;            easyGamesPerfect = prefs.getInt(KEY_GAMES_PERFECT + &quot;easy&quot;, 0),&#10;            mediumGamesPerfect = prefs.getInt(KEY_GAMES_PERFECT + &quot;medium&quot;, 0),&#10;            hardGamesPerfect = prefs.getInt(KEY_GAMES_PERFECT + &quot;hard&quot;, 0),&#10;            easyTotalScore = prefs.getInt(KEY_TOTAL_SCORE + &quot;easy&quot;, 0),&#10;            mediumTotalScore = prefs.getInt(KEY_TOTAL_SCORE + &quot;medium&quot;, 0),&#10;            hardTotalScore = prefs.getInt(KEY_TOTAL_SCORE + &quot;hard&quot;, 0),&#10;            dailyScore = prefs.getInt(KEY_DAILY_SCORE, 0),&#10;            weeklyScore = prefs.getInt(KEY_WEEKLY_SCORE, 0),&#10;            monthlyScore = prefs.getInt(KEY_MONTHLY_SCORE, 0),&#10;            currentStreak = prefs.getInt(KEY_CURRENT_STREAK, 0),&#10;            longestStreak = prefs.getInt(KEY_LONGEST_STREAK, 0),&#10;            totalTimePlayed = prefs.getLong(KEY_TOTAL_TIME_PLAYED, 0),&#10;            easyAverageScore = prefs.getFloat(KEY_AVERAGE_SCORE + &quot;easy&quot;, 0f),&#10;            mediumAverageScore = prefs.getFloat(KEY_AVERAGE_SCORE + &quot;medium&quot;, 0f),&#10;            hardAverageScore = prefs.getFloat(KEY_AVERAGE_SCORE + &quot;hard&quot;, 0f)&#10;        )&#10;    }&#10;&#10;    /**&#10;     * Clear all statistics&#10;     */&#10;    fun clearAllStats(context: Context) {&#10;        val prefs = context.getSharedPreferences(PREFS_NAME, Context.MODE_PRIVATE)&#10;        prefs.edit { clear() }&#10;    }&#10;&#10;    /**&#10;     * Format time in a human-readable way&#10;     */&#10;    fun formatPlayTime(totalSeconds: Long): String {&#10;        val hours = totalSeconds / 3600&#10;        val minutes = (totalSeconds % 3600) / 60&#10;        val seconds = totalSeconds % 60&#10;&#10;        return when {&#10;            hours &gt; 0 -&gt; String.format(Locale.getDefault(), &quot;%dh %dm %ds&quot;, hours, minutes, seconds)&#10;            minutes &gt; 0 -&gt; String.format(Locale.getDefault(), &quot;%dm %ds&quot;, minutes, seconds)&#10;            else -&gt; String.format(Locale.getDefault(), &quot;%ds&quot;, seconds)&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Calculate completion rate for a difficulty&#10;     */&#10;    fun getCompletionRate(completed: Int, perfect: Int): Float {&#10;        return if (completed &gt; 0) (perfect.toFloat() / completed.toFloat()) * 100 else 0f&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>