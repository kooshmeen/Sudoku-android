<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/kooshmeen/sudoku/ui/components/LiveMatchAcceptingCard.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/kooshmeen/sudoku/ui/components/LiveMatchAcceptingCard.kt" />
              <option name="updatedContent" value="package com.kooshmeen.sudoku.ui.components&#10;&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.unit.dp&#10;import com.kooshmeen.sudoku.repository.SudokuRepository&#10;import kotlinx.coroutines.delay&#10;import kotlinx.coroutines.launch&#10;&#10;@Composable&#10;fun LiveMatchAcceptingCard(&#10;    matchId: Int,&#10;    difficulty: String,&#10;    challengerName: String,&#10;    onNavigateToGame: (String, Int?, Int?) -&gt; Unit,&#10;    onDismiss: () -&gt; Unit,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    var waitingForPuzzle by remember { mutableStateOf(true) }&#10;    var statusMessage by remember { mutableStateOf(&quot;Match accepted! Waiting for puzzle...&quot;) }&#10;    var errorMessage by remember { mutableStateOf&lt;String?&gt;(null) }&#10;    &#10;    val context = LocalContext.current&#10;    val repository = remember { SudokuRepository(context) }&#10;    val scope = rememberCoroutineScope()&#10;&#10;    // Start polling for active status&#10;    LaunchedEffect(matchId) {&#10;        var pollCount = 0&#10;        while (waitingForPuzzle &amp;&amp; pollCount &lt; 30) { // Max 60 seconds&#10;            delay(2000) // Poll every 2 seconds&#10;            scope.launch {&#10;                val statusResult = repository.getLiveMatchStatus(matchId)&#10;                statusResult.fold(&#10;                    onSuccess = { matchStatus -&gt;&#10;                        when (matchStatus.status) {&#10;                            &quot;active&quot; -&gt; {&#10;                                statusMessage = &quot;Puzzle ready! Starting game...&quot;&#10;                                delay(1000)&#10;                                onNavigateToGame(difficulty, null, matchId)&#10;                                waitingForPuzzle = false&#10;                                onDismiss()&#10;                            }&#10;                            &quot;cancelled&quot; -&gt; {&#10;                                statusMessage = &quot;Match was cancelled&quot;&#10;                                waitingForPuzzle = false&#10;                                onDismiss()&#10;                            }&#10;                        }&#10;                    },&#10;                    onFailure = { exception -&gt;&#10;                        // Continue polling on error, but log it&#10;                        println(&quot;Polling error: ${exception.message}&quot;)&#10;                    }&#10;                )&#10;            }&#10;            pollCount++&#10;        }&#10;        &#10;        if (pollCount &gt;= 30) {&#10;            statusMessage = &quot;Timeout waiting for puzzle&quot;&#10;            errorMessage = &quot;The challenger took too long to generate the puzzle&quot;&#10;            waitingForPuzzle = false&#10;        }&#10;    }&#10;&#10;    Card(&#10;        modifier = modifier.fillMaxWidth(),&#10;        shape = RoundedCornerShape(16.dp),&#10;        colors = CardDefaults.cardColors(&#10;            containerColor = MaterialTheme.colorScheme.primaryContainer&#10;        ),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 8.dp)&#10;    ) {&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(20.dp),&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            // Header text&#10;            Text(&#10;                text = &quot;Live Match Starting&quot;,&#10;                style = MaterialTheme.typography.titleMedium,&#10;                fontWeight = FontWeight.Bold,&#10;                color = MaterialTheme.colorScheme.onPrimaryContainer&#10;            )&#10;&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;&#10;            // Status message&#10;            Text(&#10;                text = statusMessage,&#10;                style = MaterialTheme.typography.bodyMedium,&#10;                color = MaterialTheme.colorScheme.onPrimaryContainer,&#10;                textAlign = TextAlign.Center&#10;            )&#10;&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;&#10;            // Loading indicator (only show if still waiting)&#10;            if (waitingForPuzzle) {&#10;                CircularProgressIndicator(&#10;                    modifier = Modifier.size(40.dp),&#10;                    color = MaterialTheme.colorScheme.primary,&#10;                    strokeWidth = 3.dp&#10;                )&#10;            }&#10;&#10;            // Error message if any&#10;            errorMessage?.let { message -&gt;&#10;                Spacer(modifier = Modifier.height(16.dp))&#10;                Text(&#10;                    text = message,&#10;                    style = MaterialTheme.typography.bodySmall,&#10;                    color = MaterialTheme.colorScheme.error,&#10;                    textAlign = TextAlign.Center&#10;                )&#10;                &#10;                Spacer(modifier = Modifier.height(16.dp))&#10;                &#10;                Button(&#10;                    onClick = onDismiss,&#10;                    modifier = Modifier.fillMaxWidth()&#10;                ) {&#10;                    Text(&quot;Close&quot;)&#10;                }&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/kooshmeen/sudoku/ui/screens/RecordScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/kooshmeen/sudoku/ui/screens/RecordScreen.kt" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>